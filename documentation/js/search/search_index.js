var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,1.844,1,3.142]],["body/entities/Address.html",[0,2.62,1,4.463,2,2.533,3,0.079,4,0.079,5,0.064,6,4.327,7,0.306,8,1.217,9,3.666,10,6.599,11,6.599,12,1.892,13,6.599,14,0.946,15,2.811,16,0.473,17,0.007,18,1.645,19,1.753,20,4.851,21,0.641,22,4.87,23,4.87,24,1.672,25,4.123,26,4.87,27,4.87,28,4.327,29,6.566,30,4.87,31,0.183,32,5.833,33,1.738,34,4.87,35,0.079,36,0.198,37,0.005,38,0.005]],["title/controllers/AppController.html",[39,1.486,40,3.513]],["body/controllers/AppController.html",[3,0.082,4,0.082,5,0.066,7,0.314,17,0.007,18,1.287,19,1.057,21,0.387,31,0.186,35,0.082,36,0.203,37,0.005,38,0.005,39,2.15,40,5.082,41,1.642,42,4.446,43,1.522,44,8.037,45,5.004,46,1.118,47,6.686,48,0.721,49,3.689,50,1.997,51,4.078,52,2.524,53,3.803,54,4.078,55,2.509,56,4.789,57,5.004,58,6.686,59,5.004,60,6.686,61,5.004,62,6.686,63,5.004,64,6.686,65,5.004,66,6.686,67,3.584,68,1.227,69,3.803,70,4.446,71,4.446]],["title/modules/AppModule.html",[72,1.27,73,3.513]],["body/modules/AppModule.html",[3,0.04,4,0.04,5,0.032,14,0.357,16,0.141,17,0.007,21,0.191,31,0.259,35,0.04,36,0.101,37,0.003,38,0.003,40,3.787,41,1.305,43,0.564,46,0.554,48,0.357,50,0.989,72,1.093,73,7.134,74,0.966,75,1.749,76,2.201,77,2.201,78,4.531,79,4.775,80,4.775,81,4.775,82,4.531,83,4.775,84,4.531,85,4.323,86,4.775,87,4.531,88,4.775,89,4.775,90,4.531,91,4.775,92,4.775,93,4.775,94,4.775,95,4.531,96,4.141,97,1.843,98,1.148,99,1.118,100,2.478,101,1.625,102,2.478,103,3.977,104,5.703,105,2.478,106,0.451,107,0.379,108,2.478,109,1.684,110,3.977,111,3.977,112,1.375,113,4.982,114,3.977,115,2.019,116,2.478,117,2.019,118,2.201,119,1.883,120,2.478,121,2.478,122,2.579,123,2.478,124,2.201,125,2.201,126,2.478,127,2.478,128,2.478,129,3.977,130,2.478,131,3.977,132,2.478,133,3.023,134,2.201,135,3.977,136,2.478,137,3.977,138,2.478,139,3.977,140,2.478,141,3.977,142,2.478,143,3.977,144,2.201,145,3.533,146,2.201,147,2.201,148,2.478,149,2.478,150,2.478,151,1.684,152,3.533,153,2.201,154,1.479,155,2.478,156,1.883,157,2.478,158,2.478,159,2.019,160,3.241,161,1.775,162,2.478,163,1.607,164,2.201,165,2.478,166,1.775,167,2.478,168,2.478,169,2.478,170,2.019,171,2.478,172,2.478,173,2.478,174,2.478,175,2.373,176,1.883,177,2.478,178,2.478,179,2.478,180,2.478,181,1.18,182,5.703,183,5.703,184,2.478,185,1.883,186,1.883,187,2.478]],["title/controllers/AuthenticationController.html",[39,1.486,188,3.513]],["body/controllers/AuthenticationController.html",[3,0.051,4,0.051,5,0.041,7,0.197,14,1.005,15,2.272,16,0.419,17,0.007,19,1.474,21,0.539,31,0.234,35,0.051,36,0.127,37,0.004,38,0.004,39,1.007,41,1.027,43,1.087,46,1.559,48,0.451,55,2.141,68,1.711,106,1.269,107,1.067,160,2.551,163,2.03,188,3.631,189,2.782,190,1.534,191,2.03,192,3.631,193,2.308,194,4.777,195,4.777,196,3.247,197,3.893,198,2.782,199,4.947,200,3.131,201,3.131,202,4.039,203,3.131,204,3.131,205,4.402,206,3.131,207,1.781,208,3.131,209,3.131,210,3.131,211,3.131,212,3.131,213,3.131,214,2.782,215,4.405,216,4.777,217,3.131,218,4.244,219,1.681,220,2.38,221,1.31,222,1.945,223,1.8,224,3.893,225,1.681,226,1.377,227,3.756,228,2.551,229,3.012,230,2.03,231,3.457,232,2.128,233,3.131,234,2.782,235,1.738,236,2.967,237,3.098,238,2.38,239,3.131,240,2.38,241,1.869,242,2.03,243,3.131,244,2.38,245,0.782,246,1.72,247,1.789,248,3.098,249,3.131,250,3.247,251,3.131,252,3.131,253,3.131,254,4.925,255,3.131,256,3.893,257,4.202,258,3.131,259,2.312,260,3.131,261,3.131,262,4.244,263,3.131,264,3.131,265,3.131,266,2.782,267,3.893,268,1.579,269,2.551,270,2.782,271,2.782,272,2.551,273,2.782,274,3.131,275,3.131,276,3.131,277,3.131,278,3.131,279,3.131]],["title/modules/AuthenticationModule.html",[72,1.27,78,3.142]],["body/modules/AuthenticationModule.html",[3,0.061,4,0.061,5,0.049,17,0.007,31,0.251,35,0.061,36,0.153,37,0.004,38,0.004,41,1.798,48,0.542,49,3.477,50,1.502,72,1.506,74,1.467,75,2.41,78,6.34,84,5.351,96,4.89,97,2.539,98,1.744,99,1.698,101,2.639,112,3.587,125,3.343,160,3.067,163,2.44,164,3.343,181,2.609,188,4.911,193,1.075,196,2.558,231,5.274,232,3.724,236,2.338,280,3.343,281,3.763,282,3.343,283,3.343,284,5.638,285,5.638,286,5.638,287,5.638,288,5.351,289,3.763,290,4.911,291,3.27,292,3.343,293,2.695,294,5.479,295,2.164,296,4.868,297,3.763,298,3.763,299,3.763,300,4.602,301,2.695,302,3.763,303,4.165,304,3.403,305,3.763,306,3.067,307,3.067,308,2.86,309,3.067,310,3.763,311,3.067,312,3.763]],["title/injectables/AuthenticationService.html",[231,2.759,313,0.923]],["body/injectables/AuthenticationService.html",[3,0.042,4,0.042,5,0.034,7,0.162,9,3.287,14,0.976,15,1.577,16,0.386,17,0.007,18,1.604,21,0.549,24,1.726,31,0.206,35,0.042,36,0.104,37,0.003,38,0.003,43,0.932,46,1.514,48,0.37,49,3.483,50,1.026,55,2.215,68,1.56,106,1.232,107,1.036,191,1.667,193,2.172,196,1.748,197,3.338,207,1.527,214,3.639,215,3.959,218,3.639,229,3.524,230,1.667,231,2.445,234,2.284,245,1.024,246,2.012,247,1.577,257,3.311,259,2.27,268,3.209,293,1.841,308,3.113,311,3.338,313,0.818,314,0.898,315,2.284,316,4.096,317,5.824,318,5.106,319,4.096,320,5.106,321,2.095,322,6.316,323,2.571,324,4.096,325,6.777,326,2.571,327,1.951,328,2.571,329,2.571,330,5.174,331,2.571,332,1.534,333,1.667,334,4.323,335,2.656,336,4.096,337,2.571,338,2.571,339,2.571,340,6.777,341,2.571,342,6.361,343,2.571,344,3.639,345,2.284,346,2.571,347,3.311,348,2.571,349,3.311,350,1.841,351,2.571,352,2.571,353,3.113,354,4.096,355,2.571,356,1.597,357,2.934,358,2.571,359,2.571,360,3.029,361,2.324,362,2.284,363,2.284,364,5.106,365,2.571,366,2.571,367,5.106,368,2.571,369,1.954,370,2.571,371,2.571,372,4.096,373,4.096,374,2.934,375,3.639,376,2.571,377,2.571,378,2.571,379,5.824,380,3.617,381,5.174,382,4.096,383,2.571,384,2.571,385,2.571,386,2.571,387,2.571,388,4.096,389,4.096,390,2.571]],["title/controllers/AuthorizationController.html",[39,1.486,391,3.513]],["body/controllers/AuthorizationController.html",[3,0.074,4,0.074,5,0.059,7,0.284,14,0.899,16,0.355,17,0.007,19,1.318,21,0.482,24,2.129,31,0.239,35,0.074,36,0.184,37,0.005,38,0.005,39,1.454,41,1.484,43,1.42,46,1.394,48,0.651,52,2.281,68,1.531,106,1.135,107,0.954,190,2.215,219,3.837,220,3.436,223,2.599,225,2.427,226,1.988,247,1.396,334,5.496,391,4.743,392,4.017,393,4.017,394,6.35,395,6.35,396,4.521,397,6.254,398,4.521,399,4.521,400,4.521,401,6.254,402,4.521,403,4.521,404,2.698,405,5.432,406,3.436,407,4.858,408,4.017,409,3.725,410,4.017,411,4.017,412,3.073,413,4.017,414,3.436,415,4.521,416,4.521,417,4.521,418,4.521,419,4.521,420,5.544,421,5.544,422,4.521,423,4.521,424,4.521]],["title/modules/AuthorizationModule.html",[72,1.27,79,3.311]],["body/modules/AuthorizationModule.html",[3,0.095,4,0.095,5,0.077,15,1.805,17,0.007,31,0.245,35,0.095,36,0.237,37,0.006,38,0.006,41,2.427,48,0.842,72,2.032,74,2.278,75,3.252,79,6.437,97,3.427,98,2.707,99,2.636,101,2.387,181,3.522,391,6.167,407,6.109,408,5.19,425,5.19,426,5.19,427,5.842,428,3.243,429,2.13,430,5.842,431,5.842,432,5.19]],["title/injectables/AuthorizationService.html",[313,0.923,407,3.142]],["body/injectables/AuthorizationService.html",[3,0.077,4,0.077,5,0.062,7,0.296,12,1.861,14,1.052,15,1.457,16,0.416,17,0.007,21,0.565,24,2.157,31,0.236,33,1.683,35,0.077,36,0.192,37,0.005,38,0.005,43,1.462,46,1.435,48,0.679,106,1.329,107,1.117,193,2.418,245,1.606,246,1.4,259,2.292,313,1.283,314,1.647,394,6.491,395,5.707,397,6.317,401,6.317,407,4.367,409,3.834,410,4.19,411,4.19,429,1.72,433,4.19,434,4.716,435,3.843,436,4.716,437,6.424,438,4.716,439,4.716,440,6.424,441,4.716,442,2.379,443,3.584,444,4.716,445,6.424]],["title/interfaces/BookProperties.html",[446,2.142,447,3.311]],["body/interfaces/BookProperties.html",[3,0.107,4,0.107,5,0.086,7,0.411,8,1.47,16,0.452,17,0.007,18,1.778,35,0.107,37,0.006,38,0.006,446,3.031,447,5.681,448,3.904,449,5.812,450,5.331,451,8.875,452,8.875]],["title/interfaces/CarProperties.html",[446,2.142,453,3.311]],["body/interfaces/CarProperties.html",[3,0.104,4,0.104,5,0.083,7,0.4,8,1.445,16,0.501,17,0.007,18,1.692,24,1.621,35,0.104,37,0.006,38,0.006,446,2.949,448,3.798,450,5.186,453,5.586,454,5.654,455,8.791,456,8.791,457,7.8,458,6.364,459,6.364]],["title/controllers/CategoriesController.html",[39,1.486,460,3.513]],["body/controllers/CategoriesController.html",[3,0.055,4,0.055,5,0.044,7,0.211,12,1.711,14,1.037,16,0.41,17,0.007,19,1.656,21,0.606,31,0.234,35,0.055,36,0.137,37,0.004,38,0.004,39,1.081,41,1.103,43,1.147,46,1.751,48,0.484,52,1.696,68,1.922,106,1.309,107,1.101,190,1.647,219,2.707,221,2.109,223,1.933,225,1.805,226,1.478,247,1.038,404,2.007,406,2.555,409,2.007,412,2.285,414,2.555,460,3.832,461,2.987,462,2.987,463,3.427,464,4.812,465,5.97,466,3.611,467,3.611,468,4.479,469,3.611,470,3.362,471,4.812,472,3.362,473,3.362,474,4.901,475,3.362,476,5.041,477,4.479,478,3.362,479,3.362,480,5.935,481,3.611,482,3.362,483,3.362,484,3.362,485,3.362,486,3.362,487,3.362,488,3.362,489,3.362,490,4.812,491,3.362,492,3.362,493,2.408,494,2.555,495,2.74,496,2.74,497,2.555,498,2.987,499,2.18,500,2.74,501,2.987,502,3.362,503,2.74,504,2.408,505,2.74,506,4.111,507,2.987,508,1.866,509,4.479,510,3.362,511,3.362,512,2.987,513,3.362,514,3.362,515,6.719,516,3.362,517,3.362,518,3.362,519,3.362,520,3.362,521,3.362,522,2.74,523,3.362,524,3.362,525,3.362,526,2.74,527,3.362,528,3.362,529,3.362,530,3.362,531,3.362,532,3.362,533,3.362]],["title/modules/CategoriesModule.html",[72,1.27,80,3.311]],["body/modules/CategoriesModule.html",[3,0.092,4,0.092,5,0.074,17,0.007,31,0.243,35,0.092,36,0.23,37,0.005,38,0.005,41,2.378,48,0.815,72,1.991,74,2.207,75,3.187,80,6.384,97,3.359,98,2.623,99,2.554,101,2.312,181,3.452,381,5.029,428,3.142,429,2.064,460,6.077,474,3.671,506,6.059,507,5.029,534,5.029,535,5.029,536,5.661,537,5.029,538,5.661,539,5.029,540,5.661,541,5.661,542,5.029,543,5.029,544,5.661]],["title/injectables/CategoriesService.html",[313,0.923,506,3.142]],["body/injectables/CategoriesService.html",[3,0.052,4,0.052,5,0.042,7,0.201,12,1.888,14,1.068,16,0.422,17,0.007,21,0.613,24,2.175,31,0.215,33,1.141,35,0.052,36,0.13,37,0.004,38,0.004,43,1.105,46,1.722,48,0.461,55,2.051,68,1.728,106,1.349,107,1.134,175,1.523,193,2.516,207,2.187,245,1.213,246,0.95,259,2.75,313,0.97,314,1.117,360,3.407,361,2.614,409,1.909,429,1.166,435,3.209,442,1.613,463,3.3,464,4.692,465,5.821,466,3.477,467,3.477,468,4.313,469,3.477,471,5.045,474,5.376,490,4.692,506,3.3,508,1.775,509,4.313,539,2.841,545,2.841,546,3.198,547,3.198,548,4.855,549,4.855,550,3.198,551,3.198,552,3.198,553,3.956,554,3.198,555,3.956,556,3.198,557,4.855,558,3.198,559,3.956,560,3.198,561,2.431,562,3.198,563,2.29,564,3.198,565,3.198,566,3.198,567,4.855,568,4.069,569,4.248,570,3.198,571,4.855,572,6.552,573,3.198,574,5.868,575,2.431,576,3.198,577,2.431,578,3.198,579,3.198,580,3.198]],["title/entities/Category.html",[0,1.844,474,2.998]],["body/entities/Category.html",[0,2.712,2,2.668,3,0.084,4,0.084,5,0.067,7,0.322,8,1.26,9,3.635,12,1.941,16,0.462,17,0.007,18,1.308,19,1.715,20,4.232,21,0.627,24,1.731,25,4.232,31,0.19,33,1.83,35,0.084,36,0.208,37,0.005,38,0.005,107,1.166,221,3.704,474,4.408,569,4.943,581,4.557,582,7.623,583,5.166,584,7.623,585,5.129,586,5.129,587,5.129,588,4.557,589,6.797,590,5.129,591,4.18,592,6.039]],["title/classes/CategoryNotFoundException.html",[36,0.188,561,3.513]],["body/classes/CategoryNotFoundException.html",[3,0.103,4,0.103,5,0.083,12,1.608,14,0.91,16,0.36,17,0.007,21,0.488,24,2.14,31,0.176,35,0.103,36,0.256,37,0.006,38,0.006,48,0.91,106,1.148,107,0.966,245,1.578,561,5.9,593,1.385,594,6.897,595,4.292,596,3.171,597,5.221,598,7.763,599,4.523,600,7.763,601,6.315,602,4.292]],["title/entities/Comment.html",[0,1.844,603,2.658]],["body/entities/Comment.html",[0,2.641,2,2.563,3,0.08,4,0.08,5,0.065,7,0.31,8,1.227,9,3.613,12,1.903,15,2.574,16,0.455,17,0.007,18,1.274,19,1.688,20,4.148,21,0.617,24,1.686,25,4.148,31,0.208,33,1.759,35,0.08,36,0.2,37,0.005,38,0.005,221,3.816,591,4.017,603,3.806,604,4.379,605,5.176,606,4.297,607,5.394,608,5.88,609,4.929,610,4.929,611,4.929,612,6.619,613,4.929,614,5.68,615,2.646]],["title/controllers/CommentsController.html",[39,1.486,616,3.513]],["body/controllers/CommentsController.html",[3,0.069,4,0.069,5,0.056,7,0.268,14,0.863,15,1.85,16,0.341,17,0.007,19,1.266,21,0.463,31,0.244,35,0.069,36,0.173,37,0.004,38,0.004,39,1.371,41,1.399,43,1.363,46,1.338,48,0.614,52,2.15,55,1.241,68,1.469,106,1.089,107,0.916,190,2.088,193,2.344,199,4.319,202,3.393,207,1.589,219,3.216,221,2.898,222,3.72,223,2.451,225,2.288,226,1.874,235,2.366,237,2.764,242,2.764,247,1.317,248,2.764,250,2.897,496,3.474,508,2.366,603,3.982,616,4.553,617,3.787,618,3.474,619,6.153,620,6.153,621,3.787,622,5.106,623,4.262,624,4.262,625,5.71,626,4.262,627,2.853,628,4.29,629,3.053,630,3.053,631,4.707,632,3.787,633,3.474,634,3.787,635,4.262,636,2.544,637,2.897,638,2.897,639,3.053,640,4.262,641,4.262,642,3.787,643,2.764,644,3.444,645,2.897,646,3.022,647,3.24,648,4.262,649,4.262]],["title/modules/CommentsModule.html",[72,1.27,81,3.311]],["body/modules/CommentsModule.html",[3,0.089,4,0.089,5,0.071,17,0.007,31,0.254,35,0.089,36,0.222,37,0.005,38,0.005,41,2.322,48,0.786,72,1.944,74,2.126,75,3.112,81,6.321,97,3.279,98,2.527,99,2.461,101,2.228,181,3.37,428,3.027,429,1.989,603,3.136,616,5.97,631,5.999,632,4.845,639,3.906,650,4.845,651,4.845,652,5.454,653,6.286,654,2.928,655,5.378,656,4.845,657,5.454,658,5.454,659,5.378,660,5.454,661,5.454,662,5.454]],["title/injectables/CommentsService.html",[313,0.923,631,3.142]],["body/injectables/CommentsService.html",[3,0.071,4,0.071,5,0.057,7,0.275,14,1.012,15,2.347,16,0.4,17,0.007,21,0.543,24,1.789,31,0.245,35,0.071,36,0.178,37,0.005,38,0.005,43,1.389,46,1.363,48,0.63,52,2.208,68,1.496,106,1.277,107,1.074,193,2.363,207,1.631,245,1.094,246,1.299,313,1.219,314,1.529,508,2.429,603,3.508,605,4.72,615,2.349,619,5.421,620,6.241,621,5.421,622,5.165,627,2.906,631,4.147,633,3.566,636,2.612,637,2.975,638,2.975,639,3.134,643,3.956,654,2.349,663,3.888,664,3.888,665,7.353,666,7.545,667,4.376,668,4.376,669,4.376,670,4.651,671,4.376,672,2.975,673,3.134,674,3.888,675,3.888,676,3.134,677,4.376,678,3.888,679,3.888,680,4.376,681,3.888,682,4.376]],["title/classes/ConfirmEmailDto.html",[36,0.188,683,3.513]],["body/classes/ConfirmEmailDto.html",[3,0.104,4,0.104,5,0.084,7,0.401,8,1.449,16,0.364,17,0.007,18,1.504,19,1.35,21,0.494,31,0.178,35,0.104,36,0.318,37,0.006,38,0.006,268,4.262,593,1.401,683,5.942,684,4.34,685,6.946,686,5.676,687,3.546,688,6.389,689,3.723,690,3.723,691,2.381]],["title/classes/CreateCategoryDto.html",[36,0.188,471,3.311]],["body/classes/CreateCategoryDto.html",[3,0.105,4,0.105,5,0.084,7,0.405,8,1.456,16,0.367,17,0.007,18,1.512,19,1.36,21,0.498,31,0.18,35,0.105,36,0.319,37,0.006,38,0.006,107,1.296,471,5.626,593,1.412,687,3.574,689,3.741,690,3.741,691,2.4,692,6.979,693,5.247,694,5.721]],["title/classes/CreateCommentCommand.html",[36,0.188,673,3.311]],["body/classes/CreateCommentCommand.html",[3,0.09,4,0.09,5,0.073,7,0.348,8,1.326,9,3.457,14,0.799,15,2.674,16,0.451,17,0.007,21,0.612,31,0.199,35,0.09,36,0.225,37,0.005,38,0.005,106,1.009,107,0.848,245,1.788,247,2.738,508,3.078,593,1.216,603,4.81,605,5.378,615,2.977,622,5.885,633,4.519,673,5.123,695,7.432,696,4.927,697,5.546,698,5.546,699,5.546,700,5.546]],["title/classes/CreateCommentDto.html",[36,0.188,622,3.142]],["body/classes/CreateCommentDto.html",[3,0.094,4,0.094,5,0.075,7,0.362,8,1.358,16,0.483,17,0.007,18,1.41,19,1.548,21,0.566,31,0.225,35,0.094,36,0.327,37,0.005,38,0.005,221,3.373,593,1.263,606,4.635,622,4.982,687,3.197,689,3.49,690,3.49,691,2.147,701,7.161,702,5.118,703,5.76,704,6.448,705,5.76,706,5.76,707,3.578,708,6.511,709,5.76,710,5.118]],["title/classes/CreateCommentHandler.html",[36,0.188,655,3.513]],["body/classes/CreateCommentHandler.html",[3,0.081,4,0.081,5,0.065,7,0.313,14,0.961,16,0.38,17,0.007,21,0.516,31,0.233,33,1.78,35,0.081,36,0.203,37,0.005,38,0.005,43,1.519,46,1.115,55,1.943,68,1.224,106,1.213,107,1.02,193,2.147,245,1.668,246,1.481,259,2.381,429,1.819,435,3.932,442,2.517,593,1.094,603,4.323,605,4.144,627,3.178,639,3.573,654,2.678,655,5.071,673,5.749,675,4.432,711,6.68,712,4.432,713,3.704,714,5.714,715,4.327,716,4.432,717,4.989,718,5.928,719,5.071,720,4.989,721,4.779,722,3.792,723,4.432,724,4.989,725,4.432,726,6.673,727,4.989,728,4.989]],["title/classes/CreateLogDto.html",[36,0.188,729,3.513]],["body/classes/CreateLogDto.html",[3,0.095,4,0.095,5,0.077,7,0.367,8,1.37,16,0.462,17,0.007,18,1.729,19,1.714,21,0.627,31,0.163,35,0.095,36,0.3,37,0.006,38,0.006,593,1.281,689,4.347,691,2.178,729,5.621,730,7.577,731,5.19,732,5.811,733,6.167,734,5.811,735,5.842,736,5.842,737,5.842]],["title/classes/CreatePostDto.html",[36,0.188,738,3.311]],["body/classes/CreatePostDto.html",[3,0.092,4,0.092,5,0.074,7,0.356,8,1.343,16,0.455,17,0.007,18,1.715,19,1.689,21,0.618,31,0.158,35,0.092,36,0.294,37,0.005,38,0.005,175,2.696,593,1.241,606,4.597,687,4.023,689,4.014,690,3.808,691,2.11,738,5.191,739,7.489,740,4.613,741,6.077,742,5.726,743,5.661,744,5.661,745,5.661,746,5.661,747,5.661,748,4.023,749,4.613]],["title/classes/CreateProductCommand.html",[36,0.188,750,3.311]],["body/classes/CreateProductCommand.html",[3,0.09,4,0.09,5,0.073,7,0.348,8,1.326,9,3.457,14,0.799,15,2.674,16,0.451,17,0.007,21,0.612,31,0.199,35,0.09,36,0.225,37,0.005,38,0.005,106,1.009,107,0.848,245,1.788,247,2.738,508,3.078,593,1.216,615,2.977,750,5.123,751,7.432,752,4.215,753,4.503,754,3.984,755,5.546,756,5.615,757,4.519,758,4.927,759,4.927,760,3.972]],["title/classes/CreateProductDto.html",[36,0.188,756,2.998]],["body/classes/CreateProductDto.html",[3,0.093,4,0.093,5,0.075,7,0.358,8,1.618,14,1.049,16,0.414,17,0.007,18,1.401,19,1.538,21,0.563,31,0.224,35,0.093,36,0.296,37,0.005,38,0.005,107,1.226,447,5.745,453,5.745,593,1.25,687,3.164,689,3.467,690,3.467,691,2.125,748,4.452,756,4.721,761,7.126,762,4.332,763,5.064,764,5.7,765,5.064,766,6.468,767,5.064]],["title/classes/CreateProductHandler.html",[36,0.188,768,3.513]],["body/classes/CreateProductHandler.html",[3,0.081,4,0.081,5,0.065,7,0.313,14,0.961,16,0.38,17,0.007,21,0.516,31,0.233,33,1.78,35,0.081,36,0.203,37,0.005,38,0.005,43,1.519,46,1.115,55,1.943,68,1.224,106,1.213,107,1.02,193,2.147,245,1.668,246,1.481,259,2.381,429,1.819,435,3.932,442,2.517,593,1.094,627,3.178,654,2.678,713,3.704,714,5.714,715,4.327,719,5.071,721,4.779,722,3.792,723,4.432,750,5.749,753,3.47,754,3.581,768,5.071,769,6.68,770,3.573,771,3.573,772,4.989,773,4.779,774,4.989,775,3.099,776,3.792,777,4.989,778,3.573,779,6.673,780,4.989,781,4.989]],["title/classes/CreateUserDto.html",[36,0.188,782,3.513]],["body/classes/CreateUserDto.html",[3,0.086,4,0.086,5,0.069,7,0.333,8,1.286,14,1,16,0.468,17,0.007,18,1.742,19,1.736,21,0.635,31,0.148,35,0.086,36,0.282,37,0.005,38,0.005,107,1.184,327,3.688,356,4.81,593,1.161,687,2.939,689,3.914,690,3.914,691,1.974,748,3.853,782,5.275,783,7.58,784,4.315,785,6.31,786,5.885,787,5.295,788,5.295,789,4.704,790,5.295,791,5.295,792,6.167,793,5.295,794,4.315,795,4.704,796,4.315,797,4.704]],["title/injectables/CustomLogger.html",[313,0.923,798,3.311]],["body/injectables/CustomLogger.html",[3,0.05,4,0.05,5,0.041,7,0.195,8,0.878,14,1.055,16,0.434,17,0.007,18,1.824,21,0.589,31,0.194,35,0.05,36,0.126,37,0.004,38,0.004,43,1.078,46,1.551,48,0.446,49,3.732,50,1.235,55,0.901,67,5.244,69,2.353,70,4.207,106,1.331,107,1.12,109,4.719,245,1.183,246,1.708,247,1.776,313,0.946,314,1.081,347,4.748,596,1.934,732,6.658,733,5.277,734,6.271,798,3.392,799,6.981,800,2.523,801,5.751,802,5.834,803,4.001,804,4.735,805,4.207,806,3.095,807,4.614,808,6.442,809,4.735,810,4.735,811,3.095,812,4.735,813,6.442,814,3.095,815,4.735,816,3.095,817,4.735,818,3.095,819,4.735,820,3.095,821,3.095,822,3.095,823,2.523,824,2.523,825,3.095,826,2.75,827,3.095,828,3.095,829,3.095,830,3.095,831,2.353,832,3.095,833,3.095,834,6.942,835,3.095,836,3.095,837,4.735]],["title/entities/DatabaseFile.html",[0,1.844,838,3.142]],["body/entities/DatabaseFile.html",[0,2.829,2,2.846,3,0.089,4,0.089,5,0.072,7,0.344,8,1.314,9,3.591,12,2.004,16,0.474,17,0.007,18,1.365,19,1.662,20,4.62,21,0.608,24,1.806,25,4.367,31,0.153,33,1.953,35,0.089,36,0.222,37,0.005,38,0.005,838,4.82,839,5.657,840,7.394,841,3.919,842,4.886,843,5.347,844,7.091,845,4.459,846,7.091,847,5.472,848,4.459,849,4.459]],["title/controllers/DatabaseFilesController.html",[39,1.486,850,3.513]],["body/controllers/DatabaseFilesController.html",[3,0.08,4,0.08,5,0.087,7,0.31,12,1.686,14,0.71,16,0.377,17,0.007,19,1.041,21,0.381,24,1.903,31,0.223,35,0.08,36,0.2,37,0.005,38,0.005,39,1.585,41,1.617,43,1.506,46,1.101,48,0.71,52,2.486,55,1.927,68,1.209,106,0.896,107,0.754,151,4.499,175,2.347,190,2.415,193,2.134,207,1.837,247,1.522,259,1.759,361,1.967,404,2.942,405,5.03,481,4.74,606,3.806,839,4.499,850,5.03,851,4.017,852,4.111,853,4.111,854,6.639,855,4.379,856,5.684,857,4.929,858,4.74,859,4.017,860,5.079,861,3.53,862,4.379,863,4.74,864,2.347,865,4.929,866,3.746,867,4.017,868,4.929,869,4.929,870,4.017,871,4.017,872,4.017,873,4.379,874,4.017,875,4.379]],["title/modules/DatabaseFilesModule.html",[72,1.27,82,3.142]],["body/modules/DatabaseFilesModule.html",[3,0.088,4,0.088,5,0.071,17,0.007,31,0.246,35,0.088,36,0.22,37,0.005,38,0.005,41,2.312,48,0.78,50,2.162,72,1.936,74,2.112,75,3.098,82,6.098,97,3.265,98,2.51,99,2.445,101,2.213,112,3.911,151,3.682,181,3.355,291,4.205,428,3.007,429,1.976,838,3.682,839,3.682,850,5.951,852,4.376,860,6.389,861,3.88,876,4.813,877,4.813,878,4.813,879,4.813,880,4.813,881,3.365,882,4.813,883,5.418]],["title/injectables/DatabaseFilesService.html",[313,0.923,860,3.142]],["body/injectables/DatabaseFilesService.html",[3,0.064,4,0.064,5,0.095,7,0.246,12,0.995,14,1.04,16,0.411,17,0.007,18,1.27,21,0.558,24,2.031,31,0.201,33,1.394,35,0.064,36,0.159,37,0.004,38,0.004,43,1.281,46,1.475,48,0.563,55,1.922,68,1.381,106,1.313,107,1.104,151,5.204,193,2.447,207,2.099,245,1.407,246,1.16,259,2.577,313,1.125,314,1.365,360,2.928,361,2.246,429,1.425,435,3.538,442,1.971,575,2.969,577,2.969,597,4.099,838,3.827,839,5.204,842,2.427,843,4.909,860,3.827,880,3.471,881,2.427,884,3.184,885,5.63,886,5.002,887,6.6,888,3.907,889,3.907,890,5.63,891,5.63,892,7.319,893,3.907,894,5.173,895,5.002,896,3.907,897,3.907,898,5.864,899,3.907,900,5.864,901,3.907,902,5.379,903,3.907,904,3.907,905,3.907,906,3.907]],["title/classes/DatabaseLogger.html",[36,0.188,907,3.513]],["body/classes/DatabaseLogger.html",[3,0.109,4,0.046,5,0.037,7,0.179,8,0.822,14,1.064,16,0.421,17,0.007,18,1.729,21,0.591,24,1.388,31,0.124,33,1.015,35,0.046,36,0.115,37,0.003,38,0.003,43,1.009,46,1.651,48,0.41,67,5.474,68,1.926,106,1.642,107,1.13,109,4.538,207,2.295,246,2.1,247,1.684,332,1.697,333,1.844,347,3.535,353,2.161,357,2.036,361,1.769,593,0.623,628,5.751,713,2.461,733,5.074,734,4.782,800,2.317,803,4.589,805,5.471,892,7.45,907,3.37,908,6.977,909,5.452,910,4.782,911,4.434,912,4.434,913,5.452,914,5.452,915,4.434,916,4.434,917,4.434,918,2.843,919,2.843,920,2.843,921,4.434,922,2.843,923,4.434,924,2.843,925,2.843,926,2.843,927,2.843,928,2.843,929,6.158,930,4.434,931,2.843,932,4.434,933,2.843,934,2.843,935,6.158,936,2.843,937,2.843,938,2.843,939,4.434,940,2.843,941,4.843,942,2.843,943,2.526,944,2.843]],["title/modules/DatabaseModule.html",[72,1.27,83,3.311]],["body/modules/DatabaseModule.html",[3,0.108,4,0.108,5,0.087,17,0.007,31,0.24,35,0.108,36,0.27,37,0.006,38,0.006,48,0.958,72,2.201,74,2.592,83,5.736,101,2.716,134,5.906,428,3.69,429,2.424,945,6.648,946,5.053,947,6.648]],["title/classes/DeleteProductCommand.html",[36,0.188,948,3.311]],["body/classes/DeleteProductCommand.html",[3,0.093,4,0.093,5,0.075,7,0.358,8,1.349,9,3.405,12,2.152,14,0.821,15,2.697,16,0.457,17,0.007,18,1.626,21,0.62,31,0.159,35,0.093,36,0.232,37,0.005,38,0.005,106,1.037,107,0.872,245,1.425,247,2.758,593,1.25,615,3.06,752,4.332,753,4.541,757,5.933,948,5.214,949,7.508,950,5.064,951,5.7,952,5.064]],["title/classes/DeleteProductHandler.html",[36,0.188,953,3.513]],["body/classes/DeleteProductHandler.html",[3,0.073,4,0.073,5,0.058,7,0.279,12,1.571,14,0.889,16,0.351,17,0.007,21,0.477,31,0.238,33,1.587,35,0.073,36,0.181,37,0.005,38,0.005,43,1.404,46,0.994,48,0.641,55,2.063,68,1.091,106,1.122,107,0.943,193,2.023,245,1.542,246,1.32,259,2.202,360,3.685,361,2.827,429,1.622,435,3.749,442,2.244,563,3.185,568,2.762,575,3.38,577,3.38,593,0.975,627,2.939,654,2.388,713,3.425,714,5.385,715,4.001,719,4.69,721,4.419,722,3.38,753,3.209,754,2.118,770,3.185,771,3.185,773,4.419,775,2.762,776,3.38,778,3.185,948,5.481,953,4.69,954,6.295,955,3.624,956,3.951,957,4.419,958,3.185,959,3.624,960,4.448,961,4.448,962,5.482,963,3.624,964,3.951,965,3.951,966,3.951,967,4.448,968,5.482]],["title/controllers/EmailConfirmationController.html",[39,1.486,969,3.513]],["body/controllers/EmailConfirmationController.html",[3,0.075,4,0.075,5,0.06,7,0.287,14,0.906,16,0.358,17,0.007,19,1.329,21,0.486,31,0.234,35,0.075,36,0.186,37,0.005,38,0.005,39,1.47,41,1.5,43,1.431,46,1.405,48,0.659,55,1.331,106,1.144,107,0.962,163,4.662,190,2.24,193,2.396,199,4.452,202,3.081,219,2.454,221,1.913,222,2.839,223,2.628,225,2.454,226,2.01,227,4.662,228,3.725,235,2.538,237,2.964,242,2.964,244,3.475,245,1.143,246,1.357,247,1.412,248,2.964,259,2.565,327,3.424,629,3.274,630,3.274,683,5.885,684,3.99,969,4.78,970,4.061,971,6.879,972,5.587,973,5.587,974,4.572,975,6.289,976,4.572,977,6.289,978,4.572,979,6.289,980,4.572,981,4.572,982,4.572,983,4.572,984,4.061,985,4.572,986,4.572,987,4.572,988,4.572,989,4.572,990,4.572,991,4.572]],["title/modules/EmailConfirmationModule.html",[72,1.27,84,3.142]],["body/modules/EmailConfirmationModule.html",[3,0.082,4,0.082,5,0.066,17,0.007,31,0.246,35,0.082,36,0.205,37,0.005,38,0.005,41,2.208,48,0.728,50,2.015,72,1.848,74,1.969,75,2.958,84,6.278,85,5.603,96,5.366,97,3.117,98,2.34,99,2.279,101,2.748,112,3.734,159,4.116,163,3.275,181,3.204,227,6.031,228,4.116,291,4.015,292,4.487,293,3.617,327,3.204,684,2.803,969,5.749,992,4.487,993,4.487,994,5.05,995,4.487,996,5.05,997,4.487,998,5.05,999,5.05]],["title/injectables/EmailConfirmationService.html",[227,2.998,313,0.923]],["body/injectables/EmailConfirmationService.html",[1,2.035,3,0.049,4,0.049,5,0.039,7,0.188,9,3.28,14,0.985,15,1.426,16,0.389,17,0.007,18,1.39,21,0.528,24,1.434,31,0.21,35,0.049,36,0.122,37,0.003,38,0.003,43,1.051,46,1.414,48,0.431,49,3.688,50,1.194,55,2.192,68,1.132,106,1.244,107,1.105,163,4.685,193,2.278,207,1.116,215,4.303,227,2.993,229,3.915,245,1.153,246,1.879,247,1.955,259,2.44,268,3.45,293,2.144,308,3.508,311,2.44,313,0.922,314,1.046,322,6.419,327,3.585,334,2.035,347,1.941,350,2.144,353,2.275,357,2.144,360,3.556,361,2.728,362,4.1,369,2.275,374,4.534,375,2.66,684,4.01,971,5.004,972,2.66,973,4.1,1000,2.66,1001,4.615,1002,4.615,1003,5.633,1004,2.994,1005,4.882,1006,2.994,1007,4.615,1008,2.994,1009,4.615,1010,2.994,1011,4.615,1012,2.994,1013,2.994,1014,2.994,1015,4.1,1016,2.994,1017,2.66,1018,2.66,1019,3.508,1020,2.994,1021,4.615,1022,4.615,1023,2.994,1024,2.994,1025,2.275,1026,2.994,1027,2.994,1028,2.275,1029,2.994,1030,2.994,1031,2.994,1032,2.994,1033,2.66,1034,2.994,1035,2.44,1036,2.994,1037,2.994,1038,2.994,1039,2.994,1040,4.615,1041,5.633,1042,4.615,1043,2.994,1044,2.994,1045,2.994,1046,2.994,1047,2.44,1048,2.994,1049,2.994,1050,2.994,1051,2.994,1052,2.994]],["title/modules/EmailModule.html",[72,1.27,85,2.998]],["body/modules/EmailModule.html",[3,0.096,4,0.096,5,0.077,17,0.007,31,0.227,35,0.096,36,0.24,37,0.006,38,0.006,48,0.851,50,2.356,72,2.046,74,2.302,75,3.274,85,5.933,97,3.45,98,2.736,99,2.665,101,2.412,112,4.133,181,3.546,291,4.444,1005,6.168,1053,5.247,1054,5.247,1055,5.247,1056,5.906,1057,5.906]],["title/classes/EmailScheduleDto.html",[36,0.188,1058,3.311]],["body/classes/EmailScheduleDto.html",[3,0.088,4,0.088,5,0.071,7,0.338,8,1.3,16,0.471,17,0.007,18,1.748,19,1.747,21,0.639,31,0.15,35,0.088,36,0.285,37,0.005,38,0.005,583,5.932,593,1.18,606,4.487,684,4.761,687,3.894,689,3.717,690,3.717,691,2.006,786,5.932,1035,6.36,1058,5.024,1059,7.62,1060,4.782,1061,7.805,1062,5.382,1063,7.805,1064,5.382,1065,5.382,1066,5.382]],["title/controllers/EmailSchedulingController.html",[39,1.486,1067,3.513]],["body/controllers/EmailSchedulingController.html",[3,0.081,4,0.081,5,0.065,7,0.312,14,0.714,16,0.282,17,0.007,19,1.404,21,0.513,31,0.233,35,0.081,36,0.201,37,0.005,38,0.005,39,1.594,41,1.627,43,1.513,46,1.485,48,0.714,106,0.902,107,0.758,161,5.368,190,2.429,193,2.454,219,2.662,221,2.075,223,2.851,225,2.662,226,2.181,235,2.753,237,3.216,245,1.239,246,1.472,247,1.532,248,4.309,327,3.165,630,3.551,684,4.161,984,4.405,1058,5.735,1067,5.051,1068,4.405,1069,6.659,1070,8.008,1071,5.904,1072,4.959,1073,4.959,1074,4.405,1075,4.959,1076,4.959,1077,5.904,1078,4.405,1079,4.405,1080,5.095,1081,4.405,1082,4.959,1083,4.959,1084,4.959,1085,4.959,1086,4.959,1087,4.959]],["title/modules/EmailSchedulingModule.html",[72,1.27,86,3.311]],["body/modules/EmailSchedulingModule.html",[3,0.093,4,0.093,5,0.074,17,0.007,31,0.235,35,0.093,36,0.231,37,0.005,38,0.005,41,2.384,48,0.818,72,1.996,74,2.215,75,3.194,85,5.786,86,6.578,97,3.366,98,2.632,99,2.563,101,2.967,159,4.629,161,4.068,181,3.459,327,3.459,684,3.153,1067,6.086,1080,6.065,1081,5.047,1088,5.047,1089,5.68,1090,5.047,1091,5.68,1092,5.68]],["title/injectables/EmailSchedulingService.html",[313,0.923,1080,3.142]],["body/injectables/EmailSchedulingService.html",[3,0.075,4,0.075,5,0.06,7,0.289,14,0.909,16,0.359,17,0.007,21,0.557,31,0.227,35,0.075,36,0.187,37,0.005,38,0.005,43,1.437,46,1.41,48,0.662,55,1.838,106,1.148,107,0.965,109,4.291,117,3.746,161,5.559,245,1.578,246,1.874,247,1.95,313,1.261,314,1.606,361,2.519,583,3.494,684,4.308,1005,5.45,1017,4.084,1028,3.494,1033,4.084,1035,3.746,1058,5.559,1071,5.609,1074,5.609,1077,4.084,1078,4.084,1079,4.084,1080,4.291,1093,4.084,1094,7.761,1095,4.597,1096,8.608,1097,4.597,1098,4.597,1099,4.597,1100,4.597,1101,4.084,1102,4.597,1103,5.145,1104,4.597,1105,4.597,1106,6.313,1107,4.597,1108,4.597,1109,4.597,1110,4.597,1111,4.597,1112,4.597]],["title/injectables/EmailService.html",[313,0.923,1005,2.998]],["body/injectables/EmailService.html",[3,0.079,4,0.079,5,0.063,7,0.303,8,1.21,14,0.94,15,1.491,16,0.421,17,0.007,21,0.571,31,0.221,35,0.079,36,0.196,37,0.005,38,0.005,43,1.486,46,1.078,48,0.695,49,4.178,50,1.926,52,2.435,56,3.457,68,1.184,106,1.187,107,0.998,245,1.206,246,2.195,247,1.491,313,1.304,314,1.686,347,3.13,360,2.511,361,1.926,807,3.457,1005,4.232,1113,4.289,1114,7.394,1115,6.527,1116,3.457,1117,6.527,1118,6.527,1119,7.394,1120,4.827,1121,7.394,1122,6.527,1123,6.527,1124,3.934,1125,4.827,1126,4.827,1127,3.669,1128,4.827,1129,4.827,1130,4.827,1131,4.827,1132,3.934,1133,4.827,1134,4.827,1135,4.827,1136,4.827,1137,4.827,1138,6.527,1139,4.289,1140,4.827,1141,4.827,1142,4.827]],["title/classes/EnvironmentVariables.html",[36,0.188,1143,3.767]],["body/classes/EnvironmentVariables.html",[3,0.043,4,0.043,5,0.035,7,0.166,8,0.777,16,0.511,17,0.007,18,1.735,19,1.896,21,0.694,24,2.079,31,0.117,35,0.043,36,0.211,37,0.003,38,0.003,53,2.011,55,1.22,56,3.727,68,0.649,69,3.955,175,1.26,241,2.501,335,1.716,360,1.376,361,1.056,593,0.58,687,4.531,689,3.945,690,4.231,691,0.986,707,1.643,748,3.285,831,3.185,1143,3.415,1144,2.011,1145,5.204,1146,5.204,1147,5.204,1148,5.204,1149,5.204,1150,5.204,1151,5.204,1152,5.204,1153,5.204,1154,5.204,1155,5.204,1156,5.204,1157,5.204,1158,5.204,1159,5.204,1160,5.204,1161,5.204,1162,5.204,1163,5.204,1164,5.204,1165,5.204,1166,5.204,1167,5.667,1168,2.646,1169,2.646,1170,2.646,1171,2.646,1172,2.646,1173,2.646,1174,2.646,1175,2.646,1176,6.862,1177,2.646,1178,2.646,1179,2.646,1180,2.646,1181,5.204,1182,2.646,1183,2.646,1184,2.646,1185,2.646,1186,2.646,1187,2.646,1188,2.646,1189,2.646,1190,2.646,1191,2.646,1192,2.646,1193,2.646,1194,2.646,1195,2.646,1196,6.451,1197,2.156,1198,4.465,1199,2.646,1200,2.156,1201,3.723,1202,3.415,1203,2.646,1204,2.156,1205,2.351,1206,2.351,1207,4.191,1208,2.646,1209,2.646,1210,2.646,1211,2.646,1212,2.646,1213,2.646,1214,2.011,1215,2.646]],["title/classes/ExceptionsLoggerFilter.html",[36,0.188,185,3.513]],["body/classes/ExceptionsLoggerFilter.html",[3,0.096,4,0.096,5,0.077,7,0.37,14,0.848,16,0.335,17,0.007,21,0.455,31,0.207,35,0.096,36,0.239,37,0.006,38,0.006,43,1.691,46,1.315,48,0.848,106,1.07,107,0.9,109,4,115,4.795,185,5.646,207,2.193,357,6.124,593,1.29,596,3.034,1127,6.499,1216,6.6,1217,5.228,1218,8.141,1219,7.429,1220,8.551,1221,5.884,1222,7.429,1223,5.884,1224,5.884,1225,5.884]],["title/injectables/ExcludeNullInterceptor.html",[186,3.513,313,0.923]],["body/injectables/ExcludeNullInterceptor.html",[3,0.09,4,0.09,5,0.073,7,0.348,14,0.799,16,0.316,17,0.007,21,0.429,31,0.233,35,0.09,36,0.225,37,0.005,38,0.005,43,1.628,46,1.239,48,0.799,68,1.36,106,1.009,107,0.848,186,5.437,313,1.429,314,1.937,713,3.078,732,3.972,1226,6.355,1227,4.927,1228,7.153,1229,7.153,1230,6.817,1231,7.432,1232,8.365,1233,5.546,1234,7.918,1235,6.355,1236,4.927,1237,5.546,1238,5.546,1239,4.519,1240,5.546,1241,4.519,1242,4.519,1243,5.546,1244,5.546,1245,5.546,1246,4.927]],["title/classes/FileNotFoundException.html",[36,0.188,1247,3.513]],["body/classes/FileNotFoundException.html",[3,0.103,4,0.103,5,0.083,12,1.608,14,0.91,16,0.36,17,0.007,21,0.488,24,2.14,31,0.176,35,0.103,36,0.256,37,0.006,38,0.006,48,0.91,106,1.148,107,0.966,245,1.578,593,1.385,595,4.292,596,3.171,597,5.221,599,4.523,602,4.292,894,5.56,1247,5.9,1248,6.897,1249,6.897,1250,6.315]],["title/classes/FileResponseDto.html",[36,0.188,1251,3.513]],["body/classes/FileResponseDto.html",[3,0.087,4,0.087,5,0.07,7,0.334,8,1.289,9,3.654,12,1.975,15,2.396,16,0.468,17,0.007,18,1.583,19,1.639,21,0.636,24,1.771,31,0.194,35,0.087,36,0.283,37,0.005,38,0.005,593,1.165,689,4.068,691,1.98,753,4.033,1025,5.895,1198,4.817,1251,5.287,1252,6.492,1253,4.72,1254,5.272,1255,5.312,1256,5.312,1257,5.312,1258,5.312,1259,4.329]],["title/classes/FileUploadDto.html",[36,0.188,1260,3.513]],["body/classes/FileUploadDto.html",[3,0.101,4,0.101,5,0.114,7,0.389,8,1.422,16,0.437,17,0.007,18,1.476,19,1.309,21,0.479,31,0.214,35,0.101,36,0.252,37,0.006,38,0.006,226,2.724,593,1.359,864,3.654,1252,5.831,1260,5.831,1261,5.049,1262,5.831,1263,5.504,1264,6.252,1265,6.252,1266,6.196,1267,5.215]],["title/classes/FileUploadMultipleDto.html",[36,0.188,1268,3.767]],["body/classes/FileUploadMultipleDto.html",[3,0.101,4,0.101,5,0.081,7,0.389,8,1.422,16,0.474,17,0.007,18,1.192,19,1.309,21,0.479,31,0.173,35,0.101,36,0.252,37,0.006,38,0.006,226,2.724,593,1.359,853,5.176,1252,5.831,1263,5.504,1264,5.049,1265,5.049,1267,5.215,1268,6.252,1269,5.215,1270,5.504,1271,5.831,1272,6.252,1273,4.018,1274,6.196]],["title/modules/FilesModule.html",[72,1.27,87,3.142]],["body/modules/FilesModule.html",[3,0.092,4,0.092,5,0.074,17,0.007,31,0.243,35,0.092,36,0.229,37,0.005,38,0.005,48,0.813,72,1.987,74,2.199,75,3.18,87,6.155,97,3.351,98,2.614,99,2.546,101,2.304,181,3.444,291,4.316,428,3.131,429,2.057,861,4.04,881,4.492,1275,5.012,1276,5.012,1277,5.012,1278,6.77,1279,5.641,1280,4.69,1281,5.012,1282,3.658,1283,5.012,1284,5.641]],["title/injectables/FilesService.html",[313,0.923,1278,3.311]],["body/injectables/FilesService.html",[3,0.051,4,0.03,5,0.117,7,0.117,9,2.725,12,2.167,14,0.89,15,2.005,16,0.352,17,0.007,18,1.301,21,0.477,24,1.982,31,0.195,33,0.664,35,0.03,36,0.076,37,0.002,38,0.002,43,0.715,46,1.561,48,0.268,49,3.027,50,0.743,51,3.904,55,2.23,68,1.175,106,1.124,107,1.099,193,2.31,219,1.687,245,0.785,246,1.211,247,0.575,259,2.628,313,0.628,314,0.65,360,2.121,361,2.697,404,4.171,429,0.679,435,3.027,442,0.939,563,1.333,568,1.952,606,2.754,627,4.052,753,2.121,843,4.751,852,4.341,863,2.92,881,1.952,894,4.841,898,6.209,900,5.768,902,3.904,957,2.251,959,1.517,1025,3.099,1047,2.561,1139,1.654,1247,1.415,1254,5.112,1269,2.136,1278,2.251,1280,1.207,1281,1.654,1282,1.207,1283,1.654,1285,1.517,1286,2.792,1287,3.142,1288,3.142,1289,2.792,1290,4.077,1291,4.077,1292,1.862,1293,4.077,1294,1.862,1295,3.142,1296,3.142,1297,4.751,1298,1.862,1299,3.764,1300,6.209,1301,6.002,1302,3.142,1303,1.862,1304,3.142,1305,1.862,1306,3.623,1307,3.142,1308,1.862,1309,3.142,1310,1.862,1311,1.862,1312,1.862,1313,1.862,1314,6.593,1315,1.654,1316,1.862,1317,4.256,1318,1.862,1319,1.862,1320,4.077,1321,3.142,1322,1.862,1323,5.805,1324,5.805,1325,1.862,1326,1.654,1327,3.142,1328,1.862,1329,3.142,1330,1.862,1331,3.142,1332,1.862,1333,1.862,1334,1.862,1335,1.862,1336,1.862,1337,3.142,1338,3.142,1339,1.862,1340,1.654,1341,1.862,1342,1.862]],["title/classes/FindAllProductsHandler.html",[36,0.188,1343,3.513]],["body/classes/FindAllProductsHandler.html",[3,0.072,4,0.072,5,0.058,7,0.278,12,1.127,14,0.885,16,0.35,17,0.007,21,0.475,31,0.238,33,1.579,35,0.072,36,0.18,37,0.005,38,0.005,43,1.399,46,0.988,55,2.057,68,1.085,106,1.118,107,0.94,193,2.017,245,1.536,246,1.313,259,1.579,429,1.613,435,3.74,442,2.231,568,2.747,593,0.97,627,2.927,636,2.64,637,3.007,638,3.007,644,4.062,646,3.851,654,2.375,670,2.375,713,3.412,715,4.581,753,2.3,754,2.107,771,3.168,773,4.403,775,2.747,778,3.168,824,3.605,842,2.747,1297,4.802,1343,4.672,1344,5.757,1345,3.93,1346,5.757,1347,4.424,1348,3.605,1349,5.468,1350,4.424,1351,3.605,1352,3.93,1353,3.93,1354,3.362,1355,3.168,1356,3.93,1357,3.93,1358,4.424,1359,5.01,1360,3.93,1361,3.93,1362,4.424,1363,5.01,1364,6.147,1365,4.424,1366,3.93,1367,3.605,1368,3.605]],["title/classes/FindAllProductsQuery.html",[36,0.188,1349,3.311]],["body/classes/FindAllProductsQuery.html",[3,0.092,4,0.092,5,0.074,7,0.356,8,1.343,9,3.475,14,0.815,16,0.455,17,0.007,21,0.618,24,2.147,31,0.158,35,0.092,36,0.23,37,0.005,38,0.005,106,1.029,107,0.866,245,1.811,247,2.753,593,1.241,670,5.016,672,3.848,1297,5.73,1349,5.191,1369,6.87,1370,5.029,1371,5.661,1372,5.661,1373,5.661,1374,5.661]],["title/classes/FindOneParams.html",[36,0.188,480,3.142]],["body/classes/FindOneParams.html",[3,0.105,4,0.105,5,0.084,7,0.405,8,1.456,12,2.159,16,0.367,17,0.007,18,1.512,19,1.36,21,0.498,31,0.18,35,0.105,36,0.319,37,0.006,38,0.006,480,5.34,504,5.626,593,1.412,691,2.4,1375,6.979,1376,5.721,1377,8.478,1378,6.439]],["title/classes/FindProductHandler.html",[36,0.188,1379,3.513]],["body/classes/FindProductHandler.html",[3,0.084,4,0.084,5,0.068,7,0.325,12,1.319,14,0.985,16,0.389,17,0.007,21,0.528,31,0.236,33,1.848,35,0.084,36,0.21,37,0.005,38,0.005,43,1.557,46,1.157,68,1.27,106,1.244,107,1.046,245,1.709,246,1.537,429,1.888,435,3.991,442,2.612,568,3.216,593,1.135,627,3.257,654,2.78,713,3.797,715,4.966,753,2.693,754,2.466,770,3.708,771,3.708,773,4.899,775,3.216,778,3.708,955,4.22,963,4.22,1344,6.242,1346,6.242,1348,4.22,1351,4.22,1352,4.6,1379,5.198,1380,5.178,1381,5.835,1382,4.6,1383,5.178,1384,6.077]],["title/classes/FindProductQuery.html",[36,0.188,1381,3.311]],["body/classes/FindProductQuery.html",[3,0.102,4,0.102,5,0.082,7,0.392,8,1.428,9,3.005,14,0.899,16,0.439,17,0.007,18,1.68,21,0.596,35,0.102,36,0.254,37,0.006,38,0.006,106,1.135,107,0.955,245,1.56,247,2.583,593,1.369,952,5.546,1369,6.815,1381,5.52,1384,7.758,1385,5.546,1386,6.243,1387,6.243,1388,6.243]],["title/classes/GetCommentsDto.html",[36,0.188,625,3.513]],["body/classes/GetCommentsDto.html",[3,0.089,4,0.089,5,0.071,7,0.343,8,1.311,14,1.271,16,0.49,17,0.007,19,1.659,21,0.607,24,2.193,31,0.219,35,0.089,36,0.319,37,0.005,38,0.005,593,1.196,596,2.89,625,5.378,643,5.093,644,4.068,646,3.569,670,4.624,672,3.707,691,2.033,707,3.387,748,3.928,1389,6.286,1390,4.845,1391,4.845,1392,5.454,1393,5.378,1394,6.286,1395,4.845,1396,4.845]],["title/classes/GetCommentsHandler.html",[36,0.188,659,3.513]],["body/classes/GetCommentsHandler.html",[3,0.072,4,0.072,5,0.058,7,0.278,12,1.127,14,0.885,16,0.35,17,0.007,21,0.475,31,0.238,33,1.579,35,0.072,36,0.18,37,0.005,38,0.005,43,1.399,46,0.988,55,2.057,68,1.085,106,1.118,107,0.94,193,2.017,245,1.536,246,1.313,259,1.579,429,1.613,435,3.74,442,2.231,568,2.747,593,0.97,603,2.543,605,2.747,618,5.01,627,2.927,636,2.64,637,3.007,638,3.007,639,3.168,643,4.581,644,4.062,646,3.851,654,2.375,659,4.672,670,2.375,676,5.468,678,3.93,713,3.412,715,4.581,716,3.93,718,5.461,725,3.93,824,3.605,842,2.747,1346,5.757,1348,3.605,1351,3.605,1354,3.362,1355,3.168,1356,3.93,1357,3.93,1359,5.01,1360,3.93,1361,3.93,1366,3.93,1367,3.605,1368,3.605,1397,6.277,1398,3.93,1399,4.424,1400,4.424,1401,4.424,1402,4.424,1403,4.424,1404,6.147,1405,4.424]],["title/classes/GetCommentsQuery.html",[36,0.188,676,3.311]],["body/classes/GetCommentsQuery.html",[3,0.092,4,0.092,5,0.074,7,0.356,8,1.343,9,3.475,14,0.815,16,0.455,17,0.007,21,0.618,24,2.147,31,0.158,35,0.092,36,0.23,37,0.005,38,0.005,106,1.029,107,0.866,245,1.811,247,2.753,593,1.241,643,5.466,670,5.016,672,3.848,676,5.191,1406,7.489,1407,5.029,1408,5.029,1409,5.661,1410,5.661,1411,5.661]],["title/classes/GetProductDto.html",[36,0.188,1412,3.513]],["body/classes/GetProductDto.html",[3,0.089,4,0.089,5,0.071,7,0.343,8,1.311,14,1.271,16,0.49,17,0.007,19,1.659,21,0.607,24,2.193,31,0.219,35,0.089,36,0.319,37,0.005,38,0.005,593,1.196,596,2.89,644,4.068,646,3.569,670,4.624,672,3.707,691,2.033,707,3.387,748,3.928,762,4.145,763,4.845,1297,5.339,1391,4.845,1393,5.378,1394,6.286,1395,4.845,1396,4.845,1412,5.378,1413,6.286]],["title/controllers/GoogleAuthenticationController.html",[39,1.486,1414,3.513]],["body/controllers/GoogleAuthenticationController.html",[3,0.08,4,0.08,5,0.065,7,0.31,14,0.71,15,2.044,16,0.281,17,0.007,19,1.041,21,0.381,31,0.232,35,0.08,36,0.2,37,0.005,38,0.005,39,1.585,41,1.617,43,1.506,46,1.101,48,0.71,55,1.435,68,1.209,106,0.896,107,0.754,166,4.74,190,2.415,191,4.292,192,5.68,193,2.134,202,4.294,207,1.837,219,3.553,221,3.127,222,4.111,225,2.646,226,2.167,232,3.35,244,3.746,245,1.232,246,1.463,247,1.522,254,5.03,256,4.017,257,3.196,259,1.759,267,5.394,864,2.347,1414,5.03,1415,4.499,1416,4.017,1417,5.03,1418,4.929,1419,6.071,1420,4.929,1421,6.619,1422,5.079,1423,4.929,1424,4.929,1425,4.929,1426,4.929]],["title/modules/GoogleAuthenticationModule.html",[72,1.27,88,3.311]],["body/modules/GoogleAuthenticationModule.html",[3,0.087,4,0.087,5,0.07,17,0.007,31,0.245,35,0.087,36,0.216,37,0.005,38,0.005,41,2.287,48,0.768,50,2.126,72,1.915,74,2.078,75,3.065,78,5.962,88,6.624,96,5.448,97,3.23,98,2.47,99,2.405,101,2.847,112,3.869,124,4.735,166,3.817,181,3.32,232,3.623,296,4.735,997,4.735,1414,5.904,1415,3.623,1417,5.298,1422,5.962,1427,4.735,1428,5.33,1429,4.735,1430,5.33]],["title/injectables/GoogleAuthenticationService.html",[313,0.923,1422,3.142]],["body/injectables/GoogleAuthenticationService.html",[3,0.047,4,0.047,5,0.038,7,0.18,8,0.827,14,1.023,15,2.572,16,0.422,17,0.007,18,1.603,21,0.573,31,0.198,35,0.047,36,0.116,37,0.003,38,0.003,43,1.016,46,1.498,48,0.413,49,3.631,50,1.144,55,2.458,68,1.741,106,1.291,107,1.172,166,5.49,192,3.393,193,2.464,207,2.499,229,3.692,231,4.424,245,1.116,246,1.628,247,1.693,254,4.702,257,1.86,259,2.645,266,2.548,267,5.042,268,3.382,269,2.337,270,2.548,271,2.548,272,2.337,313,0.892,314,1.002,321,2.337,327,3.193,347,2.895,353,2.18,357,2.054,360,2.322,361,2.187,369,2.18,615,1.54,957,3.198,1018,2.548,1132,3.638,1415,5.21,1417,2.18,1422,3.035,1431,2.337,1432,5.482,1433,4.465,1434,4.465,1435,4.465,1436,4.465,1437,3.966,1438,4.465,1439,2.868,1440,4.465,1441,2.868,1442,4.465,1443,2.868,1444,4.465,1445,2.868,1446,4.465,1447,2.868,1448,4.465,1449,2.548,1450,2.868,1451,2.868,1452,2.868,1453,4.465,1454,2.868,1455,4.465,1456,2.868,1457,2.868,1458,2.868,1459,2.868,1460,2.868,1461,2.868,1462,2.868,1463,2.868,1464,2.868,1465,2.868,1466,2.868,1467,2.868,1468,2.868,1469,2.868,1470,4.465,1471,2.868,1472,2.868,1473,2.868,1474,2.868,1475,2.868,1476,2.868]],["title/controllers/HealthController.html",[39,1.486,1477,3.513]],["body/controllers/HealthController.html",[3,0.08,4,0.08,5,0.065,7,0.31,17,0.007,19,1.041,21,0.381,31,0.185,35,0.08,36,0.2,37,0.005,38,0.005,39,1.585,41,1.617,43,1.506,46,1.101,48,0.71,68,1.209,190,2.415,245,1.232,246,2.372,380,3.061,1477,5.03,1478,4.379,1479,5.88,1480,7.097,1481,4.929,1482,4.929,1483,7.473,1484,6.619,1485,7.473,1486,7.473,1487,7.473,1488,4.017,1489,4.929,1490,4.929,1491,4.929,1492,6.619,1493,3.746,1494,6.619,1495,6.619,1496,5.88,1497,4.929,1498,4.929,1499,6.619,1500,7.988,1501,6.619,1502,4.929,1503,4.929,1504,4.929,1505,4.929,1506,4.379,1507,4.929,1508,4.929,1509,4.379,1510,4.929,1511,4.929,1512,4.929,1513,4.929]],["title/modules/HealthModule.html",[72,1.27,89,3.311]],["body/modules/HealthModule.html",[3,0.107,4,0.107,5,0.086,17,0.007,31,0.238,35,0.107,36,0.266,37,0.006,38,0.006,41,2.603,48,0.942,72,2.179,74,2.551,89,5.681,101,2.672,1477,6.488,1488,5.331,1514,6.542,1515,7.932,1516,6.542]],["title/injectables/HttpCacheInterceptor.html",[313,0.923,1517,3.513]],["body/injectables/HttpCacheInterceptor.html",[3,0.092,4,0.092,5,0.074,7,0.354,14,0.813,16,0.321,17,0.007,18,1.392,21,0.436,31,0.157,35,0.092,36,0.229,37,0.005,38,0.005,43,1.646,46,1.26,48,0.813,55,2.106,68,1.774,106,1.026,107,0.863,202,2.764,313,1.445,314,1.971,495,6.505,596,2.954,732,4.04,1230,6.861,1273,4.69,1517,5.497,1518,6.425,1519,5.012,1520,7.232,1521,7.232,1522,5.641,1523,7.232,1524,7.092,1525,5.641,1526,5.641,1527,5.012,1528,5.641,1529,5.641]],["title/classes/ImagesUploadDto.html",[36,0.188,1530,3.513]],["body/classes/ImagesUploadDto.html",[3,0.096,4,0.096,5,0.097,7,0.37,8,1.377,16,0.502,17,0.007,18,1.132,19,1.243,21,0.455,31,0.207,35,0.096,36,0.239,37,0.006,38,0.006,226,2.588,593,1.29,853,5.056,864,3.538,1261,4.795,1262,5.646,1264,4.795,1265,4.795,1267,5.049,1271,5.646,1272,6.634,1273,3.816,1299,3.816,1530,5.646,1531,6.6,1532,5.228,1533,7.429,1534,5.884]],["title/injectables/JwtAuthenticationGuard.html",[235,2.566,313,0.923]],["body/injectables/JwtAuthenticationGuard.html",[3,0.111,4,0.111,5,0.089,17,0.007,31,0.226,35,0.111,36,0.276,37,0.006,38,0.006,48,0.977,235,4.501,295,3.901,313,1.62,314,2.37,596,2.772,1535,5.157,1536,5.53,1537,5.157,1538,5.53]],["title/injectables/JwtRefreshGuard.html",[238,3.513,313,0.923]],["body/injectables/JwtRefreshGuard.html",[3,0.11,4,0.11,5,0.088,17,0.007,31,0.225,35,0.11,36,0.273,37,0.006,38,0.006,48,0.969,196,4.574,238,6.132,268,3.395,295,3.869,313,1.612,314,2.351,596,2.749,1535,5.115,1537,5.115,1538,5.484,1539,5.979]],["title/injectables/JwtRefreshTokenStrategy.html",[284,3.311,313,0.923]],["body/injectables/JwtRefreshTokenStrategy.html",[3,0.073,4,0.073,5,0.059,7,0.282,14,0.894,16,0.353,17,0.007,21,0.479,31,0.238,35,0.073,36,0.182,37,0.005,38,0.005,43,1.412,46,1.002,48,0.646,49,4.086,50,1.789,55,1.306,68,1.522,106,1.128,107,0.949,122,4.024,175,2.135,193,2.032,196,5.22,202,4.188,207,1.671,229,3.994,230,2.908,236,3.854,245,1.551,246,1.842,247,1.917,268,3.13,269,5.057,284,4.444,295,2.578,313,1.24,314,1.566,349,4.98,350,3.211,374,5.096,596,1.832,864,2.135,1116,3.211,1535,5.408,1540,3.984,1541,5.799,1542,4.484,1543,6.205,1544,4.484,1545,4.716,1546,3.654,1547,4.716,1548,3.211,1549,3.408,1550,3.654,1551,3.654,1552,4.484,1553,3.654,1554,4.484,1555,4.484,1556,4.484,1557,4.484,1558,4.484]],["title/injectables/JwtStrategy.html",[285,3.311,313,0.923]],["body/injectables/JwtStrategy.html",[3,0.079,4,0.079,5,0.063,7,0.303,14,0.94,16,0.372,17,0.007,21,0.504,31,0.243,35,0.079,36,0.196,37,0.005,38,0.005,43,1.486,46,1.078,48,0.695,49,4.178,50,1.926,68,1.601,106,1.187,107,0.998,122,4.232,193,2.111,202,3.622,207,1.799,229,4.119,230,3.13,236,2.998,245,1.631,246,1.938,247,2.016,268,2.435,285,4.674,295,2.775,309,3.934,313,1.304,314,1.686,349,5.136,350,3.457,374,3.457,596,1.972,864,2.299,1116,3.457,1541,6.026,1545,3.669,1546,3.934,1547,3.669,1548,3.457,1549,3.669,1550,3.934,1551,3.934,1553,3.934,1559,4.289,1560,4.827,1561,5.798,1562,4.827,1563,4.289,1564,4.289,1565,4.289]],["title/injectables/JwtTwoFactorGuard.html",[313,0.923,1566,3.311]],["body/injectables/JwtTwoFactorGuard.html",[3,0.109,4,0.109,5,0.087,17,0.007,31,0.224,35,0.109,36,0.271,37,0.006,38,0.006,48,0.962,295,3.838,300,5.206,301,4.781,304,4.146,313,1.604,314,2.332,596,2.727,1537,5.073,1538,5.44,1566,5.75,1567,4.537,1568,5.93]],["title/injectables/JwtTwoFactorStrategy.html",[286,3.311,313,0.923]],["body/injectables/JwtTwoFactorStrategy.html",[3,0.073,4,0.073,5,0.059,7,0.281,14,0.892,15,2.195,16,0.353,17,0.007,21,0.479,31,0.238,35,0.073,36,0.182,37,0.005,38,0.005,43,1.41,46,0.999,48,0.644,49,4.082,50,1.784,55,1.302,68,1.743,106,1.126,107,0.947,122,4.016,193,2.029,202,3.481,207,1.667,229,3.989,230,2.9,236,3.847,245,1.548,246,1.839,247,1.913,259,1.596,268,2.256,273,3.973,286,4.436,295,2.571,300,4.974,301,5.089,304,2.777,309,3.644,313,1.237,314,1.562,349,4.974,350,3.203,374,3.203,596,1.827,864,2.13,1116,3.203,1541,5.791,1545,4.707,1546,3.644,1547,4.707,1548,3.203,1549,3.399,1550,3.644,1551,3.644,1553,3.644,1561,5.503,1564,3.973,1565,3.973,1567,4.83,1569,3.973,1570,4.472,1571,4.472,1572,4.472]],["title/injectables/LocalAuthenticationGuard.html",[240,3.513,313,0.923]],["body/injectables/LocalAuthenticationGuard.html",[3,0.111,4,0.111,5,0.089,17,0.007,31,0.226,35,0.111,36,0.276,37,0.006,38,0.006,48,0.977,240,6.163,295,3.901,313,1.62,314,2.37,596,2.772,1536,5.53,1537,5.157,1573,6.028,1574,6.786]],["title/entities/LocalFile.html",[0,1.844,1575,3.142]],["body/entities/LocalFile.html",[0,2.799,2,2.799,3,0.088,4,0.088,5,0.071,7,0.338,8,1.3,9,3.043,12,1.988,16,0.471,17,0.007,18,1.692,19,1.747,20,4.972,21,0.639,24,1.787,25,4.332,31,0.15,33,1.921,35,0.088,36,0.219,37,0.005,38,0.005,380,4.848,841,3.855,843,5.305,848,4.386,849,4.386,1575,4.768,1576,5.327,1577,6.99,1578,6.36,1579,5.382,1580,4.782]],["title/interfaces/LocalFileDto.html",[446,2.142,1581,3.513]],["body/interfaces/LocalFileDto.html",[3,0.103,4,0.103,5,0.082,7,0.395,8,1.435,16,0.478,17,0.007,18,1.817,35,0.103,37,0.006,38,0.006,380,5.439,446,2.915,448,3.754,843,5.952,1576,3.907,1578,7.136,1581,5.886,1582,5.589,1583,5.589]],["title/controllers/LocalFilesController.html",[39,1.486,1584,3.513]],["body/controllers/LocalFilesController.html",[3,0.079,4,0.079,5,0.086,7,0.304,12,1.665,14,0.697,16,0.372,17,0.007,19,1.023,21,0.374,24,1.886,31,0.231,35,0.079,36,0.197,37,0.005,38,0.005,39,1.557,41,1.589,43,1.488,46,1.082,48,0.697,52,2.442,55,1.904,68,1.187,106,0.88,107,0.74,154,3.903,175,2.306,190,2.372,193,2.115,207,1.805,241,3.903,247,1.495,259,1.728,361,1.932,380,3.007,404,2.89,405,4.97,481,4.684,606,3.76,851,3.946,853,4.062,854,6.579,855,4.301,856,5.658,858,4.684,859,3.946,861,3.468,863,3.468,864,2.306,866,3.68,867,3.946,870,3.946,871,3.946,872,3.946,873,4.301,875,4.301,1326,4.301,1576,4.062,1584,4.97,1585,4.842,1586,4.842,1587,4.301,1588,5.033,1589,4.842,1590,4.842,1591,4.842,1592,4.301,1593,4.301]],["title/interfaces/LocalFilesInterceptorOptions.html",[446,2.142,1594,3.513]],["body/interfaces/LocalFilesInterceptorOptions.html",[3,0.075,4,0.075,5,0.06,7,0.289,8,1.17,14,1.211,16,0.442,17,0.007,18,1.617,31,0.227,35,0.075,36,0.187,37,0.005,38,0.005,48,0.662,49,3.093,50,1.834,55,2.099,68,1.548,106,0.836,154,2.744,313,1.261,361,1.834,380,4.821,446,2.13,448,2.744,713,2.552,807,3.292,864,2.189,1116,3.292,1204,3.746,1235,6.405,1506,4.084,1576,2.855,1594,5.48,1595,3.746,1596,6.895,1597,7.227,1598,7.227,1599,4.597,1600,6.405,1601,4.798,1602,7.761,1603,4.597,1604,4.597,1605,6.313,1606,4.597,1607,4.597,1608,4.597,1609,3.494,1610,4.084,1611,4.597,1612,4.597,1613,6.313,1614,4.597,1615,4.597,1616,4.597,1617,4.597,1618,4.597,1619,4.597,1620,4.597,1621,4.597]],["title/modules/LocalFilesModule.html",[72,1.27,90,3.142]],["body/modules/LocalFilesModule.html",[3,0.088,4,0.088,5,0.071,17,0.007,31,0.246,35,0.088,36,0.22,37,0.005,38,0.005,41,2.312,48,0.78,50,2.162,72,1.936,74,2.112,75,3.098,90,6.098,97,3.265,98,2.51,99,2.445,101,2.213,112,3.911,154,3.233,181,3.355,241,4.205,291,4.205,428,3.007,429,1.976,861,3.88,879,4.813,881,3.365,882,4.813,1575,3.682,1576,3.365,1584,5.951,1588,6.389,1622,4.813,1623,4.813,1624,4.813,1625,4.813,1626,5.418]],["title/injectables/LocalFilesService.html",[313,0.923,1588,3.142]],["body/injectables/LocalFilesService.html",[3,0.067,4,0.067,5,0.097,7,0.26,12,1.053,14,1.067,16,0.422,17,0.007,21,0.573,24,2.069,31,0.218,33,1.475,35,0.067,36,0.168,37,0.004,38,0.004,43,1.334,46,1.522,48,0.595,55,1.707,68,1.438,106,1.348,107,1.133,154,4.669,193,2.48,207,2.185,245,1.465,246,1.227,259,2.644,313,1.171,314,1.444,360,2.15,361,1.649,429,1.507,435,3.63,442,2.085,597,3.641,881,2.567,884,3.368,886,5.207,892,6.81,894,5.603,895,5.207,902,4.777,1575,2.81,1576,4.86,1581,5.632,1588,3.984,1625,3.672,1627,6.81,1628,5.861,1629,4.134,1630,4.134,1631,5.861,1632,4.134,1633,4.134,1634,4.134,1635,5.861,1636,4.134,1637,4.134,1638,4.134,1639,4.134,1640,4.134,1641,4.134,1642,4.134,1643,4.134,1644,4.134]],["title/injectables/LocalStrategy.html",[287,3.311,313,0.923]],["body/injectables/LocalStrategy.html",[3,0.085,4,0.085,5,0.068,7,0.327,14,0.989,15,1.61,16,0.391,17,0.007,18,1.677,21,0.531,31,0.237,35,0.085,36,0.212,37,0.005,38,0.005,43,1.563,46,1.164,48,0.751,52,2.629,68,1.278,106,1.249,107,1.05,122,4.454,193,2.194,231,5.202,232,3.542,241,3.11,245,1.302,287,4.919,295,2.996,313,1.372,314,1.82,327,3.271,356,5.073,443,3.96,596,2.129,627,3.271,1545,3.96,1547,3.96,1548,3.732,1549,3.96,1563,4.63,1645,4.63,1646,5.211,1647,5.211,1648,6.868,1649,5.211,1650,5.211,1651,5.211]],["title/entities/Log.html",[0,1.844,803,2.871]],["body/entities/Log.html",[0,2.723,2,2.684,3,0.084,4,0.084,5,0.068,7,0.324,8,1.265,9,3.638,12,1.947,16,0.482,17,0.007,18,1.673,19,1.788,20,4.922,21,0.654,24,1.738,25,4.245,31,0.144,33,1.842,35,0.084,36,0.21,37,0.005,38,0.005,583,5.188,732,5.477,733,5.812,734,5.477,803,4.239,1652,4.586,1653,7.647,1654,5.162,1655,7.647,1656,5.162,1657,5.162,1658,5.162,1659,5.162]],["title/classes/LogInDto.html",[36,0.188,205,3.513]],["body/classes/LogInDto.html",[3,0.094,4,0.094,5,0.076,7,0.363,8,1.361,16,0.418,17,0.007,18,1.635,19,1.552,21,0.568,31,0.205,35,0.094,36,0.298,37,0.006,38,0.006,205,5.583,226,2.542,327,3.845,332,4.384,356,5.447,593,1.268,689,3.498,690,3.498,691,2.155,786,5.583,794,4.711,796,4.711,1267,5.488,1660,5.136,1661,5.781,1662,7.345,1663,5.781,1664,5.781,1665,5.781]],["title/modules/LoggerModule.html",[72,1.27,91,3.311]],["body/modules/LoggerModule.html",[3,0.088,4,0.088,5,0.071,17,0.007,31,0.246,35,0.088,36,0.22,37,0.005,38,0.005,48,0.78,50,2.162,72,1.936,74,2.112,75,3.098,91,6.585,97,3.265,98,2.51,99,2.445,101,2.213,112,3.911,181,3.355,291,4.205,428,3.007,429,1.976,798,6.732,802,5.989,803,3.365,826,4.813,910,3.88,1666,4.813,1667,4.813,1668,4.813,1669,5.418,1670,4.415,1671,4.813,1672,5.418]],["title/injectables/LogsMiddleware.html",[156,3.513,313,0.923]],["body/injectables/LogsMiddleware.html",[3,0.078,4,0.078,5,0.062,7,0.299,8,1.198,14,0.685,16,0.271,17,0.007,21,0.499,31,0.18,35,0.078,36,0.193,37,0.005,38,0.005,43,1.471,46,1.063,48,0.685,55,2.137,68,1.8,106,0.865,107,0.727,109,3.234,156,4.911,202,4.16,246,2.179,247,2.267,313,1.291,314,1.662,332,2.839,333,3.085,361,2.578,713,2.641,734,3.407,856,5.731,864,2.266,910,5.639,941,4.226,943,4.226,1231,6.995,1493,4.911,1673,4.226,1674,6.462,1675,7.873,1676,4.757,1677,6.462,1678,4.757,1679,6.462,1680,4.757,1681,6.462,1682,6.462,1683,7.873,1684,6.462,1685,4.757,1686,4.757,1687,4.757]],["title/injectables/LogsService.html",[313,0.923,802,3.142]],["body/injectables/LogsService.html",[3,0.084,4,0.084,5,0.068,7,0.325,14,0.985,16,0.389,17,0.007,21,0.528,31,0.236,33,1.848,35,0.084,36,0.21,37,0.005,38,0.005,43,1.557,46,1.157,48,0.746,55,1.508,68,1.27,106,1.244,107,1.046,175,2.466,193,2.187,207,1.93,245,1.709,246,1.537,259,2.441,313,1.366,314,1.809,429,1.888,435,3.991,442,2.612,508,2.874,729,6.192,802,4.649,803,4.248,842,3.216,1671,4.6,1688,4.6,1689,6.84,1690,5.178,1691,5.178,1692,6.84,1693,6.84,1694,5.178,1695,5.178,1696,5.178,1697,6.84,1698,5.178,1699,5.178,1700,5.178]],["title/classes/ObjectWithIdDto.html",[36,0.188,704,3.513]],["body/classes/ObjectWithIdDto.html",[3,0.106,4,0.106,5,0.085,7,0.408,8,1.463,12,2.166,16,0.37,17,0.007,19,1.371,21,0.501,24,2.01,31,0.181,35,0.106,36,0.321,37,0.006,38,0.006,593,1.423,691,2.419,704,5.999,1198,5.284,1701,7.013,1702,5.289,1703,6.49]],["title/controllers/OptimizeController.html",[39,1.486,1704,3.513]],["body/controllers/OptimizeController.html",[3,0.06,4,0.06,5,0.049,7,0.233,12,2.059,14,0.78,16,0.446,17,0.007,18,1.442,19,1.144,21,0.418,31,0.231,35,0.06,36,0.15,37,0.004,38,0.004,39,1.191,41,1.215,43,1.233,46,1.21,48,0.534,55,2.182,68,1.57,106,0.985,107,0.979,119,2.815,175,2.579,190,1.814,193,2.235,207,2.019,221,1.55,224,4.414,225,1.989,226,1.629,246,1.1,247,1.144,259,2.285,404,2.211,494,2.815,842,2.301,853,3.977,856,5.076,858,2.653,862,3.291,863,3.879,864,2.579,866,2.815,1103,6.108,1262,4.866,1269,3.681,1299,4.568,1301,4.414,1530,4.116,1601,2.815,1704,4.116,1705,3.291,1706,3.291,1707,5.416,1708,5.416,1709,3.704,1710,3.704,1711,4.812,1712,4.812,1713,3.704,1714,3.704,1715,3.704,1716,3.291,1717,7.044,1718,3.704,1719,3.704,1720,3.704,1721,3.704,1722,3.704,1723,3.704,1724,3.291,1725,4.812,1726,4.812,1727,4.812,1728,3.291,1729,3.704,1730,3.291,1731,3.704,1732,3.704,1733,3.704,1734,3.704,1735,3.704,1736,3.291,1737,3.291,1738,3.704,1739,3.704,1740,3.704,1741,3.704,1742,3.704,1743,3.704,1744,3.704,1745,3.704,1746,3.704,1747,5.416,1748,3.704,1749,3.704,1750,3.291,1751,3.704,1752,3.704,1753,3.704]],["title/modules/OptimizeModule.html",[72,1.27,92,3.311]],["body/modules/OptimizeModule.html",[3,0.099,4,0.099,5,0.079,17,0.007,31,0.241,35,0.099,36,0.246,37,0.006,38,0.006,41,2.483,48,0.873,72,2.079,74,2.362,92,5.419,101,2.475,107,1.157,118,5.382,119,4.604,380,4.699,874,4.937,1587,5.382,1704,6.27,1706,5.382,1754,6.058,1755,6.058,1756,6.058,1757,6.058,1758,6.058,1759,6.058]],["title/classes/PaginatedResultDto.html",[36,0.188,636,2.759]],["body/classes/PaginatedResultDto.html",[3,0.09,4,0.09,5,0.073,7,0.348,8,1.326,16,0.476,17,0.007,19,1.767,21,0.646,24,2.258,31,0.155,35,0.09,36,0.291,37,0.005,38,0.005,593,1.216,636,4.269,644,4.552,646,3.994,691,2.067,708,7.034,842,4.918,1198,5.603,1368,6.453,1760,7.693,1761,4.927,1762,7.153,1763,5.546,1764,5.546,1765,5.546,1766,5.546]],["title/classes/PaginationDto.html",[36,0.188,670,2.482]],["body/classes/PaginationDto.html",[3,0.094,4,0.094,5,0.075,7,0.361,8,1.355,14,1.221,16,0.498,17,0.007,19,1.545,21,0.565,24,2.278,31,0.204,35,0.094,36,0.327,37,0.005,38,0.005,593,1.259,644,4.627,646,4.06,670,3.926,691,2.14,707,3.565,748,4.467,1198,4.998,1393,5.558,1767,5.1,1768,5.74,1769,5.74,1770,5.1,1771,6.497]],["title/classes/PaginationWithStartIdDto.html",[36,0.188,1772,3.513]],["body/classes/PaginationWithStartIdDto.html",[3,0.085,4,0.085,5,0.068,7,0.328,8,1.276,14,1.257,16,0.506,17,0.007,19,1.626,21,0.595,24,2.326,31,0.192,35,0.085,36,0.313,37,0.005,38,0.005,593,1.146,646,3.882,691,1.949,707,3.247,748,4.539,1198,5.079,1393,5.231,1702,4.26,1770,4.644,1771,6.115,1772,5.231,1773,7.265,1774,6.215,1775,5.848,1776,5.848,1777,5.228,1778,5.228,1779,5.228,1780,5.228,1781,5.228]],["title/entities/Post.html",[0,1.844,221,1.934]],["body/entities/Post.html",[0,2.19,2,1.962,3,0.061,4,0.061,5,0.049,7,0.345,8,1.017,9,3.671,12,1.648,14,1.023,15,2.332,16,0.474,17,0.007,18,1.603,19,1.76,20,4.373,21,0.644,24,1.398,25,3.591,31,0.198,33,1.346,35,0.061,36,0.153,37,0.004,38,0.004,175,3.752,221,2.296,462,5.748,474,5.596,588,3.351,592,4.876,603,4.675,605,4.689,606,3.72,608,4.876,614,4.171,615,2.025,618,5.273,741,4.917,742,4.634,1271,4.171,1782,3.351,1783,3.772,1784,3.772,1785,3.772,1786,3.772,1787,3.351,1788,3.772,1789,3.351,1790,5.489,1791,3.772,1792,3.772,1793,3.772,1794,5.489,1795,5.273,1796,3.772,1797,3.772,1798,3.772,1799,3.772,1800,5.489,1801,4.876,1802,3.772,1803,3.772]],["title/classes/PostNotFoundException.html",[36,0.188,1804,3.513]],["body/classes/PostNotFoundException.html",[3,0.103,4,0.103,5,0.083,12,1.608,14,0.91,16,0.36,17,0.007,21,0.488,24,2.14,31,0.176,35,0.103,36,0.256,37,0.006,38,0.006,48,0.91,106,1.148,107,0.966,245,1.578,593,1.385,595,4.292,596,3.171,597,5.221,599,4.523,602,4.292,643,5.034,1408,6.897,1804,5.9,1805,6.897,1806,6.315]],["title/interfaces/PostSearchDocument.html",[446,2.142,1807,3.513]],["body/interfaces/PostSearchDocument.html",[3,0.099,4,0.099,5,0.08,7,0.382,8,1.405,12,2.203,16,0.493,17,0.007,18,1.747,24,2.312,35,0.099,37,0.006,38,0.006,446,2.818,448,3.629,741,6.576,742,6.197,1807,5.764,1808,5.402,1809,4.622,1810,5.402,1811,7.687]],["title/controllers/PostsController.html",[39,1.486,1812,3.513]],["body/controllers/PostsController.html",[3,0.049,4,0.049,5,0.04,7,0.191,12,1.446,14,1.046,16,0.413,17,0.007,18,1.397,19,1.534,21,0.561,31,0.228,35,0.049,36,0.123,37,0.003,38,0.003,39,0.975,41,0.995,43,1.061,46,1.622,48,0.437,52,1.53,68,1.855,106,1.321,107,1.11,176,3.543,190,1.486,193,2.286,199,3.664,202,2.782,207,2.116,219,3.048,221,3.266,222,2.895,223,1.744,225,1.628,226,1.333,242,1.966,247,0.937,250,2.061,300,1.966,301,2.172,332,1.81,404,2.782,406,2.305,409,1.81,480,5.556,481,3.338,493,2.172,494,2.305,495,2.471,503,2.471,504,2.172,505,2.471,508,1.683,512,2.694,522,2.471,526,2.471,569,1.966,628,3.338,629,2.172,646,2.351,710,2.694,738,4.564,1273,1.966,1517,2.305,1524,2.694,1566,2.172,1610,4.141,1670,2.471,1772,4.844,1774,2.305,1775,3.543,1776,3.543,1809,4.316,1812,3.543,1813,2.694,1814,5.045,1815,4.141,1816,4.141,1817,5.678,1818,4.141,1819,5.045,1820,2.694,1821,3.032,1822,3.032,1823,3.032,1824,3.032,1825,3.032,1826,3.032,1827,3.032,1828,3.032,1829,3.032,1830,3.032,1831,2.694,1832,4.661,1833,3.032,1834,4.141,1835,3.032,1836,4.564,1837,3.032,1838,3.032,1839,3.032,1840,3.032,1841,3.032,1842,4.141,1843,3.859,1844,2.694,1845,3.032,1846,3.032,1847,3.032,1848,3.032,1849,3.032,1850,3.032,1851,3.032,1852,3.032,1853,3.032,1854,3.032,1855,3.032,1856,3.032,1857,3.032,1858,3.032,1859,3.032,1860,5.678,1861,3.032,1862,3.032,1863,3.032,1864,3.032]],["title/modules/PostsModule.html",[72,1.27,93,3.311]],["body/modules/PostsModule.html",[3,0.084,4,0.084,5,0.067,17,0.007,31,0.251,35,0.084,36,0.209,37,0.005,38,0.005,41,2.235,48,0.741,72,1.872,74,2.006,75,2.995,93,6.583,95,5.904,97,3.156,98,2.384,99,2.322,101,2.782,144,4.571,181,3.244,221,2.153,428,2.856,429,1.876,537,4.571,569,3.337,1812,5.803,1843,5.904,1844,4.571,1865,4.571,1866,5.146,1867,4.571,1868,5.904,1869,5.146,1870,4.193,1871,5.146,1872,4.193,1873,4.571,1874,5.146,1875,5.146,1876,5.146]],["title/injectables/PostsSearchService.html",[313,0.923,1868,3.142]],["body/injectables/PostsSearchService.html",[3,0.043,4,0.068,5,0.035,7,0.483,8,0.779,12,1.645,14,0.99,16,0.41,17,0.007,18,1.515,21,0.556,24,2.045,31,0.18,35,0.043,36,0.108,37,0.004,38,0.003,43,0.956,46,1.443,48,0.382,52,1.339,55,2.001,67,3.009,68,1.585,106,1.25,107,1.051,193,2.424,207,1.944,219,1.425,221,3.216,245,0.663,247,0.82,259,1.861,313,0.839,314,0.927,332,2.507,333,3.381,467,3.009,469,3.009,569,2.724,627,2.001,628,5.155,643,2.724,646,2.991,741,4.507,742,4.247,1028,3.193,1214,3.963,1254,1.804,1750,3.733,1775,4.507,1776,5.223,1807,3.193,1809,3.963,1811,3.733,1868,2.856,1872,2.163,1877,6.632,1878,2.358,1879,6.395,1880,4.201,1881,2.654,1882,6.872,1883,4.201,1884,4.201,1885,6.461,1886,2.654,1887,4.201,1888,2.654,1889,4.201,1890,2.654,1891,4.201,1892,2.654,1893,4.201,1894,2.654,1895,2.163,1896,2.654,1897,2.654,1898,2.654,1899,2.654,1900,2.654,1901,6.461,1902,2.654,1903,5.215,1904,4.201,1905,4.201,1906,4.201,1907,2.654,1908,4.201,1909,5.215,1910,2.654,1911,2.654,1912,2.654,1913,2.654,1914,2.654,1915,2.654,1916,2.654,1917,2.654,1918,2.654,1919,2.654,1920,2.654,1921,2.654,1922,3.424,1923,2.654,1924,5.215,1925,2.654,1926,2.654,1927,2.654]],["title/injectables/PostsService.html",[313,0.923,1843,3.142]],["body/injectables/PostsService.html",[3,0.042,4,0.042,5,0.034,7,0.161,12,1.725,14,1.023,15,2.278,16,0.404,17,0.007,18,1.303,21,0.57,24,2.207,31,0.212,33,0.916,35,0.042,36,0.104,37,0.004,38,0.003,43,0.931,46,1.587,48,0.37,55,2.213,67,3.653,68,1.743,106,1.292,107,1.086,193,2.525,207,2.524,221,3.329,245,1.022,246,1.215,259,2.839,313,0.817,314,0.897,360,3.026,361,2.322,409,1.532,429,0.936,435,2.851,442,1.295,508,1.425,563,1.839,568,3.168,569,3.773,575,1.951,577,1.951,597,1.594,602,1.745,605,3.614,615,1.378,645,1.745,646,2.935,738,4.168,1028,3.877,1272,4.157,1775,4.423,1776,4.423,1804,1.951,1814,3.635,1815,3.635,1816,3.635,1818,3.635,1819,3.635,1820,3.635,1831,3.635,1834,4.532,1836,4.168,1842,3.635,1843,2.781,1868,4.829,1872,2.092,1873,2.281,1879,4.532,1928,2.281,1929,5.819,1930,5.101,1931,2.567,1932,2.567,1933,4.091,1934,2.567,1935,4.091,1936,2.567,1937,4.091,1938,2.567,1939,2.567,1940,2.567,1941,2.567,1942,2.567,1943,4.091,1944,2.567,1945,2.567,1946,2.567,1947,4.091,1948,4.091,1949,5.101,1950,2.567,1951,2.567,1952,2.567,1953,2.567,1954,2.567,1955,2.567,1956,4.091,1957,2.567,1958,2.567,1959,2.567,1960,5.101,1961,2.567,1962,2.567,1963,2.567,1964,2.567,1965,2.567,1966,2.567,1967,2.567,1968,2.567,1969,2.567]],["title/entities/PrivateFile.html",[0,1.844,1280,2.998]],["body/entities/PrivateFile.html",[0,2.787,2,2.781,3,0.087,4,0.087,5,0.07,7,0.336,8,1.295,9,3.576,12,1.981,15,2.644,16,0.443,17,0.007,18,1.344,19,1.644,20,4.319,21,0.601,24,1.779,25,4.319,31,0.195,33,1.908,35,0.087,36,0.217,37,0.005,38,0.005,607,4.357,614,5.309,615,2.871,753,4.451,841,3.829,1254,5.288,1280,4.53,1970,7.329,1971,5.347,1972,5.347,1973,6.985,1974,5.347]],["title/entities/Product.html",[0,1.844,754,2.201]],["body/entities/Product.html",[0,2.578,2,2.474,3,0.078,4,0.078,5,0.062,7,0.299,8,1.526,9,3.592,12,1.869,14,0.931,15,2.543,16,0.469,17,0.007,18,1.515,19,1.663,20,4.37,21,0.608,25,2.641,31,0.22,33,1.698,35,0.078,36,0.193,37,0.005,38,0.005,107,1.122,175,3.078,447,5.256,453,5.256,607,3.877,614,4.911,615,2.554,753,4.281,754,3.078,765,4.226,766,5.741,767,4.226,845,3.877,1795,5.266,1975,4.226,1976,6.462,1977,4.757,1978,4.757,1979,6.462,1980,4.757,1981,6.462,1982,4.757]],["title/classes/ProductNotFoundException.html",[36,0.188,958,3.311]],["body/classes/ProductNotFoundException.html",[3,0.103,4,0.103,5,0.083,12,1.608,14,0.91,16,0.36,17,0.007,18,1.617,21,0.488,31,0.176,35,0.103,36,0.256,37,0.006,38,0.006,48,0.91,106,1.148,107,0.966,245,1.578,593,1.385,595,4.292,596,3.171,597,5.221,599,4.523,602,4.292,894,5.56,958,5.56,1249,6.897,1983,6.897,1984,6.315]],["title/controllers/ProductsController.html",[39,1.486,1985,3.513]],["body/controllers/ProductsController.html",[3,0.051,4,0.051,5,0.041,7,0.197,12,1.874,14,1.006,15,2.273,16,0.398,17,0.007,18,1.556,19,1.475,21,0.54,31,0.237,35,0.051,36,0.127,37,0.004,38,0.004,39,1.009,41,1.029,43,1.089,46,1.56,48,0.452,52,1.582,55,1.688,68,1.713,106,1.27,107,1.068,190,1.537,193,2.102,199,4.742,202,3.961,219,3.113,220,2.384,221,2.002,222,4.029,223,1.804,225,1.684,226,1.379,235,1.741,237,2.034,242,2.034,247,0.969,248,2.034,250,3.941,404,1.872,406,2.384,409,1.872,420,2.787,463,3.941,464,4.153,466,3.426,467,3.426,469,4.153,481,3.426,493,2.247,496,2.556,497,2.384,498,2.787,499,2.034,500,2.556,508,1.741,522,3.898,526,2.556,553,2.556,555,2.556,559,2.556,627,3.505,628,3.426,629,2.247,630,2.247,634,2.787,636,1.872,637,2.132,638,2.132,642,2.787,644,2.75,645,2.132,646,2.413,647,2.384,754,1.494,756,4.773,760,4.153,775,1.948,866,2.384,1297,2.132,1363,2.556,1412,4.93,1985,3.636,1986,2.787,1987,2.787,1988,3.137,1989,3.137,1990,3.137,1991,3.137,1992,3.137,1993,3.137,1994,3.137,1995,5.364,1996,3.137,1997,3.941,1998,2.787,1999,3.137,2000,3.137,2001,3.137,2002,3.137,2003,3.137,2004,3.137,2005,3.137,2006,3.137,2007,3.137,2008,3.137,2009,3.137]],["title/modules/ProductsModule.html",[72,1.27,94,3.311]],["body/modules/ProductsModule.html",[3,0.083,4,0.083,5,0.066,17,0.007,31,0.258,35,0.083,36,0.206,37,0.005,38,0.005,41,2.212,48,0.73,72,1.852,74,1.975,75,2.964,94,6.193,97,3.124,98,2.347,99,2.286,101,2.069,181,3.21,428,2.812,429,1.847,653,5.989,654,2.72,656,4.501,754,2.413,768,5.124,775,3.147,953,5.124,1343,5.124,1379,5.124,1985,5.758,1997,5.878,1998,4.501,2010,4.501,2011,4.501,2012,5.066,2013,5.066,2014,8.077,2015,6.741,2016,5.066,2017,5.124,2018,5.066,2019,5.066,2020,5.066]],["title/injectables/ProductsService.html",[313,0.923,1997,3.142]],["body/injectables/ProductsService.html",[3,0.053,4,0.053,5,0.043,7,0.205,12,1.511,14,1.075,15,2.572,16,0.425,17,0.007,18,1.572,21,0.577,24,1.511,31,0.242,35,0.053,36,0.132,37,0.004,38,0.004,43,1.12,46,1.586,48,0.469,52,1.642,68,1.741,106,1.358,107,1.142,193,2.449,207,1.213,245,0.814,246,0.966,313,0.983,314,1.137,361,2.367,409,1.943,463,4.032,464,4.248,466,3.524,467,3.524,469,3.524,508,1.807,553,4.01,555,4.01,559,4.01,615,1.748,627,3.556,636,1.943,637,2.213,638,2.213,654,1.748,664,2.892,665,6.633,666,6.888,670,4.286,672,2.213,674,2.892,679,2.892,681,2.892,750,2.331,753,4.46,754,1.55,756,4.841,760,3.524,775,2.022,776,4.508,948,2.331,1297,3.344,1349,2.331,1353,2.892,1381,2.331,1382,2.892,1987,2.892,1995,5.426,1997,3.344,2021,2.892,2022,3.255,2023,3.255,2024,3.255,2025,3.255,2026,3.255,2027,3.255,2028,3.255,2029,3.255,2030,2.331,2031,3.255,2032,4.92,2033,4.92,2034,3.255,2035,3.255,2036,3.255,2037,3.255,2038,3.255,2039,3.255]],["title/entities/PublicFile.html",[0,1.844,1282,2.998]],["body/entities/PublicFile.html",[0,2.879,2,2.924,3,0.092,4,0.092,5,0.074,7,0.353,8,1.337,9,3.609,12,2.03,16,0.454,17,0.007,18,1.618,19,1.684,20,4.827,21,0.616,24,1.838,25,4.424,31,0.157,33,2.006,35,0.092,36,0.228,37,0.005,38,0.005,841,4.026,848,4.581,849,4.581,1025,6.057,1254,5.417,1282,4.679,1580,4.995,2040,7.47]],["title/classes/RegisterDto.html",[36,0.188,215,3.142]],["body/classes/RegisterDto.html",[3,0.082,4,0.082,5,0.066,7,0.315,8,1.242,14,0.965,16,0.458,17,0.007,18,1.722,19,1.7,21,0.622,31,0.187,35,0.082,36,0.272,37,0.005,38,0.005,107,1.153,215,4.554,226,2.207,327,3.592,356,4.684,593,1.101,645,4.554,687,2.786,689,3.832,690,3.832,691,1.871,748,3.719,785,6.146,786,5.732,789,4.459,792,6.7,794,4.09,795,4.459,796,4.09,797,4.459,1267,4.554,1299,3.255,1532,4.459,1922,5.46,2041,4.459,2042,5.019,2043,5.019,2044,5.019,2045,6.7,2046,6.7,2047,5.952,2048,5.019,2049,5.019,2050,5.019,2051,5.019]],["title/interfaces/RequestWithUser.html",[199,2.658,446,2.142]],["body/interfaces/RequestWithUser.html",[3,0.105,4,0.105,5,0.084,7,0.403,8,1.452,15,2.904,16,0.365,17,0.007,31,0.219,35,0.105,37,0.006,38,0.006,199,4.506,202,4.146,443,4.875,446,2.972,448,3.828,596,3.201,864,3.054,2052,5.698,2053,5.698]],["title/modules/SearchModule.html",[72,1.27,95,3.142]],["body/modules/SearchModule.html",[3,0.104,4,0.104,5,0.083,17,0.007,31,0.245,35,0.104,36,0.258,37,0.006,38,0.006,48,0.917,50,2.539,72,2.143,74,2.481,95,5.302,101,2.6,112,4.33,146,5.654,147,5.654,291,3.798,1895,5.186,2054,6.364,2055,7.8,2056,5.186,2057,6.364]],["title/interfaces/TokenPayload.html",[349,2.998,446,2.142]],["body/interfaces/TokenPayload.html",[3,0.106,4,0.106,5,0.085,7,0.408,8,1.463,14,1.137,16,0.449,17,0.007,24,2.166,35,0.106,37,0.006,38,0.006,330,7.863,334,6.016,349,5.119,446,3.007,448,3.873,1167,6.466,2058,5.766,2059,5.289]],["title/classes/TokenVerificationDto.html",[36,0.188,1419,3.513]],["body/classes/TokenVerificationDto.html",[3,0.104,4,0.104,5,0.084,7,0.401,8,1.449,16,0.364,17,0.007,18,1.504,19,1.35,21,0.494,31,0.178,35,0.104,36,0.318,37,0.006,38,0.006,268,4.262,593,1.401,687,3.546,689,3.723,690,3.723,691,2.381,1415,5.314,1419,5.942,2060,6.946,2061,5.676,2062,6.389]],["title/classes/TwoFactorAuthenticationCodeDto.html",[36,0.188,2063,3.513]],["body/classes/TwoFactorAuthenticationCodeDto.html",[3,0.103,4,0.103,5,0.082,7,0.395,8,1.435,16,0.358,17,0.007,18,1.49,19,1.329,21,0.486,31,0.175,35,0.103,36,0.315,37,0.006,38,0.006,191,5.022,304,4.81,593,1.379,687,3.492,689,3.688,690,3.688,691,2.345,1567,5.264,2063,5.886,2064,6.88,2065,5.589,2066,6.838,2067,6.291]],["title/controllers/TwoFactorAuthenticationController.html",[39,1.486,290,3.513]],["body/controllers/TwoFactorAuthenticationController.html",[3,0.048,4,0.048,5,0.038,7,0.184,14,0.901,16,0.385,17,0.007,19,1.322,21,0.484,31,0.221,35,0.048,36,0.119,37,0.003,38,0.003,39,0.942,41,0.961,43,1.033,46,1.398,48,0.422,55,1.971,68,1.113,106,1.138,107,0.957,175,1.395,190,1.435,191,4.058,192,4.223,193,2.39,197,3.699,198,2.603,199,4.876,202,3.967,207,1.692,219,3.36,220,2.226,221,1.226,222,4.205,223,1.684,225,1.573,226,1.288,229,2.89,230,1.9,231,3.316,232,3.085,235,1.626,236,1.82,237,1.9,242,1.9,244,2.226,245,0.732,246,1.65,247,1.716,248,4.058,250,4.602,254,3.45,256,2.387,257,1.9,259,1.983,262,4.936,288,3.777,290,3.45,300,1.9,303,5.146,304,4.64,360,2.89,361,2.217,856,4.844,858,2.098,864,1.395,957,2.098,1273,3.603,1416,2.387,1567,4.602,2063,6.154,2066,5.836,2068,4.032,2069,5.556,2070,5.556,2071,2.929,2072,2.929,2073,2.929,2074,2.929,2075,2.929,2076,2.929,2077,6.258,2078,2.929,2079,2.929,2080,2.929,2081,2.929,2082,2.929,2083,2.929,2084,2.929,2085,2.929,2086,2.929,2087,2.929,2088,4.032,2089,2.929,2090,2.929,2091,2.929,2092,2.929,2093,7.162,2094,5.556,2095,5.556,2096,5.556,2097,2.929,2098,2.929,2099,2.929,2100,2.929,2101,2.603]],["title/injectables/TwoFactorAuthenticationService.html",[288,3.142,313,0.923]],["body/injectables/TwoFactorAuthenticationService.html",[3,0.063,4,0.063,5,0.05,7,0.241,9,3.326,14,1.031,15,2.71,16,0.408,17,0.007,18,1.525,21,0.553,31,0.228,35,0.063,36,0.156,37,0.004,38,0.004,43,1.264,46,1.459,48,0.552,49,4.003,50,1.53,55,1.617,68,1.602,106,1.302,107,1.095,193,2.263,207,2.07,229,4.121,230,2.486,245,1.388,246,1.649,247,1.715,259,1.368,268,1.934,272,3.124,288,3.775,303,5.775,304,4.72,308,5.441,313,1.109,314,1.339,321,3.124,443,2.914,856,4.643,863,2.746,864,1.826,1431,3.124,1437,3.406,1567,5.165,2066,5.322,2088,7.039,2102,5.554,2103,6.53,2104,5.554,2105,5.554,2106,3.834,2107,3.834,2108,3.834,2109,5.554,2110,3.834,2111,3.834,2112,3.406,2113,3.834,2114,3.406,2115,3.834,2116,3.834,2117,3.834,2118,3.834,2119,3.834,2120,3.834,2121,3.834,2122,3.834]],["title/classes/TypeOrmConfig.html",[36,0.188,133,3.513]],["body/classes/TypeOrmConfig.html",[2,2.391,3,0.075,4,0.075,5,0.06,7,0.289,14,0.662,16,0.359,17,0.007,21,0.355,31,0.201,35,0.103,36,0.187,37,0.005,38,0.005,43,1.437,46,1.027,49,4.295,50,1.834,55,2.099,56,3.292,68,1.548,101,1.878,106,0.836,107,0.703,112,3.504,133,4.798,175,3.434,193,1.313,306,3.746,307,3.746,332,2.744,335,5.033,356,2.855,361,1.834,429,1.676,593,1.008,627,2.189,807,5.164,852,2.855,907,4.798,910,4.521,946,6.182,1127,3.494,2123,3.746,2124,7.21,2125,6.313,2126,6.313,2127,4.597,2128,4.597,2129,5.609,2130,4.597,2131,4.084,2132,4.597,2133,4.597,2134,4.084,2135,4.597,2136,4.597,2137,4.597,2138,4.597,2139,6.313,2140,4.597,2141,6.313,2142,4.597,2143,4.084,2144,4.597,2145,4.597,2146,4.084,2147,4.597]],["title/classes/UpdateCategoryDto.html",[36,0.188,490,3.311]],["body/classes/UpdateCategoryDto.html",[3,0.098,4,0.098,5,0.079,7,0.378,8,1.396,12,2.094,16,0.429,17,0.007,18,1.449,19,1.591,21,0.582,24,1.918,31,0.168,35,0.098,36,0.306,37,0.006,38,0.006,107,1.257,490,5.394,593,1.319,689,3.586,690,3.586,691,2.242,693,4.901,694,5.343,748,4.564,1198,4.678,2148,7.305,2149,5.343,2150,5.343,2151,6.014]],["title/classes/UpdatePermissionsDto.html",[36,0.188,397,3.311]],["body/classes/UpdatePermissionsDto.html",[3,0.096,4,0.096,5,0.077,7,0.368,8,1.374,16,0.334,17,0.007,19,1.239,21,0.453,31,0.227,35,0.096,36,0.301,37,0.006,38,0.006,175,3.87,226,2.578,397,5.308,499,5.537,593,1.286,690,3.53,691,2.185,749,6.04,1197,4.778,1200,6.04,1267,5.038,2152,6.04,2153,5.209,2154,6.623,2155,5.863,2156,5.863,2157,5.863,2158,5.863,2159,5.863,2160,5.863,2161,5.863]],["title/classes/UpdatePostDto.html",[36,0.188,1836,3.311]],["body/classes/UpdatePostDto.html",[3,0.093,4,0.093,5,0.074,7,0.357,8,1.346,12,2.039,16,0.456,17,0.007,18,1.624,19,1.692,21,0.619,24,1.85,31,0.158,35,0.093,36,0.295,37,0.005,38,0.005,593,1.246,606,4.604,689,3.814,690,3.814,691,2.117,740,4.629,742,5.735,748,4.685,1198,4.512,1836,5.202,2149,5.047,2150,6.454,2162,7.499,2163,5.68,2164,5.68,2165,5.68]],["title/classes/UpdateProductCommand.html",[36,0.188,2030,3.311]],["body/classes/UpdateProductCommand.html",[3,0.085,4,0.085,5,0.068,7,0.326,8,1.27,9,3.556,12,2.077,14,0.748,15,2.619,16,0.464,17,0.007,18,1.57,21,0.63,31,0.191,35,0.085,36,0.211,37,0.005,38,0.005,106,0.945,107,0.794,245,1.713,247,2.817,409,3.1,593,1.139,615,2.789,752,3.948,753,4.41,754,4.038,757,4.233,758,4.615,759,4.615,760,3.72,950,4.615,1995,5.764,2030,4.909,2166,7.533,2167,5.194]],["title/classes/UpdateProductDto.html",[36,0.188,1995,3.142]],["body/classes/UpdateProductDto.html",[3,0.11,4,0.11,5,0.089,17,0.007,31,0.226,35,0.11,36,0.274,37,0.006,38,0.006,463,4.593,593,1.482,596,2.76,756,4.382,760,4.84,762,5.136,1995,5.498,2168,6.004,2169,6.004,2170,5.507,2171,5.507,2172,6.758]],["title/classes/UpdateProductHandler.html",[36,0.188,2017,3.513]],["body/classes/UpdateProductHandler.html",[3,0.071,4,0.071,5,0.057,7,0.274,12,1.784,14,0.876,16,0.346,17,0.007,21,0.47,31,0.237,33,1.553,35,0.071,36,0.177,37,0.005,38,0.005,43,1.384,46,0.973,48,0.627,55,2.039,68,1.068,106,1.105,107,0.929,193,2,245,1.519,246,1.292,259,2.5,360,3.161,361,2.425,429,1.587,435,3.714,442,2.196,563,3.118,568,3.776,593,0.955,627,2.895,654,2.337,713,3.374,714,5.324,715,3.942,719,4.62,721,4.354,722,3.308,753,3.643,754,3.336,770,3.118,771,3.118,773,4.354,775,2.704,776,3.308,778,3.118,955,3.547,956,3.867,957,4.354,958,3.118,959,3.547,962,5.401,963,4.954,964,3.867,965,3.867,966,3.867,968,3.867,2017,4.62,2030,5.43,2173,6.223,2174,4.353,2175,4.353,2176,4.353,2177,7.004]],["title/classes/UpdateRoleDto.html",[36,0.188,401,3.311]],["body/classes/UpdateRoleDto.html",[3,0.103,4,0.103,5,0.083,7,0.397,8,1.439,16,0.36,17,0.007,19,1.334,21,0.488,31,0.216,35,0.103,36,0.315,37,0.006,38,0.006,401,5.56,412,6.228,413,5.61,593,1.385,690,3.697,691,2.354,1197,5.146,2152,6.326,2178,5.61,2179,6.315,2180,6.315,2181,6.315]],["title/classes/UpdateUserDto.html",[36,0.188,2182,3.767]],["body/classes/UpdateUserDto.html",[3,0.11,4,0.11,5,0.089,17,0.007,31,0.226,35,0.11,36,0.274,37,0.006,38,0.006,463,4.593,593,1.482,596,2.76,782,5.136,784,5.507,2169,6.004,2170,5.507,2171,5.507,2182,6.591,2183,6.004,2184,6.758,2185,6.758]],["title/entities/User.html",[0,1.844,15,1.428]],["body/entities/User.html",[0,1.393,1,4.449,2,1.098,3,0.034,4,0.034,5,0.068,7,0.133,8,0.647,9,3.679,12,1.136,14,1.279,15,1.078,16,0.482,17,0.007,18,1.475,19,1.759,20,4.404,21,0.643,24,1.32,25,2.477,28,1.875,31,0.198,32,5.101,33,0.753,35,0.034,36,0.142,37,0.003,38,0.003,107,0.878,153,1.875,175,3.966,221,2.739,327,2.125,332,3.906,335,4.01,356,2.772,412,4.653,499,3.723,500,1.72,501,1.875,569,2.894,591,1.72,707,1.311,754,3.117,785,3.636,838,2.372,845,2.844,852,2.168,853,3.22,881,2.168,1167,4.7,1200,5.578,1271,2.653,1273,2.263,1280,3.723,1282,2.263,1314,1.72,1340,3.101,1363,3.636,1493,1.604,1575,3.524,1577,1.72,1787,4.606,1789,3.964,1795,5.578,1801,4.606,2131,3.101,2154,3.636,2186,1.875,2187,5.04,2188,5.741,2189,4.462,2190,4.462,2191,4.462,2192,3.964,2193,4.462,2194,4.462,2195,3.49,2196,2.111,2197,2.111,2198,2.111,2199,2.111,2200,2.111,2201,2.111,2202,3.49,2203,2.111,2204,2.111,2205,2.111,2206,2.111,2207,2.111,2208,4.462,2209,2.111,2210,2.111,2211,2.111,2212,2.111,2213,2.111,2214,2.111,2215,2.111,2216,2.111,2217,3.49,2218,2.111,2219,3.49,2220,2.111,2221,2.111,2222,2.111,2223,5.741,2224,5.184,2225,2.111,2226,1.875,2227,2.111,2228,2.111,2229,2.111,2230,1.875,2231,2.844,2232,2.111,2233,2.111,2234,2.111,2235,2.111,2236,1.875]],["title/classes/UserNotFoundException.html",[36,0.188,2237,3.767]],["body/classes/UserNotFoundException.html",[3,0.103,4,0.103,5,0.083,12,1.608,14,0.91,16,0.36,17,0.007,21,0.488,24,2.14,31,0.176,35,0.103,36,0.256,37,0.006,38,0.006,48,0.91,106,1.148,107,0.966,245,1.578,334,5.276,593,1.385,595,4.292,596,3.171,597,5.221,599,4.523,602,4.292,2237,6.326,2238,6.897,2239,7.763,2240,6.315]],["title/controllers/UsersController.html",[39,1.486,2241,3.513]],["body/controllers/UsersController.html",[3,0.023,4,0.023,5,0.11,7,0.087,12,1.81,14,0.892,15,2.615,16,0.497,17,0.007,18,0.949,19,1.356,21,0.496,24,0.831,31,0.194,35,0.023,36,0.056,37,0.002,38,0.002,39,0.446,41,0.455,43,0.555,46,1.434,48,0.2,52,0.7,55,0.95,68,1.623,106,1.126,107,1.04,154,0.828,175,2.691,190,0.68,193,1.696,199,4.631,202,3.913,207,0.909,221,0.58,222,3.51,223,0.798,224,3.645,225,0.745,226,0.61,229,1.697,235,0.77,237,0.9,241,0.828,242,0.9,246,1.839,247,0.429,248,3.664,259,0.87,327,2.95,334,1.658,335,0.9,361,2.471,363,3.489,369,1.054,380,1.515,404,1.947,405,1.854,421,1.233,464,2.812,466,1.747,477,3.489,480,3.614,493,0.994,494,1.854,503,1.131,504,0.994,505,1.131,606,1.402,629,0.994,630,0.994,645,0.943,754,1.161,842,2.439,843,0.943,852,2.439,853,1.515,856,4.408,858,2.337,859,1.131,864,1.554,867,1.131,870,1.131,871,1.131,872,1.131,874,1.131,881,1.515,1015,1.233,1251,2.48,1259,1.131,1260,3.399,1262,5.031,1269,1.658,1273,2.116,1280,1.581,1282,2.546,1286,2.899,1289,2.899,1299,5.434,1300,3.489,1301,1.987,1578,1.131,1592,1.233,1593,1.233,1596,1.233,1597,1.233,1598,1.233,1600,1.233,1601,1.054,1609,1.854,1711,4.379,1712,2.899,1716,3.489,1724,1.233,1725,3.973,1726,3.489,1730,1.233,1736,3.489,1737,6.639,1922,1.131,2101,3.489,2187,5.672,2226,1.233,2241,1.854,2242,1.131,2243,3.263,2244,3.263,2245,3.263,2246,3.263,2247,3.263,2248,2.439,2249,2.439,2250,3.263,2251,1.387,2252,1.387,2253,3.927,2254,4.929,2255,3.263,2256,3.927,2257,1.387,2258,1.387,2259,1.387,2260,1.387,2261,1.387,2262,1.387,2263,1.387,2264,1.387,2265,1.387,2266,2.439,2267,1.387,2268,1.387,2269,1.387,2270,1.387,2271,1.387,2272,3.927,2273,1.387,2274,1.387,2275,1.387,2276,3.263,2277,1.387,2278,4.929,2279,2.439,2280,1.387,2281,1.387,2282,5.651,2283,1.387,2284,1.387,2285,1.387,2286,2.439,2287,1.387,2288,1.387,2289,1.387,2290,1.387,2291,1.387,2292,1.387,2293,1.387,2294,2.439,2295,1.387,2296,1.387,2297,1.387,2298,1.387,2299,1.387,2300,4.473,2301,1.233,2302,3.927,2303,5.317,2304,5.94,2305,2.439,2306,1.387,2307,1.387,2308,1.387,2309,1.387,2310,1.387,2311,1.387,2312,1.387,2313,1.387,2314,1.387,2315,1.387,2316,3.263,2317,1.387,2318,1.387,2319,1.387,2320,1.387,2321,1.387,2322,1.387,2323,1.387,2324,1.387,2325,1.387,2326,1.387,2327,5.651,2328,1.387,2329,2.439,2330,1.387,2331,1.387,2332,1.387,2333,1.387,2334,1.387,2335,1.387,2336,1.387,2337,1.387,2338,3.927,2339,1.387,2340,1.387,2341,1.387,2342,1.387,2343,3.263,2344,1.387,2345,3.263,2346,1.387,2347,1.387,2348,1.387,2349,1.387,2350,1.387,2351,1.387,2352,1.387,2353,2.439,2354,1.387,2355,1.387,2356,1.387,2357,1.387,2358,1.387]],["title/modules/UsersModule.html",[72,1.27,96,2.871]],["body/modules/UsersModule.html",[3,0.079,4,0.079,5,0.063,15,1.495,17,0.007,31,0.247,35,0.079,36,0.197,37,0.005,38,0.005,41,2.146,48,0.697,72,1.797,74,1.888,75,2.876,82,5.801,87,5.801,90,5.801,96,5.776,97,3.03,98,2.243,99,2.185,101,2.671,151,3.291,152,5.81,154,2.89,181,3.114,229,4.805,241,2.89,291,3.903,428,2.687,429,1.765,432,4.301,852,3.007,1259,3.946,2241,5.628,2301,4.301,2359,4.301,2360,4.301,2361,4.842,2362,4.301,2363,4.842,2364,4.842,2365,4.842]],["title/interfaces/VerificationTokenPayload.html",[446,2.142,1019,3.513]],["body/interfaces/VerificationTokenPayload.html",[3,0.11,4,0.11,5,0.088,7,0.423,8,1.495,16,0.383,17,0.007,18,1.663,35,0.11,37,0.006,38,0.006,268,3.395,327,4.267,446,3.118,448,4.016,684,3.736,1019,6.132,2059,5.484,2366,5.979]],["title/coverage.html",[2367,5.164]],["body/coverage.html",[0,2.59,1,0.968,5,0.019,6,1.266,15,0.44,16,0.081,17,0.007,36,0.366,37,0.002,38,0.002,39,2.348,40,1.083,42,1.266,122,0.924,133,1.083,151,1.697,154,2.388,156,1.083,161,1.788,163,1.619,166,1.788,170,1.161,185,1.083,186,1.083,188,1.083,189,1.266,191,0.924,196,0.968,199,0.819,205,1.083,215,0.968,221,0.596,227,0.924,229,0.741,231,0.85,235,0.791,238,1.083,240,1.083,268,0.719,284,1.02,285,1.02,286,1.02,287,1.02,288,0.968,290,1.083,300,1.619,301,1.788,303,1.897,304,2.069,313,1.664,315,1.266,349,0.924,361,0.568,391,1.083,392,1.266,397,1.02,401,1.02,407,0.968,414,1.083,433,1.266,446,2.654,447,1.02,449,1.266,450,2.034,453,1.02,454,1.266,460,1.083,461,1.266,471,1.02,474,0.924,480,0.968,490,1.02,497,1.083,499,0.924,504,1.02,506,0.968,545,1.266,561,1.083,581,1.266,594,1.266,595,3.092,603,0.819,604,1.266,616,1.083,617,1.266,622,0.968,625,1.083,631,0.968,636,0.85,655,1.083,659,1.083,663,1.266,670,0.765,673,1.02,676,1.02,683,1.083,684,2.994,685,1.266,686,1.266,692,1.266,693,2.034,695,1.266,696,1.266,701,1.266,702,1.266,704,1.083,711,1.266,712,1.266,729,1.083,730,1.266,731,1.266,738,1.02,739,1.266,740,2.034,750,1.02,751,1.266,752,2.532,754,0.679,756,0.924,761,1.266,762,2.532,768,1.083,769,1.266,770,2.866,782,1.083,783,1.266,784,2.034,798,1.02,799,1.266,800,2.034,802,0.968,803,1.551,823,1.161,838,0.968,839,2.265,840,1.266,841,2.866,850,1.083,851,2.034,860,0.968,884,2.034,907,1.083,908,1.266,946,1.083,948,1.02,949,1.266,953,1.083,954,1.266,958,1.02,969,1.083,970,1.266,1000,1.266,1005,0.924,1019,1.083,1058,1.02,1059,1.266,1060,1.266,1067,1.083,1068,1.266,1080,0.968,1093,1.266,1113,1.266,1143,1.161,1144,1.897,1204,4.08,1214,7.321,1216,1.266,1217,1.266,1226,1.266,1227,1.266,1239,1.161,1241,1.161,1242,1.161,1247,1.083,1248,1.266,1251,1.083,1252,2.532,1253,1.266,1260,1.083,1261,2.034,1268,1.161,1269,0.968,1270,1.266,1278,1.02,1280,0.924,1282,0.924,1285,1.161,1343,1.083,1344,2.034,1345,1.266,1349,1.02,1354,1.083,1355,1.02,1369,2.034,1370,1.266,1375,1.266,1376,1.266,1379,1.083,1381,1.02,1385,1.266,1389,1.266,1390,1.266,1397,1.266,1398,1.266,1406,1.266,1407,1.266,1412,1.083,1413,1.266,1414,1.083,1415,2.265,1416,2.034,1419,1.083,1422,0.968,1431,2.034,1477,1.083,1478,1.266,1517,1.083,1518,1.266,1519,1.266,1530,1.083,1531,1.266,1535,2.532,1536,2.034,1539,1.266,1540,1.266,1559,1.266,1566,1.02,1567,3.092,1568,1.266,1569,1.266,1573,1.266,1575,0.968,1576,3.11,1577,1.161,1581,1.083,1582,1.266,1583,1.266,1584,1.083,1588,0.968,1594,1.083,1595,2.034,1609,1.083,1645,1.266,1652,1.266,1660,1.266,1673,1.266,1688,1.266,1701,1.266,1702,2.034,1704,1.083,1705,1.266,1760,1.266,1761,1.266,1767,1.266,1772,1.083,1773,1.266,1774,1.083,1782,1.266,1804,1.083,1805,1.266,1807,1.083,1808,1.266,1809,1.083,1810,1.266,1812,1.083,1813,1.266,1836,1.02,1843,0.968,1868,0.968,1870,1.161,1877,1.266,1878,1.266,1928,1.266,1970,1.266,1975,1.266,1983,1.266,1985,1.083,1986,1.266,1995,0.968,1997,0.968,2017,1.083,2021,1.266,2030,1.02,2040,1.266,2041,1.266,2052,1.266,2053,1.266,2056,1.161,2058,1.266,2059,2.034,2060,1.266,2061,1.266,2063,1.083,2064,1.266,2065,1.266,2123,2.034,2148,1.266,2152,2.034,2153,1.266,2162,1.266,2166,1.266,2168,1.266,2173,1.266,2178,1.266,2182,1.161,2183,1.266,2186,1.266,2237,1.161,2238,1.266,2241,1.083,2242,1.161,2366,1.266,2367,1.161,2368,1.266,2369,1.425,2370,1.425,2371,8.223,2372,3.332,2373,5.007,2374,8.223,2375,6.689,2376,8.546,2377,1.266,2378,6.491,2379,1.266,2380,7.302,2381,1.266,2382,1.266,2383,1.161,2384,1.266,2385,1.266,2386,1.266,2387,1.266,2388,3.332,2389,1.425,2390,1.266,2391,1.266,2392,2.496,2393,1.425,2394,1.425,2395,1.425,2396,1.266,2397,1.266,2398,2.034,2399,1.266,2400,1.266,2401,1.266,2402,1.266,2403,1.266,2404,1.266,2405,1.266,2406,1.266,2407,1.425,2408,1.425]],["title/dependencies.html",[75,2.448,2409,3.418]],["body/dependencies.html",[17,0.007,33,1.698,36,0.262,37,0.005,38,0.005,48,0.685,50,1.898,75,2.092,115,3.877,117,3.877,119,3.616,176,4.911,226,2.092,236,2.955,241,2.839,257,3.085,293,3.407,295,2.735,344,4.226,429,1.735,654,2.554,691,1.773,707,2.955,864,3.078,1124,3.877,1236,4.226,1306,4.226,1315,4.226,1317,4.226,1449,4.226,1488,3.877,1548,5.256,1601,3.616,1728,4.226,1895,3.877,2112,4.226,2114,4.226,2170,3.877,2171,3.877,2231,3.877,2410,4.757,2411,6.462,2412,4.757,2413,7.339,2414,6.462,2415,4.757,2416,4.757,2417,4.757,2418,4.757,2419,4.757,2420,4.757,2421,4.757,2422,4.757,2423,4.757,2424,4.757,2425,4.757,2426,6.462,2427,4.757,2428,3.877,2429,4.757,2430,4.757,2431,4.757,2432,4.757,2433,4.757,2434,4.757,2435,4.757,2436,4.757,2437,4.757,2438,4.757,2439,4.757,2440,4.757,2441,4.757,2442,4.757,2443,4.757,2444,4.757,2445,4.757,2446,4.757,2447,4.757,2448,4.226,2449,4.757,2450,4.757,2451,4.757,2452,4.757]],["title/miscellaneous/enumerations.html",[2453,2.389,2454,4.946]],["body/miscellaneous/enumerations.html",[7,0.338,15,2.167,17,0.007,37,0.005,38,0.005,69,5.332,241,4.187,333,6.173,345,6.233,347,4.549,412,4.768,831,5.332,1144,4.091,1201,6.233,1202,5.717,2453,3.343,2454,4.782,2455,5.717,2456,5.382,2457,4.782,2458,5.382,2459,7.015,2460,5.717,2461,5.382,2462,5.382,2463,5.382,2464,7.015,2465,7.015,2466,7.015,2467,7.015,2468,5.382,2469,5.382,2470,5.382,2471,5.382,2472,7.015,2473,7.015,2474,7.015,2475,5.382,2476,7.015,2477,7.015]],["title/miscellaneous/functions.html",[2453,2.389,2478,4.946]],["body/miscellaneous/functions.html",[7,0.332,14,1.228,16,0.485,17,0.007,37,0.005,38,0.005,46,1.547,53,4.011,106,1.55,107,1.303,122,4.491,154,3.15,333,3.423,803,4.302,807,3.78,823,5.645,1103,6.3,1144,4.011,1167,5.264,1205,4.689,1206,6.154,1239,5.645,1241,5.645,1242,5.645,1246,4.689,1576,3.278,1594,5.264,1595,5.645,1609,5.264,2390,4.689,2391,6.154,2396,4.689,2397,6.869,2398,4.301,2399,6.154,2405,4.689,2406,6.154,2453,3.278,2457,4.689,2478,4.689,2479,5.278,2480,4.689,2481,5.278,2482,5.278,2483,5.278,2484,5.278,2485,5.278,2486,5.278,2487,5.278,2488,8.208,2489,5.278]],["title/index.html",[7,0.242,2490,3.847,2491,3.847]],["body/index.html",[5,0.066,9,1.311,17,0.007,33,1.799,37,0.004,38,0.004,53,3.832,71,4.479,72,2.442,74,1.311,99,3.72,145,2.987,176,3.832,191,4.668,236,2.088,246,0.998,257,2.18,268,1.696,300,2.18,304,2.088,327,1.601,335,2.18,393,2.987,435,2.47,493,2.408,644,1.933,646,1.696,684,1.866,721,2.408,749,2.74,754,1.601,831,3.832,839,2.285,852,3.757,853,2.088,910,2.408,1069,2.987,1101,2.987,1124,2.74,1202,4.108,1269,3.427,1285,2.74,1299,2.18,1314,2.74,1355,3.611,1367,2.74,1415,2.285,1417,2.555,1479,2.987,1480,7.832,1493,3.832,1496,2.987,1566,2.408,1670,4.108,1727,2.987,1774,3.832,2047,5.373,2068,2.987,2146,4.479,2154,2.74,2187,2.74,2230,2.987,2236,2.987,2242,2.74,2367,2.74,2368,2.987,2428,2.74,2448,2.987,2492,3.362,2493,5.041,2494,3.362,2495,5.041,2496,3.362,2497,3.362,2498,3.362,2499,8.244,2500,3.362,2501,3.362,2502,3.362,2503,3.362,2504,3.362,2505,3.362,2506,3.362,2507,3.362,2508,3.362,2509,3.362,2510,3.362,2511,2.74,2512,3.362,2513,3.362,2514,3.362,2515,3.362,2516,3.362,2517,3.362,2518,3.362,2519,5.041,2520,7.837,2521,5.041,2522,3.362,2523,3.362,2524,5.041,2525,5.041,2526,3.362,2527,3.362,2528,3.362,2529,5.041,2530,3.362,2531,3.362,2532,3.362,2533,3.362,2534,2.987,2535,3.362,2536,3.362,2537,6.048,2538,3.362,2539,3.362,2540,3.362,2541,3.362,2542,3.362,2543,3.362,2544,3.362,2545,3.362,2546,3.362,2547,3.362,2548,3.362,2549,3.362,2550,3.362,2551,3.362,2552,3.362,2553,8.061,2554,3.362,2555,3.362,2556,3.362,2557,3.362,2558,3.362,2559,3.362,2560,3.362,2561,3.362,2562,3.362,2563,3.362,2564,3.362,2565,5.041,2566,5.041,2567,3.362,2568,3.362,2569,3.362,2570,3.362,2571,3.362,2572,3.362,2573,7.837,2574,3.362,2575,3.362,2576,3.362,2577,3.362,2578,3.362,2579,3.362,2580,5.041,2581,3.362,2582,3.362,2583,3.362,2584,3.362,2585,3.362]],["title/modules.html",[74,2.471]],["body/modules.html",[17,0.005,37,0.005,38,0.005,73,3.96,74,2.032,78,3.542,79,3.732,80,3.732,81,3.732,82,3.542,83,3.732,84,3.542,85,3.379,86,3.732,87,3.542,88,3.732,89,3.732,90,3.542,91,3.732,92,3.732,93,3.732,94,3.732,95,3.542,96,3.237,1509,7.256,2534,8.455,2586,9.517,2587,9.517,2588,9.623,2589,8.167]],["title/overview.html",[2511,5.164]],["body/overview.html",[2,1.383,17,0.007,37,0.003,38,0.003,41,0.872,73,7.156,74,1.037,75,1.85,76,2.362,77,2.362,78,6.044,79,4.631,80,4.631,81,4.631,82,4.896,83,3.739,84,5.462,85,4.843,86,5.159,87,4.896,88,5.507,89,3.739,90,4.896,91,5.349,92,3.739,93,5.507,94,4.631,95,4.034,96,5.275,97,1.949,98,1.232,99,1.2,227,4.671,229,3.746,231,4.299,280,2.362,282,2.362,283,2.362,284,3.739,285,3.739,286,3.739,287,3.739,288,3.548,314,0.929,407,3.548,425,2.362,426,2.362,448,1.587,506,3.548,534,2.362,535,2.362,593,0.583,631,3.548,647,2.021,650,2.362,651,2.362,798,5.159,802,3.548,860,4.896,876,2.362,877,2.362,878,2.362,992,2.362,993,2.362,995,2.362,1005,4.671,1053,2.362,1054,2.362,1055,2.362,1080,3.548,1088,2.362,1090,2.362,1275,2.362,1276,2.362,1277,2.362,1278,5.159,1422,3.548,1427,2.362,1429,2.362,1588,4.896,1622,2.362,1623,2.362,1624,2.362,1666,2.362,1667,2.362,1668,2.362,1843,3.548,1865,2.362,1867,2.362,1868,3.548,1997,3.548,2010,2.362,2011,2.362,2359,2.362,2360,2.362,2362,2.362,2511,2.167,2590,2.659,2591,2.659,2592,2.659,2593,2.659,2594,2.659]],["title/properties.html",[8,1.032,2409,3.418]],["body/properties.html",[8,1.329,17,0.007,37,0.006,38,0.006,51,5.844,605,4.454,1299,4.65,2595,7.171,2596,7.171,2597,7.171]],["title/miscellaneous/typealiases.html",[2453,2.389,2598,5.567]],["body/miscellaneous/typealiases.html",[7,0.451,16,0.408,17,0.007,37,0.006,38,0.006,499,5.433,2383,5.844,2453,4.454,2455,5.844,2460,5.844,2599,7.171,2600,6.371]],["title/miscellaneous/variables.html",[54,4.537,2453,2.389]],["body/miscellaneous/variables.html",[1,1.988,7,0.184,10,2.598,11,2.598,12,1.154,13,2.598,15,1.714,16,0.461,17,0.007,18,0.563,36,0.184,37,0.003,38,0.003,49,4.099,54,2.383,55,2.174,56,3.246,68,1.831,101,2.554,107,0.447,112,3.47,170,3.694,193,1.585,202,2.22,235,2.516,250,3.081,259,1.617,306,5.095,307,5.095,327,1.393,332,4.918,333,5.344,335,1.896,356,2.815,412,3.772,414,3.445,497,3.445,499,4.054,542,2.598,543,2.598,596,1.851,627,1.393,644,3.594,645,4.249,646,3.61,647,4.218,670,2.433,946,3.445,1047,4.523,1127,3.445,1132,2.383,1214,3.445,1230,3.694,1254,1.988,1354,3.445,1355,3.246,1359,4.523,1527,4.027,1870,3.694,2056,3.694,2123,2.383,2129,2.598,2134,2.598,2143,2.598,2192,2.598,2231,2.383,2377,2.598,2379,4.027,2381,2.598,2382,2.598,2383,2.383,2384,2.598,2385,2.598,2386,4.027,2387,2.598,2398,2.383,2400,4.027,2401,2.598,2402,4.027,2403,2.598,2404,4.027,2428,2.383,2453,1.816,2455,2.383,2460,2.383,2480,2.598,2600,2.598,2601,2.924,2602,2.924,2603,2.924,2604,2.924,2605,2.924,2606,2.924,2607,2.924,2608,2.924,2609,2.924,2610,2.924,2611,4.533,2612,4.533,2613,2.924,2614,2.924,2615,2.924,2616,2.924,2617,2.924,2618,2.924,2619,2.924,2620,2.924,2621,2.924,2622,2.924,2623,2.924,2624,2.924,2625,2.924,2626,2.924,2627,2.924,2628,2.924,2629,2.924,2630,2.924,2631,2.924,2632,2.924,2633,2.924,2634,2.924,2635,2.924,2636,4.533,2637,4.533,2638,2.924,2639,2.924,2640,2.924,2641,2.924,2642,2.924]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1214,"title":{},"body":{"classes/EnvironmentVariables.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":2595,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":2444,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2430,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":2451,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1513,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":2429,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":2436,"title":{},"body":{"dependencies.html":{}}}],["0.5.5",{"_index":2412,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2376,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2393,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2371,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":2395,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2389,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2374,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2380,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2375,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2372,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2392,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2373,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2388,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":645,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2438,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":2418,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2432,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2441,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["100",{"_index":544,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["100.0.0",{"_index":2433,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":1500,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2591,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":2435,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":543,"title":{},"body":{"modules/CategoriesModule.html":{},"miscellaneous/variables.html":{}}}],["123123123123",{"_index":2051,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123123123123'})@isoptional()@isstring()@isnotempty()@matches(/^\\+[1",{"_index":2048,"title":{},"body":{"classes/RegisterDto.html":{}}}],["16",{"_index":2590,"title":{},"body":{"overview.html":{}}}],["2",{"_index":2335,"title":{},"body":{"controllers/UsersController.html":{}}}],["2.0.0",{"_index":2414,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":2419,"title":{},"body":{"dependencies.html":{}}}],["2.1128.0",{"_index":2423,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":647,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["23505",{"_index":2470,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["29",{"_index":2592,"title":{},"body":{"overview.html":{}}}],["2fa",{"_index":2068,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"index.html":{}}}],["3.0.2",{"_index":2446,"title":{},"body":{"dependencies.html":{}}}],["3.6.3",{"_index":2427,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1499,"title":{},"body":{"controllers/HealthController.html":{}}}],["300mb",{"_index":1495,"title":{},"body":{"controllers/HealthController.html":{}}}],["3600",{"_index":2627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2437,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":2450,"title":{},"body":{"dependencies.html":{}}}],["4.8.3",{"_index":2425,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1687,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["404",{"_index":1475,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["5.0.1",{"_index":2424,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":2420,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1508,"title":{},"body":{"controllers/HealthController.html":{}}}],["500",{"_index":1685,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["52",{"_index":2593,"title":{},"body":{"overview.html":{}}}],["6.7.5",{"_index":2434,"title":{},"body":{"dependencies.html":{}}}],["7.5.5",{"_index":2447,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":2594,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":2417,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":2422,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":2415,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":2421,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":2416,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":2411,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2452,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":2413,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":2440,"title":{},"body":{"dependencies.html":{}}}],["9]\\\\d{1,14",{"_index":2050,"title":{},"body":{"classes/RegisterDto.html":{}}}],["9]\\d{1,14",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["access_token",{"_index":1460,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["accesstokencookie",{"_index":254,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["addavatar",{"_index":2244,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(request",{"_index":2251,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronamazons3",{"_index":2245,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronamazons3(request",{"_index":2258,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronpostgres",{"_index":2246,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronpostgres(request",{"_index":2261,"title":{},"body":{"controllers/UsersController.html":{}}}],["added",{"_index":2254,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile",{"_index":2247,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile(request",{"_index":2264,"title":{},"body":{"controllers/UsersController.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"injectables/EmailConfirmationService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address.entity",{"_index":2225,"title":{},"body":{"entities/User.html":{}}}],["admin",{"_index":2477,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["age=${this.configservice.get",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":388,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["aliases",{"_index":2599,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allocated",{"_index":1502,"title":{},"body":{"controllers/HealthController.html":{}}}],["already",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["amazon",{"_index":2230,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["any(paragraphs",{"_index":1952,"title":{},"body":{"injectables/PostsService.html":{}}}],["anything",{"_index":2509,"title":{},"body":{"index.html":{}}}],["api",{"_index":2521,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":1724,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes('multipart/form",{"_index":1736,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":1725,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["apiextramodels",{"_index":496,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["apiextramodels(findoneparams",{"_index":513,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apiextramodels(paginatedresultdto",{"_index":642,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["apinotfoundresponse",{"_index":2302,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":2303,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":1726,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":1267,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/ImagesUploadDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/UpdatePermissionsDto.html":{}}}],["apiproperty({description",{"_index":1532,"title":{},"body":{"classes/ImagesUploadDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({isarray",{"_index":2155,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["apiproperty({type",{"_index":1263,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{}}}],["apitags",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":244,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["apitags('authorization",{"_index":417,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["apitags('categories",{"_index":511,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apitags('comments",{"_index":641,"title":{},"body":{"controllers/CommentsController.html":{}}}],["apitags('email",{"_index":1082,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["apitags('optimize",{"_index":1732,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["apitags('posts",{"_index":1849,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('products",{"_index":2000,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apitags('users",{"_index":2310,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":2304,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":2575,"title":{},"body":{"index.html":{}}}],["app.config.ts",{"_index":2514,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["app_debug",{"_index":1145,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["app_env",{"_index":1146,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["app_filter",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["app_url",{"_index":1147,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["appconfig",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":40,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appenv",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["application",{"_index":1030,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["appmodule",{"_index":73,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appurl",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["argumentshost",{"_index":1220,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["array",{"_index":1271,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"classes/ImagesUploadDto.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["async",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["attachments",{"_index":1533,"title":{},"body":{"classes/ImagesUploadDto.html":{}}}],["auth",{"_index":1132,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["auth.oauth2client",{"_index":1448,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(@req",{"_index":249,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(token",{"_index":1438,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(tokendata",{"_index":1418,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"index.html":{}}}],["authentication.controller",{"_index":296,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication.controller.ts",{"_index":1416,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:15",{"_index":1420,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller.ts:31",{"_index":2075,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:48",{"_index":2082,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:66",{"_index":2079,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:84",{"_index":2072,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.guard",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":1536,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication.module.ts",{"_index":1430,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["authentication.service",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":1431,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:10",{"_index":1437,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:16",{"_index":2106,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:23",{"_index":1443,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:33",{"_index":2108,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:37",{"_index":1441,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:43",{"_index":2110,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:51",{"_index":1445,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:66",{"_index":1447,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:75",{"_index":1439,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication/authentication.service",{"_index":1450,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication/dto/register.dto",{"_index":1016,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["authentication/dto/token",{"_index":2060,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["authentication/google",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication/jwt",{"_index":630,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["authentication/request",{"_index":629,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["authentication/two",{"_index":1840,"title":{},"body":{"controllers/PostsController.html":{}}}],["authentication=${token",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":188,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":78,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":231,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticator",{"_index":2111,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":2115,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri",{"_index":2116,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":2120,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":1537,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":1538,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1574,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":605,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"properties.html":{}}}],["author.posts",{"_index":608,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{}}}],["authorid",{"_index":1811,"title":{},"body":{"interfaces/PostSearchDocument.html":{},"injectables/PostsSearchService.html":{}}}],["authorization",{"_index":393,"title":{},"body":{"controllers/AuthorizationController.html":{},"index.html":{}}}],["authorization.controller",{"_index":431,"title":{},"body":{"modules/AuthorizationModule.html":{}}}],["authorization.service",{"_index":408,"title":{},"body":{"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{}}}],["authorization/authorization.module",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["authorization/permission.guard",{"_index":498,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{}}}],["authorization/role.enum",{"_index":501,"title":{},"body":{"controllers/CategoriesController.html":{},"entities/User.html":{}}}],["authorization/role.guard",{"_index":502,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["authorization/types/permission.type",{"_index":500,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"entities/User.html":{}}}],["authorizationcontroller",{"_index":391,"title":{"controllers/AuthorizationController.html":{}},"body":{"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"coverage.html":{}}}],["authorizationmodule",{"_index":79,"title":{"modules/AuthorizationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationModule.html":{},"modules.html":{},"overview.html":{}}}],["authorizationservice",{"_index":407,"title":{"injectables/AuthorizationService.html":{}},"body":{"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"coverage.html":{},"overview.html":{}}}],["authors",{"_index":451,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["available",{"_index":1509,"title":{},"body":{"controllers/HealthController.html":{},"modules.html":{}}}],["avatar",{"_index":2187,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["avatarid",{"_index":2188,"title":{},"body":{"entities/User.html":{}}}],["avatarid'})@onetoone(undefined",{"_index":2199,"title":{},"body":{"entities/User.html":{}}}],["avatars",{"_index":2328,"title":{},"body":{"controllers/UsersController.html":{}}}],["await",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1306,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["aws.config.ts",{"_index":2515,"title":{},"body":{"index.html":{}}}],["awsconfig",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["badrequestexception",{"_index":1015,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/UsersController.html":{}}}],["badrequestexception('bad",{"_index":1052,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('email",{"_index":1041,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('provide",{"_index":2331,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":2519,"title":{},"body":{"index.html":{}}}],["baseexceptionfilter",{"_index":1218,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["bcrypt",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":390,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["best",{"_index":2503,"title":{},"body":{"index.html":{}}}],["binary",{"_index":1265,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/ImagesUploadDto.html":{}}}],["body",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["bookproperties",{"_index":447,"title":{"interfaces/BookProperties.html":{}},"body":{"interfaces/BookProperties.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"coverage.html":{}}}],["bool",{"_index":1914,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["boolean",{"_index":1167,"title":{},"body":{"classes/EnvironmentVariables.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":2397,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":2527,"title":{},"body":{"index.html":{}}}],["box",{"_index":2520,"title":{},"body":{"index.html":{}}}],["brand",{"_index":455,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["browse",{"_index":2588,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2586,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1323,"title":{},"body":{"injectables/FilesService.html":{}}}],["buffer",{"_index":898,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{}}}],["buffer.from(job.returnvalue",{"_index":1751,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["building",{"_index":2506,"title":{},"body":{"index.html":{}}}],["built",{"_index":2541,"title":{},"body":{"index.html":{}}}],["bull",{"_index":1728,"title":{},"body":{"controllers/OptimizeController.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{}}}],["bullmodule.forrootasync(bullmoduleoptions",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":1756,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["bullmoduleoptions",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bytea",{"_index":846,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["cache",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"dependencies.html":{},"index.html":{}}}],["cache.interceptor",{"_index":1846,"title":{},"body":{"controllers/PostsController.html":{}}}],["cache.interceptor.ts",{"_index":1519,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:10",{"_index":1522,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_key_metadata",{"_index":1523,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheinterceptor",{"_index":495,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{}}}],["cachekey",{"_index":1524,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{}}}],["cachekey('get_posts_cache_key",{"_index":1851,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachemodule",{"_index":537,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/PostsModule.html":{}}}],["cachemodule.register",{"_index":541,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["cachemodule.registerasync(cachemoduleoptions",{"_index":1875,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachemoduleasyncoptions",{"_index":2613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cachemoduleoptions",{"_index":1870,"title":{},"body":{"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cachettl",{"_index":1839,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachettl(120",{"_index":1852,"title":{},"body":{"controllers/PostsController.html":{}}}],["callback",{"_index":2329,"title":{},"body":{"controllers/UsersController.html":{}}}],["callback(null",{"_index":2332,"title":{},"body":{"controllers/UsersController.html":{}}}],["callhandler",{"_index":1232,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["canactivate(context",{"_index":2636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cancelallscheduledemails",{"_index":1094,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cancelscheduleemail",{"_index":1070,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["carproperties",{"_index":453,"title":{"interfaces/CarProperties.html":{}},"body":{"interfaces/CarProperties.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"coverage.html":{}}}],["cascade",{"_index":2195,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":357,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["catch(exception",{"_index":1219,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["categories",{"_index":462,"title":{},"body":{"controllers/CategoriesController.html":{},"entities/Post.html":{}}}],["categories.controller",{"_index":538,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":507,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/entities/category.entity",{"_index":1798,"title":{},"body":{"entities/Post.html":{}}}],["categoriescontroller",{"_index":460,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":80,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriespermission",{"_index":2455,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["categoriesservice",{"_index":506,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":474,"title":{"entities/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Post.html":{},"coverage.html":{}}}],["category.dto",{"_index":509,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["category.dto.ts",{"_index":693,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:11",{"_index":2151,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:6",{"_index":694,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.posts",{"_index":1803,"title":{},"body":{"entities/Post.html":{}}}],["category.posts)@jointable",{"_index":1785,"title":{},"body":{"entities/Post.html":{}}}],["categoryid",{"_index":600,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["categorynotfoundexception",{"_index":561,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["categorynotfoundexception(id",{"_index":572,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoryrepository",{"_index":548,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["check",{"_index":1480,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["city",{"_index":10,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["cityname",{"_index":2633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":36,"title":{"classes/CategoryNotFoundException.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/ImagesUploadDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{}},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":593,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/ImagesUploadDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["click",{"_index":1031,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["clientid",{"_index":1451,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":1453,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clone",{"_index":2505,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":280,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":283,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":281,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":282,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authorizationmodule",{"_index":425,"title":{},"body":{"modules/AuthorizationModule.html":{},"overview.html":{}}}],["cluster_authorizationmodule_providers",{"_index":426,"title":{},"body":{"modules/AuthorizationModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":534,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":535,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":650,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_providers",{"_index":651,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule",{"_index":876,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule_exports",{"_index":878,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule_providers",{"_index":877,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule",{"_index":992,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_exports",{"_index":995,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_imports",{"_index":994,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["cluster_emailconfirmationmodule_providers",{"_index":993,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":1053,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":1054,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":1055,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":1088,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":1089,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":1090,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1275,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1277,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1276,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule",{"_index":1427,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule_imports",{"_index":1428,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["cluster_googleauthenticationmodule_providers",{"_index":1429,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule",{"_index":1622,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule_exports",{"_index":1623,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule_providers",{"_index":1624,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1666,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1668,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1667,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1865,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1866,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1867,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":2010,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":2011,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2359,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2362,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2361,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2360,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":2096,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto",{"_index":2084,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto.ts",{"_index":2065,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["code.dto.ts:6",{"_index":2067,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["codes.enum",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["codes.enum.ts",{"_index":2459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":20,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["column('text",{"_index":1794,"title":{},"body":{"entities/Post.html":{}}}],["column()@exclude",{"_index":2213,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":2208,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":1787,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["column({type",{"_index":845,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["column({unique",{"_index":2204,"title":{},"body":{"entities/User.html":{}}}],["command",{"_index":721,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{},"index.html":{}}}],["commandbus",{"_index":665,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["commandhandler",{"_index":722,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["commandhandler(createcommentcommand",{"_index":724,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandhandler(createproductcommand",{"_index":777,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["commandhandler(deleteproductcommand",{"_index":961,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["commandhandler(updateproductcommand",{"_index":2175,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["commands/handlers/create",{"_index":656,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ProductsModule.html":{}}}],["commands/handlers/delete",{"_index":2019,"title":{},"body":{"modules/ProductsModule.html":{}}}],["commands/handlers/update",{"_index":2018,"title":{},"body":{"modules/ProductsModule.html":{}}}],["commands/implementations/create",{"_index":674,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["commands/implementations/delete",{"_index":2029,"title":{},"body":{"injectables/ProductsService.html":{}}}],["commands/implementations/update",{"_index":2031,"title":{},"body":{"injectables/ProductsService.html":{}}}],["comment",{"_index":603,"title":{"entities/Comment.html":{}},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{},"coverage.html":{}}}],["comment.command",{"_index":675,"title":{},"body":{"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{}}}],["comment.command.ts",{"_index":696,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["comment.command.ts:4",{"_index":698,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:6",{"_index":700,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:7",{"_index":699,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.dto",{"_index":633,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{}}}],["comment.dto.ts",{"_index":702,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:11",{"_index":706,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:7",{"_index":703,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.handler",{"_index":657,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comment.handler.ts",{"_index":712,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["comment.handler.ts:10",{"_index":717,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.handler.ts:15",{"_index":720,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.post",{"_index":1790,"title":{},"body":{"entities/Post.html":{}}}],["comments",{"_index":618,"title":{},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{}}}],["comments.controller",{"_index":658,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.dto",{"_index":635,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comments.dto.ts",{"_index":1390,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["comments.dto.ts:8",{"_index":1392,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["comments.handler",{"_index":661,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.handler.ts",{"_index":1398,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["comments.handler.ts:10",{"_index":1399,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.handler.ts:15",{"_index":1400,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.query",{"_index":678,"title":{},"body":{"injectables/CommentsService.html":{},"classes/GetCommentsHandler.html":{}}}],["comments.query.ts",{"_index":1407,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["comments.query.ts:3",{"_index":1409,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.query.ts:5",{"_index":1411,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.query.ts:6",{"_index":1410,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.service",{"_index":632,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{}}}],["comments/entities/comment.entity",{"_index":1799,"title":{},"body":{"entities/Post.html":{}}}],["commentscontroller",{"_index":616,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentscount",{"_index":1404,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["commentsmodule",{"_index":81,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":718,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["commentsservice",{"_index":631,"title":{"injectables/CommentsService.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"coverage.html":{},"overview.html":{}}}],["complete",{"_index":2528,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":2548,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2568,"title":{},"body":{"index.html":{}}}],["config",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config/app.config",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["config/aws.config",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["config/bull.config",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["config/elastic",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{}}}],["config/email.config",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["config/google.config",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["config/redis.config",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["config/typeorm.config",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/SearchModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["configmodule.forroot",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('app.filedestination",{"_index":1612,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["configservice.get('database.host",{"_index":2132,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.name",{"_index":2137,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.password",{"_index":2136,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.port",{"_index":2133,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.username",{"_index":2135,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('elasticsearch.auth.password",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('elasticsearch.auth.username",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('elasticsearch.node",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('email.from",{"_index":1136,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.host",{"_index":1128,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.password",{"_index":1135,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.port",{"_index":1129,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.secure",{"_index":1131,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.user",{"_index":1133,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('jwt.accesstokenexpirationtime')}s",{"_index":312,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt.accesstokensecret",{"_index":309,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt.refreshtokensecret",{"_index":1554,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('node_env",{"_index":827,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["configservice.get('redis.host",{"_index":2611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('redis.port",{"_index":2612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('typeorm.logging",{"_index":2142,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('typeorm.synchronize",{"_index":2140,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configurable",{"_index":2542,"title":{},"body":{"index.html":{}}}],["configure",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":972,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirm(@body",{"_index":985,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(confirmationdata",{"_index":974,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":971,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirmation.controller",{"_index":998,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["confirmation.controller.ts",{"_index":970,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmation.controller.ts:16",{"_index":976,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.controller.ts:25",{"_index":981,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["confirmation.module.ts",{"_index":996,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["confirmation.service",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{}}}],["confirmation.service.ts",{"_index":1000,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation.service.ts:10",{"_index":1006,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:18",{"_index":1014,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:42",{"_index":1012,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:52",{"_index":1008,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:62",{"_index":1010,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation/dto/confirm",{"_index":685,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirmation/email",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation/verification",{"_index":2366,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["confirmationdata",{"_index":977,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmationdata.token",{"_index":987,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmed",{"_index":1042,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail",{"_index":1001,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":1007,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemaildto",{"_index":683,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["console.log('exception",{"_index":1223,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["consolelogger",{"_index":801,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":808,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":245,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{}}}],["constructor(@injectqueue('image",{"_index":1733,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["constructor(authenticationservice",{"_index":1646,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoryid",{"_index":598,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["constructor(categoryrepository",{"_index":546,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(commandbus",{"_index":664,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["constructor(comment",{"_index":697,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["constructor(commentsrepository",{"_index":716,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["constructor(configservice",{"_index":1116,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["constructor(context",{"_index":806,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(databasefilesrepository",{"_index":888,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["constructor(elasticsearchservice",{"_index":1881,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["constructor(emailservice",{"_index":1095,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(fileid",{"_index":1249,"title":{},"body":{"classes/FileNotFoundException.html":{},"classes/ProductNotFoundException.html":{}}}],["constructor(id",{"_index":950,"title":{},"body":{"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["constructor(jwtservice",{"_index":1004,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["constructor(localfilesrepository",{"_index":1629,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["constructor(logsrepository",{"_index":1690,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(ownerid",{"_index":1371,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["constructor(postid",{"_index":1408,"title":{},"body":{"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["constructor(postsrepository",{"_index":1931,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/DatabaseFilesController.html":{},"injectables/EmailService.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["constructor(product",{"_index":755,"title":{},"body":{"classes/CreateProductCommand.html":{}}}],["constructor(productid",{"_index":1386,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["constructor(productsrepository",{"_index":771,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["constructor(public",{"_index":952,"title":{},"body":{"classes/DeleteProductCommand.html":{},"classes/FindProductQuery.html":{}}}],["constructor(publicfilesrepository",{"_index":1292,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(userid",{"_index":2239,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(usersrepository",{"_index":434,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["constructor(usersservice",{"_index":321,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["consumer",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logsmiddleware).forroutes",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":606,"title":{},"body":{"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"controllers/DatabaseFilesController.html":{},"classes/EmailScheduleDto.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{}}}],["context",{"_index":732,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"entities/Log.html":{}}}],["context.gethandler",{"_index":1526,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":1527,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":39,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":2085,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('authentication",{"_index":243,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('authorization",{"_index":416,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["controller('categories",{"_index":510,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('comments",{"_index":640,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('database",{"_index":865,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["controller('email",{"_index":984,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{}}}],["controller('google",{"_index":1425,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('health",{"_index":1489,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('local",{"_index":1589,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["controller('optimize",{"_index":1731,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["controller('posts",{"_index":1848,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('products",{"_index":1999,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":2309,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{},"index.html":{}}}],["count",{"_index":1879,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["count(query",{"_index":1884,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["country",{"_index":11,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["countryname",{"_index":2634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":2367,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrs",{"_index":2525,"title":{},"body":{"index.html":{}}}],["cqrsmodule",{"_index":653,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ProductsModule.html":{}}}],["create",{"_index":463,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["create(@body",{"_index":516,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["create(category",{"_index":470,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["create(createcategorydto",{"_index":549,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["create(createproductdto",{"_index":1987,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createcategory",{"_index":2464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["createcategorydto",{"_index":471,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":619,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["createcomment(comment",{"_index":621,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["createcommentcommand",{"_index":673,"title":{"classes/CreateCommentCommand.html":{}},"body":{"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcommentcommand(comment",{"_index":682,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentdto",{"_index":622,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommenthandler",{"_index":655,"title":{"classes/CreateCommentHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createdatecolumn",{"_index":1655,"title":{},"body":{"entities/Log.html":{}}}],["createduser",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createlog",{"_index":1689,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlog(log",{"_index":1693,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlogdto",{"_index":729,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["createpost",{"_index":1814,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(post",{"_index":1820,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":738,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createproduct",{"_index":2472,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["createproductcommand",{"_index":750,"title":{"classes/CreateProductCommand.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createproductcommand(createproductdto",{"_index":2034,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":756,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproducthandler",{"_index":768,"title":{"classes/CreateProductHandler.html":{}},"body":{"classes/CreateProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["createreadstream",{"_index":1326,"title":{},"body":{"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{}}}],["createreadstream(join(process.cwd",{"_index":1591,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["createtransport",{"_index":1123,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":782,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["creationdate",{"_index":1653,"title":{},"body":{"entities/Log.html":{}}}],["credentials",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["cron",{"_index":1101,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"index.html":{}}}],["cronjob",{"_index":1100,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":1104,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["ctx._source.${key}='${value",{"_index":1926,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["currenthashedrefreshtoken",{"_index":2189,"title":{},"body":{"entities/User.html":{}}}],["custom",{"_index":1670,"title":{},"body":{"modules/LoggerModule.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["customize",{"_index":2556,"title":{},"body":{"index.html":{}}}],["customlogger",{"_index":798,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":842,"title":{},"body":{"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginatedResultDto.html":{},"controllers/UsersController.html":{}}}],["data')@apibody({description",{"_index":1716,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["database",{"_index":852,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/FilesService.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["database.config.ts",{"_index":2516,"title":{},"body":{"index.html":{}}}],["database/database",{"_index":2130,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["database/database.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgres",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["database_host",{"_index":1148,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_name",{"_index":1149,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_password",{"_index":1150,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_port",{"_index":1151,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_user",{"_index":1152,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["databaseconfig",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["databasefile",{"_index":838,"title":{"entities/DatabaseFile.html":{}},"body":{"entities/DatabaseFile.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["databasefilescontroller",{"_index":850,"title":{"controllers/DatabaseFilesController.html":{}},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"coverage.html":{}}}],["databasefilesmodule",{"_index":82,"title":{"modules/DatabaseFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databasefilesrepository",{"_index":890,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["databasefilesservice",{"_index":860,"title":{"injectables/DatabaseFilesService.html":{}},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"coverage.html":{},"overview.html":{}}}],["databaselogger",{"_index":907,"title":{"classes/DatabaseLogger.html":{}},"body":{"classes/DatabaseLogger.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{}}}],["databasemodule",{"_index":83,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":900,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{}}}],["date",{"_index":583,"title":{},"body":{"entities/Category.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"entities/Log.html":{}}}],["date(emailschedule.date",{"_index":1102,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.now",{"_index":1109,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["debug",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":810,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debugenabled",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["debugmode",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["decodeconfirmationtoken",{"_index":1002,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":1009,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"classes/ImagesUploadDto.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":21,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":493,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":526,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["delete(':id')@useguards(jwttwofactorguard",{"_index":1824,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(':id')@useguards(undefined)@httpcode(204",{"_index":1993,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete(':id')@useguards(undefined)@useguards(undefined",{"_index":484,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["delete('avatar",{"_index":2339,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('avatar')@apiokresponse({description",{"_index":2270,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('files/:id",{"_index":2357,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('files/:id')@apiparam({name",{"_index":2275,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar",{"_index":2248,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(@req",{"_index":2340,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(request",{"_index":2269,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecategory",{"_index":2466,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deleted",{"_index":477,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["deletedat",{"_index":582,"title":{},"body":{"entities/Category.html":{}}}],["deletedatecolumn",{"_index":584,"title":{},"body":{"entities/Category.html":{}}}],["deletefilewithqueryrunner",{"_index":885,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["deletefilewithqueryrunner(fileid",{"_index":891,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["deletelocalfilewithqueryrunner",{"_index":1627,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["deletelocalfilewithqueryrunner(fileid",{"_index":1632,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["deleteobject",{"_index":1337,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepost",{"_index":1815,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param",{"_index":1863,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1935,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(undefined",{"_index":1823,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteprivatefile",{"_index":1286,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{}}}],["deleteprivatefile(fileid",{"_index":1296,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteprivatefile(request",{"_index":2274,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteproduct",{"_index":2474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deleteproductcommand",{"_index":948,"title":{"classes/DeleteProductCommand.html":{}},"body":{"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["deleteproductcommand(id",{"_index":2039,"title":{},"body":{"injectables/ProductsService.html":{}}}],["deleteproducthandler",{"_index":953,"title":{"classes/DeleteProductHandler.html":{}},"body":{"classes/DeleteProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["deletepublicfile",{"_index":1287,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfile(fileid",{"_index":1302,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteresponse",{"_index":575,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/PostsService.html":{}}}],["deleteresponse.affected",{"_index":577,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/PostsService.html":{}}}],["dependencies",{"_index":75,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1299,"title":{},"body":{"injectables/FilesService.html":{},"classes/ImagesUploadDto.html":{},"controllers/OptimizeController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":1613,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["detailed",{"_index":2551,"title":{},"body":{"index.html":{}}}],["details",{"_index":2570,"title":{},"body":{"index.html":{}}}],["development",{"_index":2493,"title":{},"body":{"index.html":{}}}],["directly",{"_index":2233,"title":{},"body":{"entities/User.html":{}}}],["disable",{"_index":2547,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1505,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1483,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskstorage",{"_index":1605,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["disposition",{"_index":871,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":2138,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["docker",{"_index":2567,"title":{},"body":{"index.html":{}}}],["document",{"_index":1902,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["document.interface",{"_index":1899,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["document.interface.ts",{"_index":1810,"title":{},"body":{"interfaces/PostSearchDocument.html":{},"coverage.html":{}}}],["documentation",{"_index":2368,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentation:serve",{"_index":2555,"title":{},"body":{"index.html":{}}}],["donecallback",{"_index":2488,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto/confirm",{"_index":982,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["dto/create",{"_index":508,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dto/email",{"_index":1078,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["dto/file",{"_index":2305,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/get",{"_index":634,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["dto/images",{"_index":1729,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["dto/local",{"_index":1638,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["dto/login.dto",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/token",{"_index":1423,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["dto/two",{"_index":2083,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/update",{"_index":409,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{}}}],["e2e",{"_index":2581,"title":{},"body":{"index.html":{}}}],["each",{"_index":749,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePermissionsDto.html":{},"index.html":{}}}],["eager",{"_index":2194,"title":{},"body":{"entities/User.html":{}}}],["elastic/elasticsearch",{"_index":2410,"title":{},"body":{"dependencies.html":{}}}],["elastic/elasticsearch/lib/api/types",{"_index":1897,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["elasticsearch",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["elasticsearchmodule",{"_index":2055,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmodule.registerasync(elasticsearchmoduleoptions",{"_index":2057,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmoduleasyncoptions",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elasticsearchmoduleoptions",{"_index":2056,"title":{},"body":{"modules/SearchModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["elasticsearchservice",{"_index":1882,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["email",{"_index":327,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email.confirmationlink",{"_index":1026,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["email.dto",{"_index":983,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["email.dto.ts",{"_index":686,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:6",{"_index":688,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email.service",{"_index":1057,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":1017,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["email_confirmation_url",{"_index":1153,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_host",{"_index":1154,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_is_secure",{"_index":1155,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_password",{"_index":1156,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_port",{"_index":1157,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_user",{"_index":1158,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["emailconfig",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationcontroller",{"_index":969,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"coverage.html":{}}}],["emailconfirmationmodule",{"_index":84,"title":{"modules/EmailConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationservice",{"_index":227,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailmodule",{"_index":85,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emails",{"_index":2560,"title":{},"body":{"index.html":{}}}],["emailschedule",{"_index":1077,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":1107,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":1105,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":1106,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":1058,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailschedulingcontroller",{"_index":1067,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":86,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":1080,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":1005,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["enableimplicitconversion",{"_index":1209,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["endpoints",{"_index":2539,"title":{},"body":{"index.html":{}}}],["engine",{"_index":456,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/category.entity",{"_index":539,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["entities/comment.entity",{"_index":639,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["entities/database",{"_index":880,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{}}}],["entities/local",{"_index":1625,"title":{},"body":{"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{}}}],["entities/log.entity",{"_index":1671,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LogsService.html":{}}}],["entities/post.entity",{"_index":1872,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["entities/private",{"_index":1281,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["entities/product.entity",{"_index":775,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{}}}],["entities/public",{"_index":1283,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["entities/user.entity",{"_index":1259,"title":{},"body":{"classes/FileResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":1200,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/UpdatePermissionsDto.html":{},"entities/User.html":{}}}],["enumerations",{"_index":2454,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":2544,"title":{},"body":{"index.html":{}}}],["env.validation",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["environmentvariables",{"_index":1143,"title":{"classes/EnvironmentVariables.html":{}},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{}}}],["err",{"_index":1138,"title":{},"body":{"injectables/EmailService.html":{}}}],["err.message",{"_index":1142,"title":{},"body":{"injectables/EmailService.html":{}}}],["error",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["error(errors.tostring",{"_index":1215,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["error(message",{"_index":812,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error.name",{"_index":1049,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["error.status",{"_index":1474,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["error?.code",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["errors",{"_index":1210,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["errors.length",{"_index":1213,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["etag",{"_index":2321,"title":{},"body":{"controllers/UsersController.html":{}}}],["example",{"_index":2047,"title":{},"body":{"classes/RegisterDto.html":{},"index.html":{}}}],["examples",{"_index":2532,"title":{},"body":{"index.html":{}}}],["exceed",{"_index":1507,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":1222,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exceptions/category",{"_index":562,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exceptions/file",{"_index":959,"title":{},"body":{"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/UpdateProductHandler.html":{}}}],["exceptions/post",{"_index":1945,"title":{},"body":{"injectables/PostsService.html":{}}}],["exceptionsloggerfilter",{"_index":185,"title":{"classes/ExceptionsLoggerFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":2224,"title":{},"body":{"entities/User.html":{}}}],["excludenullinterceptor",{"_index":186,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["execute",{"_index":715,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["execute(command",{"_index":719,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["execute(undefined",{"_index":1348,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["executioncontext",{"_index":1230,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1300,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{}}}],["exist.'})@apiunauthorizedresponse({description",{"_index":2279,"title":{},"body":{"controllers/UsersController.html":{}}}],["exists",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{}}}],["expandvariables",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["expired",{"_index":1051,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["expiresin",{"_index":311,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["export",{"_index":35,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":291,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":864,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"classes/FileUploadDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1262,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/ImagesUploadDto.html":{},"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["express/multer/interfaces/multer",{"_index":1603,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["expression",{"_index":2046,"title":{},"body":{"classes/RegisterDto.html":{}}}],["extends",{"_index":596,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":1546,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":1551,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":304,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"index.html":{}}}],["factor.guard",{"_index":1841,"title":{},"body":{"controllers/PostsController.html":{}}}],["factor.guard.ts",{"_index":1568,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":302,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["factor.strategy.ts",{"_index":1569,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:13",{"_index":1570,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:28",{"_index":1571,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor/dto/two",{"_index":2064,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["factor/jwt",{"_index":301,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["factor/two",{"_index":303,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["failed",{"_index":1141,"title":{},"body":{"injectables/EmailService.html":{}}}],["false",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/EnvironmentVariables.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":2526,"title":{},"body":{"index.html":{}}}],["features/categories/categories.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["features/comments/comments.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["features/database",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["features/email",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["features/files/files.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["features/google",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["features/local",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["features/optimize/optimize.module",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["features/posts/posts.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["features/products/products.module",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["features/search/search.module",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["features/users/entities/user.entity",{"_index":443,"title":{},"body":{"injectables/AuthorizationService.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["features/users/users.module",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["features/users/users.service",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["fetch",{"_index":2286,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetched",{"_index":2282,"title":{},"body":{"controllers/UsersController.html":{}}}],["field",{"_index":2234,"title":{},"body":{"entities/User.html":{}}}],["fieldname",{"_index":1596,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["fields",{"_index":1885,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"index.html":{}}}],["file.buffer",{"_index":2345,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.dto",{"_index":1639,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["file.dto.ts",{"_index":1583,"title":{},"body":{"interfaces/LocalFileDto.html":{},"coverage.html":{}}}],["file.entity",{"_index":881,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["file.entity.ts",{"_index":841,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"coverage.html":{}}}],["file.entity.ts:10",{"_index":1972,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:12",{"_index":1580,"title":{},"body":{"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.entity.ts:13",{"_index":1974,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:14",{"_index":847,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["file.entity.ts:15",{"_index":1579,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:6",{"_index":849,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.entity.ts:7",{"_index":1971,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:9",{"_index":848,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.key",{"_index":1338,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.mimetype",{"_index":1593,"title":{},"body":{"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["file.mimetype.includes('image",{"_index":2330,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.originalname",{"_index":2338,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.owner",{"_index":1340,"title":{},"body":{"injectables/FilesService.html":{},"entities/User.html":{}}}],["file.owner.id",{"_index":1341,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.path",{"_index":1592,"title":{},"body":{"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["file.stream.pipe(response",{"_index":2354,"title":{},"body":{"controllers/UsersController.html":{}}}],["filedata",{"_index":1637,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["filefilter",{"_index":1597,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["fileid",{"_index":894,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"injectables/LocalFilesService.html":{},"classes/ProductNotFoundException.html":{}}}],["fileinfo",{"_index":1320,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinfo.key",{"_index":1325,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":1600,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["filemetadata",{"_index":2314,"title":{},"body":{"controllers/UsersController.html":{}}}],["filemetadata.id",{"_index":2318,"title":{},"body":{"controllers/UsersController.html":{}}}],["filemetadata.mimetype",{"_index":2320,"title":{},"body":{"controllers/UsersController.html":{}}}],["filename",{"_index":843,"title":{},"body":{"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/UsersController.html":{}}}],["filename=\"${file.filename",{"_index":873,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["filename=\"${filemetadata.filename",{"_index":2319,"title":{},"body":{"controllers/UsersController.html":{}}}],["filenotfoundexception",{"_index":1247,"title":{"classes/FileNotFoundException.html":{}},"body":{"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"coverage.html":{}}}],["filenotfoundexception(fileid",{"_index":1327,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileresponsedto",{"_index":1251,"title":{"classes/FileResponseDto.html":{}},"body":{"classes/FileResponseDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["fileresponsedto})@apinotfoundresponse({description",{"_index":2298,"title":{},"body":{"controllers/UsersController.html":{}}}],["files",{"_index":853,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"classes/FileUploadMultipleDto.html":{},"classes/ImagesUploadDto.html":{},"controllers/LocalFilesController.html":{},"controllers/OptimizeController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["files.controller",{"_index":882,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"modules/LocalFilesModule.html":{}}}],["files.controller.ts",{"_index":851,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"coverage.html":{}}}],["files.controller.ts:18",{"_index":857,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["files.controller.ts:19",{"_index":1585,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["files.interceptor",{"_index":2308,"title":{},"body":{"controllers/UsersController.html":{}}}],["files.interceptor.ts",{"_index":1595,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["files.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["files.module.ts",{"_index":879,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"modules/LocalFilesModule.html":{}}}],["files.service",{"_index":861,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{}}}],["files.service.ts",{"_index":884,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{}}}],["files.service.ts:13",{"_index":899,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:14",{"_index":1636,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:20",{"_index":1634,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:26",{"_index":893,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:32",{"_index":1633,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:36",{"_index":896,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:7",{"_index":889,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:8",{"_index":1630,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files/database",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["files/dto/local",{"_index":1582,"title":{},"body":{"interfaces/LocalFileDto.html":{},"coverage.html":{}}}],["files/entities/database",{"_index":840,"title":{},"body":{"entities/DatabaseFile.html":{},"coverage.html":{}}}],["files/entities/local",{"_index":1577,"title":{},"body":{"entities/LocalFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["files/entities/private",{"_index":2226,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{}}}],["files/entities/public",{"_index":2307,"title":{},"body":{"controllers/UsersController.html":{}}}],["files/files.module",{"_index":2365,"title":{},"body":{"modules/UsersModule.html":{}}}],["files/local",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filesdestination",{"_index":1611,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filesdestination}${options.path",{"_index":1614,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filesinterceptor",{"_index":1723,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["filesize",{"_index":2333,"title":{},"body":{"controllers/UsersController.html":{}}}],["filesmodule",{"_index":87,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1278,"title":{"injectables/FilesService.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["fileuploaddto",{"_index":1260,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["fileuploaddto})@apicreatedresponse({description",{"_index":2253,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileuploadmultipledto",{"_index":1268,"title":{"classes/FileUploadMultipleDto.html":{}},"body":{"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["filter",{"_index":1915,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["findall",{"_index":464,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["findall(ownerid",{"_index":2024,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findall(undefined",{"_index":1990,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findallproductshandler",{"_index":1343,"title":{"classes/FindAllProductsHandler.html":{}},"body":{"classes/FindAllProductsHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["findallproductsquery",{"_index":1349,"title":{"classes/FindAllProductsQuery.html":{}},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["findallproductsquery(ownerid",{"_index":2036,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findallwithdeleted",{"_index":465,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["findmanyoptions",{"_index":1357,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["findmanyoptions['where",{"_index":1361,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["findone",{"_index":466,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["findone(@param",{"_index":520,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["findone(@param('email",{"_index":2313,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@param('id",{"_index":2004,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findone(email",{"_index":2284,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":553,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findone(undefined",{"_index":479,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["findoneparams",{"_index":480,"title":{"classes/FindOneParams.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["findproducthandler",{"_index":1379,"title":{"classes/FindProductHandler.html":{}},"body":{"classes/FindProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["findproductquery",{"_index":1381,"title":{"classes/FindProductQuery.html":{}},"body":{"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["findproductquery(id",{"_index":2037,"title":{},"body":{"injectables/ProductsService.html":{}}}],["focus",{"_index":2510,"title":{},"body":{"index.html":{}}}],["format",{"_index":1264,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/ImagesUploadDto.html":{}}}],["found",{"_index":602,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":563,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{}}}],["found.exception.ts",{"_index":595,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:3",{"_index":599,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["framework",{"_index":2496,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1586,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["fuel",{"_index":458,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["function",{"_index":1204,"title":{},"body":{"classes/EnvironmentVariables.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{}}}],["functions",{"_index":2478,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatepresignedurl",{"_index":1288,"title":{},"body":{"injectables/FilesService.html":{}}}],["generatepresignedurl(key",{"_index":1304,"title":{},"body":{"injectables/FilesService.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":2102,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":2105,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generation",{"_index":2552,"title":{},"body":{"index.html":{}}}],["get('/with",{"_index":476,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["get(':email",{"_index":2312,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':email')@apiparam({name",{"_index":2285,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":481,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["get(':userid/avatar",{"_index":2294,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files",{"_index":2348,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files')@apiokresponse({description",{"_index":2290,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id",{"_index":2351,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id')@apiparam({name",{"_index":2297,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('image/:id",{"_index":1743,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["get('image/:id')@apiparam({name",{"_index":1710,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["get('paragraphs/:paragraph",{"_index":1832,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('refresh",{"_index":252,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@apiokresponse({description",{"_index":2281,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@healthcheck",{"_index":1481,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(key",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallprivatefiles",{"_index":2249,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(@req",{"_index":2349,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(request",{"_index":2289,"title":{},"body":{"controllers/UsersController.html":{}}}],["getauthenticateduser",{"_index":316,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":324,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getavatar",{"_index":2250,"title":{},"body":{"controllers/UsersController.html":{}}}],["getavatar(userid",{"_index":2293,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcomments",{"_index":620,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["getcomments(postid",{"_index":669,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getcomments(undefined",{"_index":624,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcommentsdto",{"_index":625,"title":{"classes/GetCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["getcommentshandler",{"_index":659,"title":{"classes/GetCommentsHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["getcommentsquery",{"_index":676,"title":{"classes/GetCommentsQuery.html":{}},"body":{"injectables/CommentsService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["getcommentsquery(postid",{"_index":680,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getcookiesforlogout",{"_index":317,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiesforuser",{"_index":1433,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiesforuser(user",{"_index":1440,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":318,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":329,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":319,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getdatabasefilebyid",{"_index":854,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["getdatabasefilebyid(id",{"_index":855,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["getfilebyid",{"_index":886,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{}}}],["getfilebyid(fileid",{"_index":895,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{}}}],["gethello",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["getjobresult",{"_index":1707,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(@res",{"_index":1744,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(response",{"_index":1709,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getloglevels",{"_index":823,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(environment",{"_index":830,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["getloglevels(isproduction",{"_index":2484,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getobject",{"_index":1322,"title":{},"body":{"injectables/FilesService.html":{}}}],["getormconfig",{"_index":2125,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["getormconfig(configservice",{"_index":2126,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["getpaginationprops",{"_index":1354,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getpaginationprops(paginationdto",{"_index":1360,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["getpostbyid",{"_index":1816,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(@param",{"_index":1856,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":1937,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid(undefined",{"_index":1826,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":1817,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(search",{"_index":1828,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithauthors",{"_index":1929,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostswithparagraph",{"_index":1818,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostswithparagraph(@param",{"_index":1858,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithparagraph(paragraph",{"_index":1831,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getprivatefile",{"_index":1289,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{}}}],["getprivatefile(fileid",{"_index":1307,"title":{},"body":{"injectables/FilesService.html":{}}}],["getprivatefile(request",{"_index":2296,"title":{},"body":{"controllers/UsersController.html":{}}}],["getproductdto",{"_index":1412,"title":{"classes/GetProductDto.html":{}},"body":{"classes/GetProductDto.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["getting",{"_index":2490,"title":{"index.html":{}},"body":{}}],["getuserdata",{"_index":1434,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserdata(token",{"_index":1442,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["given",{"_index":2278,"title":{},"body":{"controllers/UsersController.html":{}}}],["google",{"_index":1417,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"index.html":{}}}],["google.auth.oauth2(clientid",{"_index":1456,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google.oauth2('v2').userinfo",{"_index":1458,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleapis",{"_index":1449,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":1414,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"coverage.html":{}}}],["googleauthenticationmodule",{"_index":88,"title":{"modules/GoogleAuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleauthenticationservice",{"_index":1422,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleconfig",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":2589,"title":{},"body":{"modules.html":{}}}],["gt",{"_index":1917,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["handle",{"_index":1244,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["handleregistereduser",{"_index":1435,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["handleregistereduser(user",{"_index":1444,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["hash",{"_index":2631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["health",{"_index":1479,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":1516,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1484,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1485,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1477,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":89,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heap",{"_index":1498,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello",{"_index":1037,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["here:${url",{"_index":1032,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["hits",{"_index":1911,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["hits.hits.map((item",{"_index":1919,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["hits.total",{"_index":1918,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["host",{"_index":1127,"title":{},"body":{"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["html",{"_index":1036,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["httpcacheinterceptor",{"_index":1517,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["httpcode",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200",{"_index":262,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('login')@apibody({type",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(204",{"_index":420,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/ProductsController.html":{}}}],["httpexception",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httponly",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.bad_request",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["icommandhandler",{"_index":714,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["id",{"_index":12,"title":{},"body":{"entities/Address.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["id.dto",{"_index":710,"title":{},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{}}}],["id.dto.ts",{"_index":1702,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"classes/PaginationWithStartIdDto.html":{},"coverage.html":{}}}],["id.dto.ts:15",{"_index":1779,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{}}}],["id.dto.ts:21",{"_index":1777,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{}}}],["id.dto.ts:5",{"_index":1703,"title":{},"body":{"classes/ObjectWithIdDto.html":{}}}],["id.dto.ts:9",{"_index":1780,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{}}}],["identifier",{"_index":2369,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1965,"title":{},"body":{"injectables/PostsService.html":{}}}],["ids.length",{"_index":1968,"title":{},"body":{"injectables/PostsService.html":{}}}],["image",{"_index":874,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"modules/OptimizeModule.html":{},"controllers/UsersController.html":{}}}],["image.processor.js",{"_index":1759,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["image/png",{"_index":2091,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["imageprocessor",{"_index":2391,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["imageprocessor(job",{"_index":2487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["imagequeue",{"_index":1734,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["images",{"_index":1717,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["imagesuploaddto",{"_index":1530,"title":{"classes/ImagesUploadDto.html":{}},"body":{"classes/ImagesUploadDto.html":{},"controllers/OptimizeController.html":{},"coverage.html":{}}}],["imagesuploaddto})@apicreatedresponse({description",{"_index":1718,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["implementation",{"_index":2565,"title":{},"body":{"index.html":{}}}],["implementations/create",{"_index":723,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{}}}],["implementations/delete",{"_index":960,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["implementations/find",{"_index":1352,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{}}}],["implementations/get",{"_index":1401,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["implementations/update",{"_index":2174,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["implements",{"_index":713,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LogsMiddleware.html":{},"classes/UpdateProductHandler.html":{}}}],["import",{"_index":31,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"classes/TypeOrmConfig.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["in(ids",{"_index":1969,"title":{},"body":{"injectables/PostsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('post_authorid_index",{"_index":1802,"title":{},"body":{"entities/Post.html":{}}}],["index('post_authorid_index')@manytoone(undefined",{"_index":1783,"title":{},"body":{"entities/Post.html":{}}}],["indexpost",{"_index":1880,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["indexpost(post",{"_index":1887,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["industry",{"_index":2501,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["information",{"_index":1309,"title":{},"body":{"injectables/FilesService.html":{}}}],["inherited",{"_index":1394,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["inject",{"_index":306,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":313,"title":{"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["injectables",{"_index":314,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"overview.html":{}}}],["injectqueue",{"_index":1721,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectrepository",{"_index":442,"title":{},"body":{"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{}}}],["injectrepository(category",{"_index":564,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(comment",{"_index":725,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["injectrepository(databasefile",{"_index":901,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["injectrepository(localfile",{"_index":1640,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["injectrepository(log",{"_index":1696,"title":{},"body":{"injectables/LogsService.html":{}}}],["injectrepository(post",{"_index":1946,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(privatefile",{"_index":1319,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(product",{"_index":778,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["injectrepository(publicfile",{"_index":1318,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(user",{"_index":444,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["inline",{"_index":872,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["installation",{"_index":2572,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2574,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1228,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(...args",{"_index":1619,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["intercept(context",{"_index":1229,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interceptor",{"_index":1610,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/PostsController.html":{}}}],["interface",{"_index":446,"title":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/PostSearchDocument.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/PostSearchDocument.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":448,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/PostSearchDocument.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["internal",{"_index":1139,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FilesService.html":{}}}],["internalservererrorexception",{"_index":1122,"title":{},"body":{"injectables/EmailService.html":{}}}],["iqueryhandler",{"_index":1346,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["isarray",{"_index":2160,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["isboolean",{"_index":1196,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isboolean()@isnotempty",{"_index":1168,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isboolean()@isoptional",{"_index":1181,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["iscodevalid",{"_index":2093,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["iscompleted",{"_index":1747,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["iscreatinglogs",{"_index":1700,"title":{},"body":{"injectables/LogsService.html":{}}}],["isdatestring",{"_index":1063,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":786,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isemail()@apiproperty({default",{"_index":1661,"title":{},"body":{"classes/LogInDto.html":{}}}],["isemailconfirmed",{"_index":2190,"title":{},"body":{"entities/User.html":{}}}],["isenum",{"_index":1197,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdateRoleDto.html":{}}}],["isenum(environment",{"_index":1203,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isenum(environment)@isnotempty",{"_index":1170,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isenum(permission",{"_index":2161,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["isenum(role",{"_index":2181,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["isenum(role)@isnotempty",{"_index":2179,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["isglobal",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["islogging",{"_index":2141,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["isnotempty",{"_index":690,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoleDto.html":{}}}],["isnumber",{"_index":1198,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber()@isnotempty",{"_index":1176,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isnumber()@isoptional",{"_index":2149,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumberstring",{"_index":1377,"title":{},"body":{"classes/FindOneParams.html":{}}}],["isoptional",{"_index":748,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isoptional()@isstring()@isnotempty()@matches(/^\\+[1",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":1778,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1393,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{}}}],["ispasswordmatching",{"_index":389,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isproduction",{"_index":2485,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isregisteredwithgoogle",{"_index":2191,"title":{},"body":{"entities/User.html":{}}}],["issecondfactorauthenticated",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{}}}],["isstring",{"_index":689,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":687,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":2150,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":789,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7)@apiproperty({default",{"_index":1664,"title":{},"body":{"classes/LogInDto.html":{}}}],["isstring({each",{"_index":744,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":2103,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":2107,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":2192,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["item._source",{"_index":1920,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["items",{"_index":1272,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"classes/ImagesUploadDto.html":{},"injectables/PostsService.html":{}}}],["job",{"_index":1103,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"controllers/OptimizeController.html":{},"miscellaneous/functions.html":{}}}],["job.id",{"_index":1742,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.iscompleted",{"_index":1748,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.start",{"_index":1110,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.stop",{"_index":1112,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobid",{"_index":1741,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["john",{"_index":2630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":1587,"title":{},"body":{"controllers/LocalFilesController.html":{},"modules/OptimizeModule.html":{}}}],["join(__dirname",{"_index":1758,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["joincolumn",{"_index":2223,"title":{},"body":{"entities/User.html":{}}}],["joincolumn({name",{"_index":2198,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":1800,"title":{},"body":{"entities/Post.html":{}}}],["jsdoc",{"_index":2549,"title":{},"body":{"index.html":{}}}],["json.stringify(parameters",{"_index":944,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["jsonb",{"_index":1981,"title":{},"body":{"entities/Product.html":{}}}],["jwt",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.accesstokenexpirationtime",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt.config.ts",{"_index":2517,"title":{},"body":{"index.html":{}}}],["jwt.refreshtokenexpirationtime",{"_index":387,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt.strategy",{"_index":298,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwt.verificationtokenexpirationtime",{"_index":1023,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["jwt_access_token_expiration_time",{"_index":1159,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_access_token_secret",{"_index":1160,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_expiration_time",{"_index":2626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":1161,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_refresh_token_secret",{"_index":1162,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_verification_token_expiration_time",{"_index":1163,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_verification_token_secret",{"_index":1164,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwtauthenticationguard",{"_index":235,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtfromrequest",{"_index":1550,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":292,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.register",{"_index":999,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.registerasync",{"_index":305,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":238,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":284,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":322,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwtstrategy",{"_index":285,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1566,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{},"index.html":{}}}],["jwttwofactorstrategy",{"_index":286,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1254,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"injectables/PostsSearchService.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"miscellaneous/variables.html":{}}}],["level",{"_index":733,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{}}}],["levels",{"_index":825,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["levels.ts",{"_index":2399,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":2596,"title":{},"body":{"properties.html":{}}}],["licensed",{"_index":2585,"title":{},"body":{"index.html":{}}}],["limit",{"_index":646,"title":{},"body":{"controllers/CommentsController.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetProductDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["limits",{"_index":1598,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["link",{"_index":989,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":980,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["literal",{"_index":457,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["load",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/EnvironmentVariables.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["local.strategy",{"_index":299,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthenticationguard",{"_index":240,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localfile",{"_index":1575,"title":{"entities/LocalFile.html":{}},"body":{"entities/LocalFile.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["localfiledto",{"_index":1581,"title":{"interfaces/LocalFileDto.html":{}},"body":{"interfaces/LocalFileDto.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{}}}],["localfilescontroller",{"_index":1584,"title":{"controllers/LocalFilesController.html":{}},"body":{"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"coverage.html":{}}}],["localfilesinterceptor",{"_index":1609,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["localfilesinterceptor(options",{"_index":2489,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localfilesinterceptoroptions",{"_index":1594,"title":{"interfaces/LocalFilesInterceptorOptions.html":{}},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["localfilesmodule",{"_index":90,"title":{"modules/LocalFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LocalFilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["localfilesrepository",{"_index":1631,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["localfilesservice",{"_index":1588,"title":{"injectables/LocalFilesService.html":{}},"body":{"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy",{"_index":287,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":803,"title":{"entities/Log.html":{}},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log(level",{"_index":919,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["log(message",{"_index":815,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":1695,"title":{},"body":{"injectables/LogsService.html":{}}}],["log.dto.ts",{"_index":731,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:11",{"_index":736,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:5",{"_index":735,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:8",{"_index":737,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["logged",{"_index":2266,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger",{"_index":910,"title":{},"body":{"classes/DatabaseLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"classes/TypeOrmConfig.html":{},"index.html":{}}}],["logger('http",{"_index":1677,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["logger.filter.ts",{"_index":1217,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["logger.filter.ts:6",{"_index":1221,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["logger.service",{"_index":822,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":800,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["logger.ts:16",{"_index":926,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:27",{"_index":816,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:32",{"_index":928,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:37",{"_index":814,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:47",{"_index":820,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:48",{"_index":922,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:5",{"_index":918,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:52",{"_index":931,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:56",{"_index":920,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:57",{"_index":811,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:67",{"_index":818,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:7",{"_index":924,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:75",{"_index":933,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:9",{"_index":809,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger/logger.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":91,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":2146,"title":{},"body":{"classes/TypeOrmConfig.html":{},"index.html":{}}}],["login",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":205,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["loglevel",{"_index":2486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loglevels",{"_index":829,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":911,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logmigration(message",{"_index":921,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logout",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logquery",{"_index":912,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logquery(query",{"_index":923,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror",{"_index":913,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror(error",{"_index":925,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow",{"_index":914,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow(time",{"_index":927,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logs.service",{"_index":826,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{}}}],["logschemabuild",{"_index":915,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logschemabuild(message",{"_index":930,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logsmiddleware",{"_index":156,"title":{"injectables/LogsMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["logsrepository",{"_index":1692,"title":{},"body":{"injectables/LogsService.html":{}}}],["logsservice",{"_index":802,"title":{"injectables/LogsService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["look",{"_index":2550,"title":{},"body":{"index.html":{}}}],["mail",{"_index":1121,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":1119,"title":{},"body":{"injectables/EmailService.html":{}}}],["mailer",{"_index":1140,"title":{},"body":{"injectables/EmailService.html":{}}}],["maintaining",{"_index":2500,"title":{},"body":{"index.html":{}}}],["manager",{"_index":2426,"title":{},"body":{"dependencies.html":{}}}],["manytomany",{"_index":592,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytomany(undefined",{"_index":588,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytoone",{"_index":614,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["manytoone(undefined",{"_index":607,"title":{},"body":{"entities/Comment.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["map",{"_index":1237,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["match",{"_index":1922,"title":{},"body":{"injectables/PostsSearchService.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{}}}],["matches",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":38,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(1024",{"_index":2334,"title":{},"body":{"controllers/UsersController.html":{}}}],["max",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{},"modules/CategoriesModule.html":{}}}],["mb",{"_index":2336,"title":{},"body":{"controllers/UsersController.html":{}}}],["memory",{"_index":1496,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["memoryhealthindicator",{"_index":1486,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":734,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{}}}],["metadata",{"_index":2443,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1681,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["methods",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{}}}],["middlewareconsumer",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["mimetype",{"_index":1578,"title":{},"body":{"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/UsersController.html":{}}}],["min",{"_index":1770,"title":{},"body":{"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{}}}],["min(0",{"_index":1781,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{}}}],["min(1",{"_index":1771,"title":{},"body":{"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{}}}],["minlength",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":2453,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2584,"title":{},"body":{"index.html":{}}}],["mixin",{"_index":1599,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["mixin(interceptor",{"_index":1621,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["mixin(permissionguardmixin",{"_index":2639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mixin(roleguardmixin",{"_index":2642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mockedconfigservice",{"_index":2402,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":2404,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockeduser",{"_index":2379,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["module",{"_index":72,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":74,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1494,"title":{},"body":{"controllers/HealthController.html":{}}}],["multer",{"_index":1606,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions",{"_index":1602,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions['filefilter",{"_index":1607,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions['limits",{"_index":1608,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multi_match",{"_index":1908,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["multiple.dto.ts",{"_index":1270,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["multiple.dto.ts:5",{"_index":1274,"title":{},"body":{"classes/FileUploadMultipleDto.html":{}}}],["name",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name}!${text",{"_index":1038,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["necessary",{"_index":2235,"title":{},"body":{"entities/User.html":{}}}],["need",{"_index":2540,"title":{},"body":{"index.html":{}}}],["nest",{"_index":2495,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1235,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["nestjs/bull",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/common/services/console",{"_index":821,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/SearchModule.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":654,"title":{},"body":{"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":1895,"title":{},"body":{"injectables/PostsSearchService.html":{},"modules/SearchModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":293,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2170,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":295,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1601,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/OptimizeController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/ImagesUploadDto.html":{},"classes/LogInDto.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdatePermissionsDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1488,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":429,"title":{},"body":{"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductHandler.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProductsModule.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestlogger",{"_index":934,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestlogger('sql",{"_index":917,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestmiddleware",{"_index":1679,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["new",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newcomment",{"_index":726,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["newdocument",{"_index":1923,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["newfile",{"_index":902,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{},"injectables/LocalFilesService.html":{}}}],["newlog",{"_index":1697,"title":{},"body":{"injectables/LogsService.html":{}}}],["newpost",{"_index":1954,"title":{},"body":{"injectables/PostsService.html":{}}}],["newproduct",{"_index":779,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["next",{"_index":1231,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/LogsMiddleware.html":{}}}],["nextfunction",{"_index":1675,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["node",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nodemailer",{"_index":1124,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{},"index.html":{}}}],["nodemailer/lib/mailer",{"_index":1125,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":1114,"title":{},"body":{"injectables/EmailService.html":{}}}],["none",{"_index":2323,"title":{},"body":{"controllers/UsersController.html":{}}}],["notfoundexception",{"_index":597,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/DatabaseFilesService.html":{},"classes/FileNotFoundException.html":{},"injectables/LocalFilesService.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["notfoundexception('post",{"_index":1953,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":2573,"title":{},"body":{"index.html":{}}}],["null",{"_index":1242,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["null.interceptor.ts",{"_index":1227,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["null.interceptor.ts:13",{"_index":1233,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nullable",{"_index":1795,"title":{},"body":{"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":24,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"interfaces/CarProperties.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"injectables/CommentsService.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/EnvironmentVariables.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{}}}],["number(id",{"_index":2353,"title":{},"body":{"controllers/UsersController.html":{}}}],["number(paginationdto.limit",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(paginationdto.page",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numberofcylinders",{"_index":459,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["oauthclient",{"_index":1432,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":1047,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"miscellaneous/variables.html":{}}}],["object.entries(newdocument).reduce",{"_index":1925,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["object.keys(paginationdto).length",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectwithiddto",{"_index":704,"title":{"classes/ObjectWithIdDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["observable",{"_index":1234,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["off')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2078,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["offset",{"_index":1775,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["oldproduct",{"_index":962,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["oldproduct.owner",{"_index":964,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["oldproduct.owner.id",{"_index":965,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["on')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2081,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["one",{"_index":504,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["onetomany",{"_index":1801,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1789,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetoone",{"_index":32,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":28,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["open",{"_index":2530,"title":{},"body":{"index.html":{}}}],["optimize",{"_index":1706,"title":{},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{}}}],["optimize.controller",{"_index":1755,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimizecontroller",{"_index":1704,"title":{"controllers/OptimizeController.html":{}},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["optimizemodule",{"_index":92,"title":{"modules/OptimizeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules.html":{},"overview.html":{}}}],["optional",{"_index":14,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":807,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/EmailService.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/functions.html":{}}}],["options.fieldname",{"_index":1618,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.filefilter",{"_index":1615,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.interface",{"_index":1604,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.limits",{"_index":1616,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["originalurl",{"_index":1682,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["otpauthurl",{"_index":2088,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":2112,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":2511,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":753,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{}}}],["owner.files",{"_index":1973,"title":{},"body":{"entities/PrivateFile.html":{}}}],["owner.id",{"_index":966,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["owner.products",{"_index":1979,"title":{},"body":{"entities/Product.html":{}}}],["ownerid",{"_index":1297,"title":{},"body":{"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["package",{"_index":2409,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":2557,"title":{},"body":{"index.html":{}}}],["page",{"_index":644,"title":{},"body":{"controllers/CommentsController.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetProductDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"controllers/ProductsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paginatedresultdto",{"_index":636,"title":{"classes/PaginatedResultDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/PaginatedResultDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["pagination",{"_index":1355,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paginationdto",{"_index":670,"title":{"classes/PaginationDto.html":{}},"body":{"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginationdto:15",{"_index":1395,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["paginationdto:9",{"_index":1396,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["paginationwithstartiddto",{"_index":1772,"title":{"classes/PaginationWithStartIdDto.html":{}},"body":{"classes/PaginationWithStartIdDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["paragraph",{"_index":1834,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["paragraphs",{"_index":741,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"interfaces/PostSearchDocument.html":{},"injectables/PostsSearchService.html":{}}}],["param",{"_index":404,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":866,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/OptimizeController.html":{},"controllers/ProductsController.html":{}}}],["param('userid",{"_index":421,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["params.dto",{"_index":505,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["params.dto.ts",{"_index":1376,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["params.dto.ts:5",{"_index":1378,"title":{},"body":{"classes/FindOneParams.html":{}}}],["parseintpipe",{"_index":405,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["parser",{"_index":2431,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":2169,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":2172,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":2185,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":1134,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":1548,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":294,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":1545,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1563,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1555,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["passthrough",{"_index":867,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["password",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":406,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["patch(':id",{"_index":522,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["patch(':id')@useguards(jwttwofactorguard",{"_index":1837,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch(':id')@useguards(undefined)@useguards(undefined",{"_index":491,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["patch(':userid/permissions",{"_index":423,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["patch(':userid/permissions')@httpcode(204",{"_index":398,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["patch(':userid/role",{"_index":419,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["patch(':userid/role')@httpcode(204",{"_index":402,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["path",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/HealthController.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/OptimizeModule.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.email",{"_index":1048,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.interface",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.interface.ts",{"_index":2059,"title":{},"body":{"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["payload.issecondfactorauthenticated",{"_index":1572,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":1558,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["permission",{"_index":499,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"classes/UpdatePermissionsDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["permissionguard",{"_index":497,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionguardmixin",{"_index":2635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissions",{"_index":2154,"title":{},"body":{"classes/UpdatePermissionsDto.html":{},"entities/User.html":{},"index.html":{}}}],["permissions.dto",{"_index":410,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{}}}],["permissions.dto.ts",{"_index":2153,"title":{},"body":{"classes/UpdatePermissionsDto.html":{},"coverage.html":{}}}],["permissions.dto.ts:12",{"_index":2158,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["permission})@isenum(permission",{"_index":2156,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["pg",{"_index":2439,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":785,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["pipe(map((value",{"_index":1245,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipeqrcodestream",{"_index":2104,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":2109,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["plaintextpassword",{"_index":325,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["plaintoclass",{"_index":1195,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["plaintoclass(environmentvariables",{"_index":1208,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["pnpm",{"_index":2554,"title":{},"body":{"index.html":{}}}],["port",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":221,"title":{"entities/Post.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post(':id/restore",{"_index":530,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["post(':id/restore')@useguards(undefined)@useguards(undefined",{"_index":487,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["post('authenticate",{"_index":2099,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('authenticate')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2071,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('avatar",{"_index":2326,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@apiconsumes('multipart/form",{"_index":2252,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/amazons3",{"_index":2342,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/amazons3')@apiconsumes('multipart/form",{"_index":2259,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/postgres",{"_index":2346,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/postgres')@apiconsumes('multipart/form",{"_index":2262,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('confirm",{"_index":975,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('files",{"_index":2355,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('files')@apiconsumes('multipart/form",{"_index":2265,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('generate",{"_index":2086,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('generate')@useguards(jwtauthenticationguard",{"_index":2074,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('image",{"_index":1735,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('image')@apiconsumes('multipart/form",{"_index":1715,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('login",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('logout",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":216,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":979,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('schedule",{"_index":1083,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule')@useguards(jwtauthenticationguard",{"_index":1075,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule/cancel",{"_index":1086,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule/cancel')@useguards(jwtauthenticationguard",{"_index":1072,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('turn",{"_index":2077,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post()@useguards(jwttwofactorguard",{"_index":1821,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@useguards(undefined",{"_index":1988,"title":{},"body":{"controllers/ProductsController.html":{}}}],["post()@useguards(undefined)@useguards(undefined",{"_index":472,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["post.author",{"_index":2217,"title":{},"body":{"entities/User.html":{}}}],["post.author.id",{"_index":1906,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.categories",{"_index":589,"title":{},"body":{"entities/Category.html":{}}}],["post.comments",{"_index":612,"title":{},"body":{"entities/Comment.html":{}}}],["post.dto",{"_index":1842,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":740,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":2163,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:13",{"_index":746,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":2165,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:5",{"_index":743,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:6",{"_index":2164,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:9",{"_index":747,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.id",{"_index":1903,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.paragraphs",{"_index":1905,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.title",{"_index":1904,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["postgres",{"_index":2131,"title":{},"body":{"classes/TypeOrmConfig.html":{},"entities/User.html":{}}}],["postgreserrorcode",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["postgresql",{"_index":2533,"title":{},"body":{"index.html":{}}}],["postid",{"_index":643,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{}}}],["postnotfoundexception",{"_index":1804,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1949,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":569,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":1874,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1844,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/entities/post.entity",{"_index":591,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/User.html":{}}}],["postscontroller",{"_index":1812,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsearchdocument",{"_index":1807,"title":{"interfaces/PostSearchDocument.html":{}},"body":{"interfaces/PostSearchDocument.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postsmodule",{"_index":93,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1933,"title":{},"body":{"injectables/PostsService.html":{}}}],["postssearchservice",{"_index":1868,"title":{"injectables/PostsSearchService.html":{}},"body":{"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservice",{"_index":1843,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practices",{"_index":2504,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":25,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1976,"title":{},"body":{"entities/Product.html":{}}}],["private",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["privatefile",{"_index":1280,"title":{"entities/PrivateFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/PrivateFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["privatefilesrepository",{"_index":1293,"title":{},"body":{"injectables/FilesService.html":{}}}],["privatefile})@apiunauthorizedresponse({description",{"_index":2267,"title":{},"body":{"controllers/UsersController.html":{}}}],["process",{"_index":1492,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.typeorm_logging",{"_index":2147,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["process.env.typeorm_synchronize",{"_index":2145,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["processimage",{"_index":1708,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(@uploadedfiles",{"_index":1739,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(files",{"_index":1714,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processors",{"_index":1757,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["product",{"_index":754,"title":{"entities/Product.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["product.command",{"_index":776,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{}}}],["product.command.ts",{"_index":752,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{},"coverage.html":{}}}],["product.command.ts:3",{"_index":951,"title":{},"body":{"classes/DeleteProductCommand.html":{}}}],["product.command.ts:4",{"_index":757,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:6",{"_index":759,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:7",{"_index":758,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:8",{"_index":2167,"title":{},"body":{"classes/UpdateProductCommand.html":{}}}],["product.dto",{"_index":760,"title":{},"body":{"classes/CreateProductCommand.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":762,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":764,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:8",{"_index":763,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductDto.html":{}}}],["product.handler",{"_index":2014,"title":{},"body":{"modules/ProductsModule.html":{}}}],["product.handler.ts",{"_index":770,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["product.handler.ts:10",{"_index":772,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["product.handler.ts:12",{"_index":955,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["product.handler.ts:15",{"_index":774,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["product.handler.ts:17",{"_index":956,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["product.handler.ts:8",{"_index":1380,"title":{},"body":{"classes/FindProductHandler.html":{}}}],["product.owner",{"_index":2219,"title":{},"body":{"entities/User.html":{}}}],["product.query",{"_index":1382,"title":{},"body":{"classes/FindProductHandler.html":{},"injectables/ProductsService.html":{}}}],["product.query.ts",{"_index":1385,"title":{},"body":{"classes/FindProductQuery.html":{},"coverage.html":{}}}],["product.query.ts:1",{"_index":1387,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["product.query.ts:2",{"_index":1388,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["productid",{"_index":1384,"title":{},"body":{"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{}}}],["production",{"_index":831,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["productnotfoundexception",{"_index":958,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/DeleteProductHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["productnotfoundexception(id",{"_index":968,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["products",{"_index":1363,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"controllers/ProductsController.html":{},"entities/User.html":{}}}],["products.controller",{"_index":2013,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.handler",{"_index":2016,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.handler.ts",{"_index":1345,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"coverage.html":{}}}],["products.handler.ts:12",{"_index":1347,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["products.handler.ts:17",{"_index":1350,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["products.query",{"_index":1353,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"injectables/ProductsService.html":{}}}],["products.query.ts",{"_index":1370,"title":{},"body":{"classes/FindAllProductsQuery.html":{},"coverage.html":{}}}],["products.query.ts:3",{"_index":1372,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.query.ts:5",{"_index":1373,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.query.ts:6",{"_index":1374,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.service",{"_index":1998,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/entities/product.entity",{"_index":2227,"title":{},"body":{"entities/User.html":{}}}],["productscontroller",{"_index":1985,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productscount",{"_index":1364,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["productsmodule",{"_index":94,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productspermission",{"_index":2460,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["productsrepository",{"_index":773,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["productsservice",{"_index":1997,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["promise",{"_index":627,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/ImagesUploadDto.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"interfaces/PostSearchDocument.html":{},"injectables/PostsSearchService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayload.html":{},"properties.html":{}}}],["properties.interface",{"_index":766,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["properties.interface.ts",{"_index":450,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"coverage.html":{}}}],["props",{"_index":1356,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["props.ts",{"_index":2400,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":9,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"entities/DatabaseFile.html":{},"classes/DeleteProductCommand.html":{},"injectables/EmailConfirmationService.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsQuery.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"index.html":{}}}],["publicationyear",{"_index":452,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["publicfile",{"_index":1282,"title":{"entities/PublicFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["publicfilesrepository",{"_index":1295,"title":{},"body":{"injectables/FilesService.html":{}}}],["publicfile})@apiunauthorizedresponse({description",{"_index":2255,"title":{},"body":{"controllers/UsersController.html":{}}}],["publicly",{"_index":2232,"title":{},"body":{"entities/User.html":{}}}],["purpose",{"_index":2494,"title":{},"body":{"index.html":{}}}],["qrcode",{"_index":2114,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["queries/handlers/find",{"_index":2015,"title":{},"body":{"modules/ProductsModule.html":{}}}],["queries/handlers/get",{"_index":660,"title":{},"body":{"modules/CommentsModule.html":{}}}],["queries/implementations/find",{"_index":2032,"title":{},"body":{"injectables/ProductsService.html":{}}}],["queries/implementations/get",{"_index":677,"title":{},"body":{"injectables/CommentsService.html":{}}}],["query",{"_index":628,"title":{},"body":{"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductsController.html":{}}}],["query('search",{"_index":1853,"title":{},"body":{"controllers/PostsController.html":{}}}],["querybus",{"_index":666,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["queryhandler",{"_index":1351,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["queryhandler(findallproductsquery",{"_index":1358,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["queryhandler(findproductquery",{"_index":1383,"title":{},"body":{"classes/FindProductHandler.html":{}}}],["queryhandler(getcommentsquery",{"_index":1402,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryrunner",{"_index":892,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"injectables/LocalFilesService.html":{}}}],["queryrunner.manager.create(databasefile",{"_index":903,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner.manager.delete",{"_index":905,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner.manager.delete(localfile",{"_index":1644,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["queryrunner.manager.save(databasefile",{"_index":904,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner?.data?.iscreatinglogs",{"_index":935,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["queue",{"_index":1727,"title":{},"body":{"controllers/OptimizeController.html":{},"index.html":{}}}],["range",{"_index":1916,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["readable",{"_index":862,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/OptimizeController.html":{}}}],["readable.from(file.data",{"_index":869,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["readable.from(result",{"_index":1752,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readonly",{"_index":247,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"controllers/UsersController.html":{}}}],["recipient",{"_index":1061,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["record",{"_index":1206,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["recursively",{"_index":1240,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["recursivelystripnullvalues",{"_index":1239,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":1246,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/functions.html":{}}}],["redis",{"_index":2428,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["redisconfig",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":2614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":2442,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":239,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":1539,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":386,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":269,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshtokencookie",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["register",{"_index":197,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["register(@body",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(@res",{"_index":2087,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(registrationdata",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(response",{"_index":2073,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registeras",{"_index":2128,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["registeras('typeorm",{"_index":2144,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["registerdto",{"_index":215,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registeruser",{"_index":1436,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruser(token",{"_index":1446,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registrationdata",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["regular",{"_index":2045,"title":{},"body":{"classes/RegisterDto.html":{}}}],["relations",{"_index":568,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{}}}],["remove",{"_index":467,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(@param",{"_index":528,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["remove(@param('id",{"_index":2008,"title":{},"body":{"controllers/ProductsController.html":{}}}],["remove(id",{"_index":555,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(postid",{"_index":1889,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["remove(undefined",{"_index":483,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["repository",{"_index":435,"title":{},"body":{"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{},"index.html":{}}}],["req",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request._parsedurl.query",{"_index":1528,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["request.cookies?.refresh",{"_index":1556,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.headers['if",{"_index":2322,"title":{},"body":{"controllers/UsersController.html":{}}}],["request.res.setheader",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":256,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["request.user.id",{"_index":2101,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request?.cookies?.authentication",{"_index":1564,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":1552,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":199,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["required",{"_index":1711,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["res",{"_index":858,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["resendconfirmationlink",{"_index":973,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(@req",{"_index":990,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(request",{"_index":978,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(userid",{"_index":1011,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["reset",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":856,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["response.dto",{"_index":2306,"title":{},"body":{"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1253,"title":{},"body":{"classes/FileResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:12",{"_index":1256,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:14",{"_index":1257,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:6",{"_index":1258,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1255,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.on('finish",{"_index":1680,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["response.sendstatus(202",{"_index":1749,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.sendstatus(404",{"_index":1746,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.set",{"_index":870,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["response.setheader('content",{"_index":2090,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["response.status(304",{"_index":2324,"title":{},"body":{"controllers/UsersController.html":{}}}],["restorecategory",{"_index":2467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["restoredeleted",{"_index":468,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["restoredeleted(@param",{"_index":532,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["restoredeleted(id",{"_index":557,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["restoredeleted(undefined",{"_index":486,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["restoreresponse",{"_index":578,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["restoreresponse.affected",{"_index":580,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["result",{"_index":1750,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{}}}],["result.dto",{"_index":638,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["result.dto.ts",{"_index":1761,"title":{},"body":{"classes/PaginatedResultDto.html":{},"coverage.html":{}}}],["result.dto.ts:11",{"_index":1764,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:14",{"_index":1766,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:5",{"_index":1763,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:8",{"_index":1765,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.id",{"_index":1967,"title":{},"body":{"injectables/PostsService.html":{}}}],["results",{"_index":37,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.map((result",{"_index":1966,"title":{},"body":{"injectables/PostsService.html":{}}}],["return",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2445,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":412,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.dto",{"_index":411,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{}}}],["role.dto.ts",{"_index":2178,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:7",{"_index":2180,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["role.enum",{"_index":413,"title":{},"body":{"controllers/AuthorizationController.html":{},"classes/UpdateRoleDto.html":{}}}],["role.guard",{"_index":415,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["role.user",{"_index":2229,"title":{},"body":{"entities/User.html":{}}}],["roleguard",{"_index":414,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguardmixin",{"_index":2640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roles",{"_index":2563,"title":{},"body":{"index.html":{}}}],["rss",{"_index":1501,"title":{},"body":{"controllers/HealthController.html":{}}}],["run",{"_index":2553,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1236,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1238,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["s",{"_index":1024,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["s3",{"_index":1314,"title":{},"body":{"injectables/FilesService.html":{},"entities/User.html":{},"index.html":{}}}],["s3.getsignedurlpromise('getobject",{"_index":1328,"title":{},"body":{"injectables/FilesService.html":{}}}],["savedpost",{"_index":1956,"title":{},"body":{"injectables/PostsService.html":{}}}],["savelocalfiledata",{"_index":1628,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["savelocalfiledata(filedata",{"_index":1635,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["schedule.dto",{"_index":1079,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedule.dto.ts",{"_index":1060,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["schedule.dto.ts:13",{"_index":1062,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:16",{"_index":1064,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:5",{"_index":1065,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:9",{"_index":1066,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["scheduled",{"_index":2559,"title":{},"body":{"index.html":{}}}],["scheduleemail",{"_index":1071,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":1084,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":1074,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":1096,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling",{"_index":1069,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"index.html":{}}}],["scheduling.controller",{"_index":1092,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["scheduling.controller.ts",{"_index":1068,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["scheduling.controller.ts:16",{"_index":1076,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.controller.ts:22",{"_index":1073,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduling.module.ts",{"_index":1091,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["scheduling.service",{"_index":1081,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["scheduling.service.ts",{"_index":1093,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["scheduling.service.ts:14",{"_index":1099,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:33",{"_index":1098,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:8",{"_index":1097,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling/dto/email",{"_index":1059,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["scheduling/email",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["script",{"_index":1924,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["sdk",{"_index":1315,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["search",{"_index":1809,"title":{},"body":{"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["search(text",{"_index":1891,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.config",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{}}}],["search.config.ts",{"_index":2386,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["search.service",{"_index":1873,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["search.service.ts",{"_index":1878,"title":{},"body":{"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["search.service.ts:13",{"_index":1888,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:25",{"_index":1886,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:40",{"_index":1892,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:77",{"_index":1890,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:88",{"_index":1894,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:9",{"_index":1883,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search/search.module",{"_index":1871,"title":{},"body":{"modules/PostsModule.html":{}}}],["searchforposts",{"_index":1930,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchforposts(text",{"_index":1941,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchmodule",{"_index":95,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["secret",{"_index":308,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["secretorkey",{"_index":1553,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["secure",{"_index":1130,"title":{},"body":{"injectables/EmailService.html":{}}}],["segment",{"_index":2513,"title":{},"body":{"index.html":{}}}],["select",{"_index":1951,"title":{},"body":{"injectables/PostsService.html":{}}}],["sending",{"_index":2558,"title":{},"body":{"index.html":{}}}],["sendmail",{"_index":1115,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":1118,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendverificationlink",{"_index":1003,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sendverificationlink(undefined",{"_index":1013,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["separatecount",{"_index":1909,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["separated",{"_index":2512,"title":{},"body":{"index.html":{}}}],["serialization",{"_index":2523,"title":{},"body":{"index.html":{}}}],["service",{"_index":2561,"title":{},"body":{"index.html":{}}}],["set",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setup",{"_index":2499,"title":{},"body":{"index.html":{}}}],["sharedbullasyncconfiguration",{"_index":2610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign",{"_index":2628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":310,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["size",{"_index":1913,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["skip",{"_index":1366,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["skipmissingproperties",{"_index":1212,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["skippeditems",{"_index":1359,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"miscellaneous/variables.html":{}}}],["soft",{"_index":2536,"title":{},"body":{"index.html":{}}}],["something",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["space",{"_index":1510,"title":{},"body":{"controllers/HealthController.html":{}}}],["specific",{"_index":2538,"title":{},"body":{"index.html":{}}}],["specification",{"_index":2531,"title":{},"body":{"index.html":{}}}],["specify",{"_index":2546,"title":{},"body":{"index.html":{}}}],["src/.../bull.config.ts",{"_index":2601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../categoriespermission.enum.ts",{"_index":2456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.service.ts",{"_index":2604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../elastic",{"_index":2603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.validation.ts",{"_index":2457,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":2480,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../image.processor.ts",{"_index":2481,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.service.ts",{"_index":2605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../local",{"_index":2482,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permission.guard.ts",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../permission.type.ts",{"_index":2600,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../postgres",{"_index":2458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../productspermission.enum.ts",{"_index":2461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../recursively",{"_index":2483,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../redis.config.ts",{"_index":2602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":2462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.guard.ts",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../typeorm.config.ts",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.mock.ts",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:106",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:32",{"_index":201,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:39",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:48",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:58",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:82",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":289,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":315,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":323,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:41",{"_index":326,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:54",{"_index":331,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:68",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:83",{"_index":328,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:90",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":1660,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:17",{"_index":1665,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:9",{"_index":1663,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":2041,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:13",{"_index":2042,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:17",{"_index":2043,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:22",{"_index":2044,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:32",{"_index":2049,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/jwt",{"_index":1535,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts",{"_index":1559,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts:10",{"_index":1560,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:25",{"_index":1562,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/local",{"_index":1573,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts",{"_index":1645,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts:15",{"_index":1649,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/local.strategy.ts:8",{"_index":1647,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/request",{"_index":2052,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/tests/user.mock.ts",{"_index":2377,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/token",{"_index":2058,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/two",{"_index":1567,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/authorization",{"_index":2564,"title":{},"body":{"index.html":{}}}],["src/authorization/authorization.controller.ts",{"_index":392,"title":{},"body":{"controllers/AuthorizationController.html":{},"coverage.html":{}}}],["src/authorization/authorization.controller.ts:25",{"_index":403,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["src/authorization/authorization.controller.ts:34",{"_index":399,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["src/authorization/authorization.module.ts",{"_index":427,"title":{},"body":{"modules/AuthorizationModule.html":{}}}],["src/authorization/authorization.service.ts",{"_index":433,"title":{},"body":{"injectables/AuthorizationService.html":{},"coverage.html":{}}}],["src/authorization/authorization.service.ts:15",{"_index":441,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["src/authorization/authorization.service.ts:19",{"_index":439,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["src/authorization/authorization.service.ts:9",{"_index":436,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["src/authorization/dto/update",{"_index":2152,"title":{},"body":{"classes/UpdatePermissionsDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/authorization/permission.guard.ts",{"_index":2381,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authorization/role.enum.ts",{"_index":2475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/authorization/role.guard.ts",{"_index":2382,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authorization/types/permission.type.ts",{"_index":2383,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/config/bull.config.ts",{"_index":2384,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/elastic",{"_index":2385,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/redis.config.ts",{"_index":2387,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm.config.ts",{"_index":2123,"title":{},"body":{"classes/TypeOrmConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm.config.ts:9",{"_index":2127,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["src/database/database",{"_index":908,"title":{},"body":{"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":945,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgres",{"_index":2468,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/email",{"_index":2562,"title":{},"body":{"index.html":{}}}],["src/email/email.module.ts",{"_index":1056,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":1113,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:23",{"_index":1120,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":1117,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/env.validation.ts",{"_index":1144,"title":{},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/env.validation.ts:102",{"_index":1182,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:106",{"_index":1185,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:110",{"_index":1183,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:22",{"_index":1171,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:26",{"_index":1169,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:30",{"_index":1172,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:34",{"_index":1192,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:38",{"_index":1187,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:42",{"_index":1186,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:46",{"_index":1189,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:50",{"_index":1188,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:54",{"_index":1191,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:58",{"_index":1190,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:62",{"_index":1179,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:66",{"_index":1173,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:70",{"_index":1177,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:74",{"_index":1178,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:78",{"_index":1175,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:82",{"_index":1174,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:86",{"_index":1194,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:90",{"_index":1193,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:94",{"_index":1180,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:98",{"_index":1184,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/features/categories",{"_index":2537,"title":{},"body":{"index.html":{}}}],["src/features/categories/categories.controller.ts",{"_index":461,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/features/categories/categories.controller.ts:33",{"_index":473,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:38",{"_index":475,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:43",{"_index":478,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:48",{"_index":482,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:55",{"_index":492,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:62",{"_index":485,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:69",{"_index":488,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.module.ts",{"_index":536,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/features/categories/categories.service.ts",{"_index":545,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/features/categories/categories.service.ts:10",{"_index":547,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:16",{"_index":550,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:22",{"_index":551,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:28",{"_index":552,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:35",{"_index":554,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:48",{"_index":560,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:62",{"_index":556,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:69",{"_index":558,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/dto/create",{"_index":692,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/features/categories/dto/update",{"_index":2148,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/features/categories/entities/category.entity.ts",{"_index":581,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/features/categories/entities/category.entity.ts:13",{"_index":586,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:16",{"_index":587,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:19",{"_index":590,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:22",{"_index":585,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/enums/categoriespermission.enum.ts",{"_index":2463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/features/categories/exceptions/category",{"_index":594,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["src/features/comments",{"_index":2524,"title":{},"body":{"index.html":{}}}],["src/features/comments/commands/handlers/create",{"_index":711,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["src/features/comments/commands/implementations/create",{"_index":695,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["src/features/comments/comments.controller.ts",{"_index":617,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/features/comments/comments.controller.ts:27",{"_index":626,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/features/comments/comments.controller.ts:34",{"_index":623,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/features/comments/comments.module.ts",{"_index":652,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/features/comments/comments.service.ts",{"_index":663,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["src/features/comments/comments.service.ts:12",{"_index":667,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/comments.service.ts:15",{"_index":671,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/comments.service.ts:22",{"_index":668,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/dto/create",{"_index":701,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/features/comments/dto/get",{"_index":1389,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["src/features/comments/entities/comment.entity.ts",{"_index":604,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/features/comments/entities/comment.entity.ts:11",{"_index":610,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:14",{"_index":613,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:17",{"_index":609,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:8",{"_index":611,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/queries/handlers/get",{"_index":1397,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["src/features/comments/queries/implementations/get",{"_index":1406,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["src/features/database",{"_index":839,"title":{},"body":{"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"coverage.html":{},"index.html":{}}}],["src/features/email",{"_index":684,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"index.html":{}}}],["src/features/files/entities/private",{"_index":1970,"title":{},"body":{"entities/PrivateFile.html":{},"coverage.html":{}}}],["src/features/files/entities/public",{"_index":2040,"title":{},"body":{"entities/PublicFile.html":{},"coverage.html":{}}}],["src/features/files/exceptions/file",{"_index":1248,"title":{},"body":{"classes/FileNotFoundException.html":{},"coverage.html":{}}}],["src/features/files/files.module.ts",{"_index":1279,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/features/files/files.service.ts",{"_index":1285,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{},"index.html":{}}}],["src/features/files/files.service.ts:121",{"_index":1303,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:13",{"_index":1294,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:139",{"_index":1298,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:26",{"_index":1308,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:56",{"_index":1305,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:69",{"_index":1313,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:95",{"_index":1311,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/google",{"_index":1415,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{},"index.html":{}}}],["src/features/local",{"_index":1576,"title":{},"body":{"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/features/optimize",{"_index":2571,"title":{},"body":{"index.html":{}}}],["src/features/optimize/dto/images",{"_index":1531,"title":{},"body":{"classes/ImagesUploadDto.html":{},"coverage.html":{}}}],["src/features/optimize/image.processor.ts",{"_index":2390,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/features/optimize/optimize.controller.ts",{"_index":1705,"title":{},"body":{"controllers/OptimizeController.html":{},"coverage.html":{}}}],["src/features/optimize/optimize.controller.ts:39",{"_index":1720,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/features/optimize/optimize.controller.ts:56",{"_index":1713,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/features/optimize/optimize.module.ts",{"_index":1754,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["src/features/posts.module.ts",{"_index":2566,"title":{},"body":{"index.html":{}}}],["src/features/posts/dto/create",{"_index":739,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/features/posts/dto/update",{"_index":2162,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/features/posts/entities/post.entity.ts",{"_index":1782,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/features/posts/entities/post.entity.ts:18",{"_index":1793,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:21",{"_index":1797,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:24",{"_index":1792,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:27",{"_index":1796,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:30",{"_index":1788,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:34",{"_index":1784,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:38",{"_index":1786,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:41",{"_index":1791,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/exceptions/post",{"_index":1805,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/features/posts/posts",{"_index":1877,"title":{},"body":{"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["src/features/posts/posts.controller.ts",{"_index":1813,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/features/posts/posts.controller.ts:38",{"_index":1830,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:49",{"_index":1827,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:54",{"_index":1833,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:60",{"_index":1822,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:69",{"_index":1838,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:78",{"_index":1825,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.module.ts",{"_index":1869,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/features/posts/posts.service.ts",{"_index":1928,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/features/posts/posts.service.ts:12",{"_index":1932,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:18",{"_index":1939,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:24",{"_index":1938,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:37",{"_index":1940,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:48",{"_index":1934,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:58",{"_index":1944,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:73",{"_index":1936,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:81",{"_index":1942,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/types/post",{"_index":1808,"title":{},"body":{"interfaces/PostSearchDocument.html":{},"coverage.html":{}}}],["src/features/products",{"_index":2529,"title":{},"body":{"index.html":{}}}],["src/features/products/commands/handlers/create",{"_index":769,"title":{},"body":{"classes/CreateProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/handlers/delete",{"_index":954,"title":{},"body":{"classes/DeleteProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/handlers/update",{"_index":2173,"title":{},"body":{"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/create",{"_index":751,"title":{},"body":{"classes/CreateProductCommand.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/delete",{"_index":949,"title":{},"body":{"classes/DeleteProductCommand.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/update",{"_index":2166,"title":{},"body":{"classes/UpdateProductCommand.html":{},"coverage.html":{}}}],["src/features/products/dto/create",{"_index":761,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/features/products/dto/get",{"_index":1413,"title":{},"body":{"classes/GetProductDto.html":{},"coverage.html":{}}}],["src/features/products/dto/update",{"_index":2168,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/features/products/entities/product.entity.ts",{"_index":1975,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/features/products/entities/product.entity.ts:12",{"_index":1978,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:18",{"_index":1982,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:21",{"_index":1980,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:9",{"_index":1977,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/enums/productspermission.enum.ts",{"_index":2471,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/features/products/exceptions/file",{"_index":1983,"title":{},"body":{"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/features/products/products.controller.ts",{"_index":1986,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/features/products/products.controller.ts:35",{"_index":1989,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:44",{"_index":1991,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:51",{"_index":1992,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:56",{"_index":1996,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:68",{"_index":1994,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.module.ts",{"_index":2012,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/features/products/products.service.ts",{"_index":2021,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/features/products/products.service.ts:16",{"_index":2022,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:19",{"_index":2023,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:28",{"_index":2025,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:37",{"_index":2026,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:41",{"_index":2028,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:47",{"_index":2027,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/queries/handlers/find",{"_index":1344,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"coverage.html":{}}}],["src/features/products/queries/implementations/find",{"_index":1369,"title":{},"body":{"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"coverage.html":{}}}],["src/features/products/types/book",{"_index":449,"title":{},"body":{"interfaces/BookProperties.html":{},"coverage.html":{}}}],["src/features/products/types/car",{"_index":454,"title":{},"body":{"interfaces/CarProperties.html":{},"coverage.html":{}}}],["src/features/search.module.ts",{"_index":2569,"title":{},"body":{"index.html":{}}}],["src/features/search/search.module.ts",{"_index":2054,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/features/users/dto/create",{"_index":783,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/features/users/dto/file",{"_index":1252,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["src/features/users/dto/update",{"_index":2183,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/features/users/entities/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/features/users/entities/address.entity.ts:10",{"_index":27,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:13",{"_index":22,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:16",{"_index":23,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:19",{"_index":30,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:7",{"_index":26,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/user.entity",{"_index":430,"title":{},"body":{"modules/AuthorizationModule.html":{}}}],["src/features/users/entities/user.entity.ts",{"_index":2186,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/features/users/entities/user.entity.ts:101",{"_index":2222,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:104",{"_index":2211,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:107",{"_index":2210,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:21",{"_index":2207,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:24",{"_index":2205,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:27",{"_index":2209,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:34",{"_index":2221,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:42",{"_index":2215,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:45",{"_index":2212,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:48",{"_index":2216,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:55",{"_index":2197,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:59",{"_index":2214,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:63",{"_index":2203,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:66",{"_index":2218,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:87",{"_index":2200,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:91",{"_index":2201,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:94",{"_index":2206,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:97",{"_index":2220,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/exceptions/user",{"_index":2238,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/features/users/users.controller.ts",{"_index":2242,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["src/features/users/users.controller.ts:125",{"_index":2257,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:142",{"_index":2273,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:159",{"_index":2260,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:183",{"_index":2263,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:202",{"_index":2292,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:222",{"_index":2299,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:247",{"_index":2268,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:273",{"_index":2280,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:49",{"_index":2283,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:67",{"_index":2288,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:72",{"_index":2295,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.module.ts",{"_index":2363,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/features/users/users.service.ts",{"_index":2394,"title":{},"body":{"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":1478,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:21",{"_index":1482,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1514,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/logger/custom",{"_index":799,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/dto/create",{"_index":730,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/logger/entities/log.entity.ts",{"_index":1652,"title":{},"body":{"entities/Log.html":{},"coverage.html":{}}}],["src/logger/entities/log.entity.ts:11",{"_index":1657,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:14",{"_index":1654,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:17",{"_index":1659,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:20",{"_index":1658,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:23",{"_index":1656,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/logger.module.ts",{"_index":1669,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logs.service.ts",{"_index":1688,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logger/logs.service.ts:14",{"_index":1694,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logger/logs.service.ts:8",{"_index":1691,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":2396,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/find",{"_index":1375,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["src/utils/dto/object",{"_index":1701,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["src/utils/dto/paginated",{"_index":1760,"title":{},"body":{"classes/PaginatedResultDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination",{"_index":1773,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.dto.ts",{"_index":1767,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.dto.ts:15",{"_index":1768,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/utils/dto/pagination.dto.ts:9",{"_index":1769,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/utils/exceptions",{"_index":1216,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["src/utils/exclude",{"_index":1226,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/get",{"_index":2398,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/http",{"_index":1518,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/utils/logs.middleware.ts",{"_index":1673,"title":{},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["src/utils/logs.middleware.ts:6",{"_index":1678,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/logs.middleware.ts:8",{"_index":1676,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/mocks/config.service.ts",{"_index":2401,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mocks/jwt.service.ts",{"_index":2403,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/recursively",{"_index":2405,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stack",{"_index":813,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staging",{"_index":1201,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["standard",{"_index":2502,"title":{},"body":{"index.html":{}}}],["start",{"_index":1774,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{},"controllers/PostsController.html":{},"coverage.html":{},"index.html":{}}}],["start:dev",{"_index":2577,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2578,"title":{},"body":{"index.html":{}}}],["started",{"_index":2491,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2498,"title":{},"body":{"index.html":{}}}],["startid",{"_index":1776,"title":{},"body":{"classes/PaginationWithStartIdDto.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["statements",{"_index":2370,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":2124,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["statuscode",{"_index":1683,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["statusmessage",{"_index":1684,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["storage",{"_index":1506,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["store",{"_index":2231,"title":{},"body":{"entities/User.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["storing",{"_index":2236,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["strategy",{"_index":1547,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":863,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"controllers/OptimizeController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["stream.pipe(response",{"_index":1753,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["streamablefile",{"_index":859,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["streamablefile(file",{"_index":2325,"title":{},"body":{"controllers/UsersController.html":{}}}],["streamablefile(stream",{"_index":875,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["street",{"_index":13,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["streetname",{"_index":2632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":18,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/FindProductQuery.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["stringifyparameters",{"_index":916,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stringifyparameters(parameters",{"_index":932,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["string})@apiokresponse({description",{"_index":2276,"title":{},"body":{"controllers/UsersController.html":{}}}],["strip",{"_index":1241,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["subject",{"_index":1035,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{}}}],["successfully",{"_index":1737,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["successfully!'})@apinotfoundresponse({description",{"_index":2277,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully!'})@apiunauthorizedresponse({description",{"_index":2271,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully!'})@useinterceptors(undefined",{"_index":1719,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["super",{"_index":1549,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`category",{"_index":601,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["super(`file",{"_index":1250,"title":{},"body":{"classes/FileNotFoundException.html":{}}}],["super(`post",{"_index":1806,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["super(`product",{"_index":1984,"title":{},"body":{"classes/ProductNotFoundException.html":{}}}],["super(`user",{"_index":2240,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(context",{"_index":828,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.canactivate(context",{"_index":2637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super.catch(exception",{"_index":1225,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["super.debug.apply(this",{"_index":837,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":835,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":833,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.trackby(context",{"_index":1529,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["super.warn.apply(this",{"_index":836,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["superadmin",{"_index":2476,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["support",{"_index":2534,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supportemail",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["svg",{"_index":2587,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2448,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":2139,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["t",{"_index":1762,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["table",{"_index":2408,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2407,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2316,"title":{},"body":{"controllers/UsersController.html":{}}}],["take",{"_index":1367,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"index.html":{}}}],["terminusmodule",{"_index":1515,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1202,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covlicense",{"_index":2583,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2582,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":1662,"title":{},"body":{"classes/LogInDto.html":{}}}],["tests",{"_index":2580,"title":{},"body":{"index.html":{}}}],["text",{"_index":1028,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":1651,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken",{"_index":2100,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":260,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authorizationservice.updatepermission",{"_index":424,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["this.authorizationservice.updaterole(userid",{"_index":422,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["this.categoriesservice.create(category",{"_index":517,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findall",{"_index":518,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findallwithdeleted",{"_index":519,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findone(+id",{"_index":521,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.remove(+id",{"_index":529,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.restoredeleted(+id",{"_index":533,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.update(+id",{"_index":525,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryrepository.create(createcategorydto",{"_index":565,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.find",{"_index":567,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":571,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.restore(id",{"_index":579,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(category",{"_index":566,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.softdelete(id",{"_index":576,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.update(id",{"_index":573,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.commandbus.execute",{"_index":2033,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.commandbus.execute(new",{"_index":681,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["this.commentsrepository.create",{"_index":727,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsrepository.findandcount",{"_index":1405,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["this.commentsrepository.save(newcomment",{"_index":728,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsservice.createcomment(comment",{"_index":649,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.getcomments(postid",{"_index":648,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.configservice.get",{"_index":1022,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('app.debugmode",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.env",{"_index":63,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.filedestination",{"_index":2118,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.configservice.get('app.port",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.supportemail",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.url",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('aws.publicbucketname",{"_index":1324,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('email.from",{"_index":1034,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('google.auth.clientid",{"_index":1452,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('google.auth.clientsecret",{"_index":1454,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('jwt.accesstokenexpirationtime')}s",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.accesstokensecret",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.refreshtokenexpirationtime')}s",{"_index":385,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.refreshtokensecret",{"_index":384,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.verificationtokensecret",{"_index":1021,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.count(text",{"_index":1910,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.databasefilesrepository.findone",{"_index":906,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["this.databasefilesservice.getfilebyid(id",{"_index":868,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":1511,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchservice.count",{"_index":1907,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.deletebyquery",{"_index":1921,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.index",{"_index":1900,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.search",{"_index":1912,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.updatebyquery",{"_index":1927,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":988,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":986,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":991,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink(registrationdata",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emailschedulingservice.cancelallscheduledemails",{"_index":1087,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":1085,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":1033,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["this.fileinterceptor",{"_index":1617,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["this.fileinterceptor.intercept(...args",{"_index":1620,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["this.getcookiesforuser(user",{"_index":1465,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.getuserdata(token",{"_index":1467,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(tokendata.token",{"_index":1426,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.handleregistereduser(user",{"_index":1470,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.healthcheckservice.check",{"_index":1490,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.imagequeue.add('optimize",{"_index":1740,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.imagequeue.getjob(id",{"_index":1745,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.index",{"_index":1901,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.jwtservice.sign(payload",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":1045,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.localfilesrepository.create(filedata",{"_index":1641,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesrepository.findone",{"_index":1643,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesrepository.save(newfile",{"_index":1642,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesservice.getfilebyid(id",{"_index":1590,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["this.logger.debug(message",{"_index":942,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error",{"_index":938,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(message",{"_index":1686,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.log",{"_index":936,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.log(message",{"_index":941,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logger.warn",{"_index":940,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.warn(message",{"_index":943,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1698,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1699,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":832,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":834,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":1497,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":1503,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.nodemailertransport",{"_index":1126,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":1137,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.oauthclient",{"_index":1455,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.gettokeninfo(token",{"_index":1472,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.setcredentials",{"_index":1459,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.postsrepository.create",{"_index":1955,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1962,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":1947,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":1948,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.query",{"_index":1950,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":1957,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1959,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.indexpost(savedpost",{"_index":1958,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.remove(id",{"_index":1963,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.search",{"_index":1964,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.update(updatedpost",{"_index":1961,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(post",{"_index":1861,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(number(id",{"_index":1864,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(number(id",{"_index":1857,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostswithauthors",{"_index":1855,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostswithparagraph(paragraph",{"_index":1859,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.searchforposts(search",{"_index":1854,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(number(id",{"_index":1862,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.privatefilesrepository.create",{"_index":1334,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.delete(fileid",{"_index":1342,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.findone",{"_index":1321,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.save(newfile",{"_index":1335,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.productsrepository.create",{"_index":780,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["this.productsrepository.delete(id",{"_index":967,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["this.productsrepository.findandcount",{"_index":1365,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["this.productsrepository.findone",{"_index":963,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["this.productsrepository.save(newproduct",{"_index":781,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["this.productsrepository.update(id",{"_index":2176,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["this.productsservice.create(createproductdto",{"_index":2002,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findall(ownerid",{"_index":2003,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findone(id",{"_index":2005,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.remove(id",{"_index":2009,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.update(id",{"_index":2006,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.publicfilesrepository.create",{"_index":1330,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.delete(fileid",{"_index":1339,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.findone",{"_index":1336,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.save(newfile",{"_index":1333,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.querybus.execute",{"_index":2035,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.querybus.execute(new",{"_index":679,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["this.reflector.get",{"_index":1525,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.registeruser(token",{"_index":1476,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.schedulerregistry.addcronjob",{"_index":1108,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.schedulerregistry.getcronjobs().foreach((job",{"_index":1111,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.sendverificationlink(user",{"_index":1043,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.stringifyparameters",{"_index":939,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stringifyparameters(parameters",{"_index":937,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret",{"_index":2089,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":2094,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream",{"_index":2092,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":1491,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":1565,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":1557,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.update(id",{"_index":445,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["this.usersservice.addavatar(request.user.id",{"_index":2337,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addavatarinpgsql",{"_index":2347,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addavatarusingamazons3",{"_index":2344,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addprivatefile",{"_index":2356,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":355,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.createwithgoogle(email",{"_index":1469,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.deleteavatar(request.user.id",{"_index":2341,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteprivatefile(request.user.id",{"_index":2358,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallprivatefiles(request.user.id",{"_index":2350,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":2311,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getavatar(userid",{"_index":2315,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getbyid(userid",{"_index":1039,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.getprivatefile",{"_index":2352,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":1044,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":271,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":2119,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.usersservice.turnofftwofactorauthentication(request.user.id",{"_index":2098,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":2097,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thresholdpercent",{"_index":1512,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":2543,"title":{},"body":{"index.html":{}}}],["throw",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalFilesService.html":{},"injectables/PostsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateProductHandler.html":{}}}],["thrown",{"_index":1224,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["time",{"_index":929,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["title",{"_index":742,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"interfaces/PostSearchDocument.html":{},"injectables/PostsSearchService.html":{},"classes/UpdatePostDto.html":{}}}],["tofilestream",{"_index":2113,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":2122,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["token",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TokenVerificationDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"index.html":{}}}],["token.strategy",{"_index":297,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":1540,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":1542,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":1544,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token=${token",{"_index":1027,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokendata",{"_index":1421,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenexpirederror",{"_index":1050,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokeninfo",{"_index":1471,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokeninfo.email",{"_index":1473,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokenpayload",{"_index":349,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenverificationdto",{"_index":1419,"title":{"classes/TokenVerificationDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["totalcount",{"_index":1368,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/PaginatedResultDto.html":{}}}],["trackby",{"_index":1520,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1521,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transformer",{"_index":707,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/CategoriesService.html":{},"classes/CreatePostDto.html":{},"controllers/DatabaseFilesController.html":{},"classes/EnvironmentVariables.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"entities/Product.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdatePermissionsDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["true})@exclude",{"_index":2202,"title":{},"body":{"entities/User.html":{}}}],["true})@isnotempty",{"_index":2157,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["true})@isoptional",{"_index":745,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@joincolumn",{"_index":2196,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["ttl",{"_index":542,"title":{},"body":{"modules/CategoriesModule.html":{},"miscellaneous/variables.html":{}}}],["turnofftwofactorauthentication",{"_index":2069,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnofftwofactorauthentication(request",{"_index":2076,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication",{"_index":2070,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(request",{"_index":2080,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["two",{"_index":300,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"index.html":{}}}],["twofactorauthenticationcode",{"_index":2066,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":2063,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":290,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":2193,"title":{},"body":{"entities/User.html":{}}}],["twofactorauthenticationservice",{"_index":288,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":16,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchDocument.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isoptional",{"_index":1391,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["typealiases",{"_index":2598,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1046,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["typeorm",{"_index":33,"title":{},"body":{"entities/Address.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/LocalFile.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["typeorm.config.ts",{"_index":2518,"title":{},"body":{"index.html":{}}}],["typeorm_logging",{"_index":1165,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["typeorm_logging=true",{"_index":2545,"title":{},"body":{"index.html":{}}}],["typeorm_synchronize",{"_index":1166,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["typeormconfig",{"_index":133,"title":{"classes/TypeOrmConfig.html":{}},"body":{"modules/AppModule.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{}}}],["typeormconfig.getormconfig(configservice",{"_index":2143,"title":{},"body":{"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["typeormhealthindicator",{"_index":1487,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":909,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["typeormmodule",{"_index":428,"title":{},"body":{"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":540,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":662,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([databasefile",{"_index":883,"title":{},"body":{"modules/DatabaseFilesModule.html":{}}}],["typeormmodule.forfeature([localfile",{"_index":1626,"title":{},"body":{"modules/LocalFilesModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":1672,"title":{},"body":{"modules/LoggerModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1876,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":2020,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":1284,"title":{},"body":{"modules/FilesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":432,"title":{},"body":{"modules/AuthorizationModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(typeormmoduleoptions",{"_index":947,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":2129,"title":{},"body":{"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["typeormmoduleoptions",{"_index":946,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":2171,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/book",{"_index":765,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["types/car",{"_index":767,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["types/permission.type",{"_index":2159,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["types/post",{"_index":1898,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["typescript",{"_index":2497,"title":{},"body":{"index.html":{}}}],["ui",{"_index":2449,"title":{},"body":{"dependencies.html":{}}}],["uint8array",{"_index":844,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["unauthorized",{"_index":2327,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized.'})@useguards(jwtauthenticationguard",{"_index":2272,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized.'})@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":2256,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":957,"title":{},"body":{"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateProductHandler.html":{}}}],["unauthorizedexception('wrong",{"_index":2095,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["undefined",{"_index":1273,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImagesUploadDto.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["undefined})@apiunauthorizedresponse({description",{"_index":2291,"title":{},"body":{"controllers/UsersController.html":{}}}],["under",{"_index":2492,"title":{},"body":{"index.html":{}}}],["unique",{"_index":2228,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":2469,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":2579,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":2597,"title":{},"body":{"properties.html":{}}}],["update",{"_index":469,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["update(@param",{"_index":524,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["update(id",{"_index":559,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["update(post",{"_index":1893,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["update(undefined",{"_index":489,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategory",{"_index":2465,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updatecategorydto",{"_index":490,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedcategory",{"_index":574,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":1960,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatedproduct",{"_index":2177,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["updatepermission",{"_index":394,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{}}}],["updatepermission(id",{"_index":438,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["updatepermission(userid",{"_index":396,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["updatepermissionsdto",{"_index":397,"title":{"classes/UpdatePermissionsDto.html":{}},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"classes/UpdatePermissionsDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1819,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(id",{"_index":1943,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(undefined",{"_index":1835,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":1836,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateproduct",{"_index":2473,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updateproductcommand",{"_index":2030,"title":{"classes/UpdateProductCommand.html":{}},"body":{"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["updateproductcommand(id",{"_index":2038,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto",{"_index":1995,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproducthandler",{"_index":2017,"title":{"classes/UpdateProductHandler.html":{}},"body":{"modules/ProductsModule.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["updaterole",{"_index":395,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{}}}],["updaterole(id",{"_index":440,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["updaterole(userid",{"_index":400,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["updateroledto",{"_index":401,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":2182,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["upload",{"_index":1269,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"controllers/OptimizeController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["upload.dto",{"_index":1730,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["upload.dto.ts",{"_index":1261,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/ImagesUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:16",{"_index":1534,"title":{},"body":{"classes/ImagesUploadDto.html":{}}}],["upload.dto.ts:6",{"_index":1266,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploaddatabasefilewithqueryrunner",{"_index":887,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["uploaddatabasefilewithqueryrunner(databuffer",{"_index":897,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["uploaded",{"_index":1301,"title":{},"body":{"injectables/FilesService.html":{},"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":2300,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfiles",{"_index":1722,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["uploadprivatefile",{"_index":1290,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadprivatefile(databuffer",{"_index":1310,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile",{"_index":1291,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile(databuffer",{"_index":1312,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult",{"_index":1329,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.key",{"_index":1331,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.location",{"_index":1332,"title":{},"body":{"injectables/FilesService.html":{}}}],["url",{"_index":1025,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"entities/PublicFile.html":{}}}],["use",{"_index":1493,"title":{},"body":{"controllers/HealthController.html":{},"injectables/LogsMiddleware.html":{},"entities/User.html":{},"index.html":{}}}],["use(request",{"_index":1674,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["useclass",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1504,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":307,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('logout')@httpcode(200",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwttwofactorguard",{"_index":1860,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(localauthenticationguard",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(permissionguard(permission.createcategory",{"_index":514,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(permissionguard(permission.createproduct",{"_index":2001,"title":{},"body":{"controllers/ProductsController.html":{}}}],["useguards(permissionguard(permission.deletecategory",{"_index":527,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(permissionguard(permission.deleteproduct",{"_index":2007,"title":{},"body":{"controllers/ProductsController.html":{}}}],["useguards(permissionguard(permission.restorecategory",{"_index":531,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(permissionguard(permission.updatecategory",{"_index":523,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(roleguard(role.admin",{"_index":515,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(roleguard(role.superadmin",{"_index":418,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["useinterceptors",{"_index":494,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":512,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2343,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(filesinterceptor('files",{"_index":1738,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["useinterceptors(httpcacheinterceptor",{"_index":1850,"title":{},"body":{"controllers/PostsController.html":{}}}],["useinterceptors(httpcacheinterceptor)@cachekey('get_posts_cache_key')@cachettl(120)@get",{"_index":1829,"title":{},"body":{"controllers/PostsController.html":{}}}],["user",{"_index":15,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.address",{"_index":29,"title":{},"body":{"entities/Address.html":{}}}],["user.dto",{"_index":2184,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":784,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":787,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:16",{"_index":788,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":790,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":2117,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user.entity",{"_index":34,"title":{},"body":{"entities/Address.html":{}}}],["user.id",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.interface",{"_index":242,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["user.interface.ts",{"_index":2053,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user.isemailconfirmed",{"_index":1040,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.isregisteredwithgoogle",{"_index":1464,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.password",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.twofactorauthenticationsecret",{"_index":2121,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user?.permissions.includes(permission",{"_index":2638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user?.role",{"_index":2641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user@email.com",{"_index":2629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":1466,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userdata.name",{"_index":1468,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userid",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/EmailConfirmationService.html":{},"interfaces/TokenPayload.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{}}}],["userinfoclient",{"_index":1457,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinfoclient.get",{"_index":1462,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse",{"_index":1461,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse.data",{"_index":1463,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["username",{"_index":2134,"title":{},"body":{"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":1650,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernotfoundexception",{"_index":2237,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["users",{"_index":2243,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":2364,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":2301,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.services.ts",{"_index":2535,"title":{},"body":{"index.html":{}}}],["users/entities/user.entity",{"_index":615,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{}}}],["users/users.module",{"_index":997,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["users/users.service",{"_index":1018,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["userscontroller",{"_index":2241,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1541,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["usersmodule",{"_index":96,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":437,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["usersservice",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["user})@apinotfoundresponse({description",{"_index":2287,"title":{},"body":{"controllers/UsersController.html":{}}}],["utils/dto/find",{"_index":503,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["utils/dto/object",{"_index":709,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["utils/dto/paginated",{"_index":637,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["utils/dto/pagination",{"_index":1847,"title":{},"body":{"controllers/PostsController.html":{}}}],["utils/dto/pagination.dto",{"_index":672,"title":{},"body":{"injectables/CommentsService.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"injectables/ProductsService.html":{}}}],["utils/get",{"_index":824,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["utils/http",{"_index":1845,"title":{},"body":{"controllers/PostsController.html":{}}}],["utils/logs.middleware",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":1317,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["v4",{"_index":1316,"title":{},"body":{"injectables/FilesService.html":{}}}],["valid",{"_index":1712,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validate(config",{"_index":1205,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["validate(email",{"_index":1648,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1561,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(request",{"_index":1543,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validatedconfig",{"_index":1207,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validatenested",{"_index":708,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/PaginatedResultDto.html":{}}}],["validatenested()@type(undefined",{"_index":705,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["validatesync",{"_index":1199,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validatesync(validatedconfig",{"_index":1211,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validation",{"_index":2522,"title":{},"body":{"index.html":{}}}],["validationpipe",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":691,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationWithStartIdDto.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoleDto.html":{},"dependencies.html":{}}}],["value",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsSearchService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1243,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["values.ts",{"_index":2406,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["variable",{"_index":2378,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":54,"title":{"miscellaneous/variables.html":{}},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["verbose",{"_index":804,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":817,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verification",{"_index":1020,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["verification.dto",{"_index":1424,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["verification.dto.ts",{"_index":2061,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:6",{"_index":2062,"title":{},"body":{"classes/TokenVerificationDto.html":{}}}],["verificationtokenpayload",{"_index":1019,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verifypassword",{"_index":320,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/FilesService.html":{},"properties.html":{}}}],["version_neutral",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["void",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailSchedulingService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/LogsMiddleware.html":{}}}],["w/\"file",{"_index":2317,"title":{},"body":{"controllers/UsersController.html":{}}}],["warn",{"_index":805,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["warn(message",{"_index":819,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["watch",{"_index":2576,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":1029,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["went",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["where.owner",{"_index":1362,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["where.post",{"_index":1403,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["withdeleted",{"_index":570,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["without",{"_index":2507,"title":{},"body":{"index.html":{}}}],["worrying",{"_index":2508,"title":{},"body":{"index.html":{}}}],["writeresponsebase",{"_index":1896,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["wrong",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["yes",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["zoom",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                city\n                            \n                            \n                                    Public\n                                country\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                street\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Address {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public street: string;\n\n  @Column()\n  public city: string;\n\n  @Column()\n  public country: string;\n\n  @OneToOne(() => User, (user: User) => user.address)\n  public user?: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, VERSION_NEUTRAL } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller({\n  version: VERSION_NEUTRAL,\n})\nexport class AppController {\n  constructor(private configService: ConfigService) {}\n\n  @Get()\n  getHello(): string {\n    // * config variables\n    const port = this.configService.get('app.port');\n    const appUrl = this.configService.get('app.url');\n    const supportEmail = this.configService.get('app.supportEmail');\n    const appEnv = this.configService.get('app.env');\n    const debugMode = this.configService.get('app.debugMode');\n\n    const debugEnabled = debugMode ? 'yes' : 'no';\n\n    return (\n      '' +\n      (appUrl +\n        ':' +\n        port +\n        ' | ' +\n        supportEmail +\n        ' >> ' +\n        appEnv +\n        ' environment in debug mode: ' +\n        debugEnabled) +\n      ''\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthorizationModule\n\nAuthorizationModule\n\nAppModule -->\n\nAuthorizationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\nAppModule -->\n\nDatabaseFilesModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nAppModule -->\n\nLocalFilesModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            AuthorizationModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            DatabaseFilesModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            GoogleAuthenticationModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LocalFilesModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            OptimizeModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  MiddlewareConsumer,\n  Module,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { BullModule } from '@nestjs/bull';\nimport { AppController } from './app.controller';\nimport { DatabaseModule } from './database/database.module';\nimport { validate } from './env.validation';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { UsersModule } from './features/users/users.module';\nimport { PostsModule } from './features/posts/posts.module';\nimport { CategoriesModule } from './features/categories/categories.module';\nimport { FilesModule } from './features/files/files.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport typeormConfig from './config/typeorm.config';\nimport awsConfig from './config/aws.config';\nimport jwtConfig from './config/jwt.config';\nimport emailConfig from './config/email.config';\nimport googleConfig from './config/google.config';\nimport redisConfig from './config/redis.config';\nimport elasticSearch from './config/elastic-search.config';\nimport { CommentsModule } from './features/comments/comments.module';\nimport { ProductsModule } from './features/products/products.module';\nimport { DatabaseFilesModule } from './features/database-files/database-files.module';\nimport { LocalFilesModule } from './features/local-files/local-files.module';\nimport { LoggerModule } from './logger/logger.module';\nimport { LogsMiddleware } from './utils/logs.middleware';\nimport { HealthModule } from './health/health.module';\nimport { EmailModule } from './email/email.module';\nimport { EmailSchedulingModule } from './features/email-scheduling/email-scheduling.module';\nimport { EmailConfirmationModule } from './features/email-confirmation/email-confirmation.module';\nimport { GoogleAuthenticationModule } from './features/google-authentication/google-authentication.module';\nimport { AuthorizationModule } from './authorization/authorization.module';\nimport { SearchModule } from './features/search/search.module';\nimport { bullModuleOptions } from './config/bull.config';\nimport { OptimizeModule } from './features/optimize/optimize.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      cache: true,\n      expandVariables: true,\n      validate,\n      load: [\n        appConfig,\n        databaseConfig,\n        typeormConfig,\n        awsConfig,\n        jwtConfig,\n        emailConfig,\n        googleConfig,\n        redisConfig,\n        elasticSearch,\n      ],\n    }),\n    ScheduleModule.forRoot(),\n    DatabaseModule,\n    AuthenticationModule,\n    UsersModule,\n    PostsModule,\n    CategoriesModule,\n    FilesModule,\n    CommentsModule,\n    ProductsModule,\n    DatabaseFilesModule,\n    LocalFilesModule,\n    LoggerModule,\n    HealthModule,\n    EmailModule,\n    EmailSchedulingModule,\n    EmailConfirmationModule,\n    GoogleAuthenticationModule,\n    AuthorizationModule,\n    SearchModule,\n    BullModule.forRootAsync(bullModuleOptions),\n    OptimizeModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_PIPE,\n      useClass: ValidationPipe,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    },\n    // {\n    //   provide: APP_FILTER,\n    //   useClass: ExceptionsLoggerFilter,\n    // },\n    // {\n    //   provide: APP_INTERCEPTOR,\n    //   useClass: ExcludeNullInterceptor,\n    // },\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogsMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('login')@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('logout')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { EmailConfirmationService } from '../features/email-confirmation/email-confirmation.service';\nimport { UsersService } from '../features/users/users.service';\nimport { AuthenticationService } from './authentication.service';\nimport { LogInDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthenticationGuard } from './jwt-authentication.guard';\nimport { JwtRefreshGuard } from './jwt-refresh.guard';\nimport { LocalAuthenticationGuard } from './local-authentication.guard';\nimport { RequestWithUser } from './request-with-user.interface';\n\n@Controller('authentication')\n@ApiTags('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    return user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailConfirmationService.sendVerificationLink(registrationData);\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('login')\n  @ApiBody({ type: LogInDto })\n  async login(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return;\n    }\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('logout')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { EmailConfirmationModule } from '../features/email-confirmation/email-confirmation.module';\nimport { UsersModule } from '../features/users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { JwtRefreshTokenStrategy } from './jwt-refresh-token.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtTwoFactorStrategy } from './two-factor/jwt-two-factor.strategy';\nimport { TwoFactorAuthenticationController } from './two-factor/two-factor-authentication.controller';\nimport { TwoFactorAuthenticationService } from './two-factor/two-factor-authentication.service';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (ConfigService: ConfigService) => ({\n        secret: ConfigService.get('jwt.accessTokenSecret'),\n        signOptions: {\n          expiresIn: `${ConfigService.get('jwt.accessTokenExpirationTime')}s`,\n        },\n      }),\n    }),\n    EmailConfirmationModule,\n  ],\n  providers: [\n    AuthenticationService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshTokenStrategy,\n    TwoFactorAuthenticationService,\n    JwtTwoFactorStrategy,\n  ],\n  controllers: [AuthenticationController, TwoFactorAuthenticationController],\n  exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../features/users/users.service';\nimport * as bcrypt from 'bcrypt';\nimport { PostgresErrorCode } from '../database/postgres-error-codes.enum';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      return createdUser;\n    } catch (error: any) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtAccessToken(\n    userId: number,\n    isSecondFactorAuthenticated = false,\n  ) {\n    const payload: TokenPayload = { userId, isSecondFactorAuthenticated };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('jwt.accessTokenSecret'),\n      expiresIn: `${this.configService.get('jwt.accessTokenExpirationTime')}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'jwt.accessTokenExpirationTime',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('jwt.refreshTokenSecret'),\n      expiresIn: `${this.configService.get('jwt.refreshTokenExpirationTime')}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'jwt.refreshTokenExpirationTime',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizationController.html":{"url":"controllers/AuthorizationController.html","title":"controller - AuthorizationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization/authorization.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authorization\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                updatePermission\n                            \n                            \n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        updatePermission\n                        \n                    \n                \n            \n            \n                \nupdatePermission(userId: number, updatePermissionsDto: UpdatePermissionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':userId/permissions')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/authorization/authorization.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionsDto\n                                    \n                                                UpdatePermissionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRole\n                        \n                    \n                \n            \n            \n                \nupdateRole(userId: number, updateRoleDto: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':userId/role')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/authorization/authorization.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  Param,\n  ParseIntPipe,\n  Patch,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthorizationService } from './authorization.service';\nimport { UpdatePermissionsDto } from './dto/update-permissions.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { Role } from './role.enum';\nimport { RoleGuard } from './role.guard';\n\n@Controller('authorization')\n@ApiTags('authorization')\n@UseGuards(RoleGuard(Role.SuperAdmin))\nexport class AuthorizationController {\n  constructor(private readonly authorizationService: AuthorizationService) {}\n\n  @Patch(':userId/role')\n  @HttpCode(204)\n  updateRole(\n    @Param('userId', ParseIntPipe) userId: number,\n    @Body() updateRoleDto: UpdateRoleDto,\n  ) {\n    return this.authorizationService.updateRole(userId, updateRoleDto);\n  }\n\n  @Patch(':userId/permissions')\n  @HttpCode(204)\n  updatePermission(\n    @Param('userId', ParseIntPipe) userId: number,\n    @Body() updatePermissionsDto: UpdatePermissionsDto,\n  ) {\n    return this.authorizationService.updatePermission(\n      userId,\n      updatePermissionsDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthorizationModule.html":{"url":"modules/AuthorizationModule.html","title":"module - AuthorizationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthorizationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthorizationModule\n\n\n\ncluster_AuthorizationModule_providers\n\n\n\n\nAuthorizationService\n\nAuthorizationService\n\n\n\nAuthorizationModule\n\nAuthorizationModule\n\nAuthorizationModule -->\n\nAuthorizationService->AuthorizationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authorization/authorization.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthorizationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'src/features/users/entities/user.entity';\nimport { AuthorizationController } from './authorization.controller';\nimport { AuthorizationService } from './authorization.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [AuthorizationController],\n  providers: [AuthorizationService],\n})\nexport class AuthorizationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizationService.html":{"url":"injectables/AuthorizationService.html","title":"injectable - AuthorizationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization/authorization.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                updatePermission\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/authorization/authorization.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePermission\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePermission(id: number, updatePermissionsDto: UpdatePermissionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization/authorization.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionsDto\n                                    \n                                                UpdatePermissionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, updateRoleDto: UpdateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization/authorization.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../features/users/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { UpdatePermissionsDto } from './dto/update-permissions.dto';\n\n@Injectable()\nexport class AuthorizationService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async updateRole(id: number, updateRoleDto: UpdateRoleDto) {\n    await this.usersRepository.update(id, updateRoleDto);\n  }\n\n  async updatePermission(\n    id: number,\n    updatePermissionsDto: UpdatePermissionsDto,\n  ) {\n    await this.usersRepository.update(id, updatePermissionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookProperties.html":{"url":"interfaces/BookProperties.html","title":"interface - BookProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/types/book-properties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authors\n                                        \n                                \n                                \n                                        \n                                            publicationYear\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicationYear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicationYear:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookProperties {\n  authors: string[];\n  publicationYear: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarProperties.html":{"url":"interfaces/CarProperties.html","title":"interface - CarProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/types/car-properties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brand\n                                        \n                                \n                                \n                                        \n                                            engine\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brand\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brand:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        engine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        engine:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CarProperties {\n  brand: string;\n  engine: {\n    fuel: string;\n    numberOfCylinders: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllWithDeleted\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                restoreDeleted\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(category: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllWithDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllWithDeleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/with-deleted')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restoreDeleted\n                        \n                    \n                \n            \n            \n                \nrestoreDeleted(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/restore')@UseGuards(undefined)@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(undefined: FindOneParams, category: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(undefined)@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UseGuards,\n  CacheInterceptor,\n} from '@nestjs/common';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { PermissionGuard } from '../../authorization/permission.guard';\nimport { Permission } from '../../authorization/types/permission.type';\nimport { Role } from '../../authorization/role.enum';\nimport { RoleGuard } from '../../authorization/role.guard';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport { CategoriesService } from './categories.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('categories')\n@ApiTags('categories')\n@UseInterceptors(CacheInterceptor)\n@ApiExtraModels(FindOneParams)\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  @Post()\n  @UseGuards(PermissionGuard(Permission.CreateCategory))\n  @UseGuards(RoleGuard(Role.Admin))\n  create(@Body() category: CreateCategoryDto) {\n    return this.categoriesService.create(category);\n  }\n\n  @Get()\n  findAll() {\n    return this.categoriesService.findAll();\n  }\n\n  @Get('/with-deleted')\n  findAllWithDeleted() {\n    return this.categoriesService.findAllWithDeleted();\n  }\n\n  @Get(':id')\n  findOne(@Param() { id }: FindOneParams) {\n    return this.categoriesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  @UseGuards(PermissionGuard(Permission.UpdateCategory))\n  @UseGuards(RoleGuard(Role.Admin))\n  update(@Param() { id }: FindOneParams, @Body() category: UpdateCategoryDto) {\n    return this.categoriesService.update(+id, category);\n  }\n\n  @Delete(':id')\n  @UseGuards(PermissionGuard(Permission.DeleteCategory))\n  @UseGuards(RoleGuard(Role.Admin))\n  remove(@Param() { id }: FindOneParams) {\n    return this.categoriesService.remove(+id);\n  }\n\n  @Post(':id/restore')\n  @UseGuards(PermissionGuard(Permission.RestoreCategory))\n  @UseGuards(RoleGuard(Role.Admin))\n  restoreDeleted(@Param() { id }: FindOneParams) {\n    return this.categoriesService.restoreDeleted(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CategoriesController } from './categories.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from './entities/category.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Category]),\n    CacheModule.register({\n      ttl: 120,\n      max: 100,\n    }),\n  ],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllWithDeleted\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                restoreDeleted\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/categories/categories.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllWithDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllWithDeleted()\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        restoreDeleted\n                        \n                    \n                \n            \n            \n                \n                    \n                    restoreDeleted(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, category: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\nimport { CategoryNotFoundException } from './exceptions/category-not-found.exception';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto) {\n    const category = await this.categoryRepository.create(createCategoryDto);\n    await this.categoryRepository.save(category);\n    return category;\n  }\n\n  findAll() {\n    return this.categoryRepository.find({\n      relations: ['posts'],\n    });\n  }\n\n  findAllWithDeleted() {\n    return this.categoryRepository.find({\n      relations: ['posts'],\n      withDeleted: true,\n    });\n  }\n\n  async findOne(id: number) {\n    const category = await this.categoryRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['posts'],\n    });\n    if (category) {\n      return category;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async update(id: number, category: UpdateCategoryDto) {\n    await this.categoryRepository.update(id, category);\n    const updatedCategory = await this.categoryRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['posts'],\n    });\n    if (updatedCategory) {\n      return updatedCategory;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.categoryRepository.softDelete(id);\n    if (!deleteResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n\n  async restoreDeleted(id: number) {\n    const restoreResponse = await this.categoryRepository.restore(id);\n    if (!restoreResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deletedAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.categories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from '../../posts/entities/post.entity';\nimport {\n  Column,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Category {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories)\n  public posts: Post[];\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/exceptions/category-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/categories/exceptions/category-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class CategoryNotFoundException extends NotFoundException {\n  constructor(categoryId: number) {\n    super(`Category with id ${categoryId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from '../../posts/entities/post.entity';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class Comment {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => Post, (post: Post) => post.comments)\n  public post: Post;\n\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/comments/comments.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(undefined: GetCommentsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/comments/comments.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { CommentsService } from './comments.service';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { GetCommentsDto } from './dto/get-comments.dto';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { Comment } from './entities/comment.entity';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\n\n@Controller('comments')\n@ApiTags('comments')\n@ApiExtraModels(PaginatedResultDto)\n@UseGuards(JwtAuthenticationGuard)\nexport class CommentsController {\n  constructor(private readonly commentsService: CommentsService) {}\n\n  @Get()\n  async getComments(\n    @Query() { postId, page = 1, limit = 20 }: GetCommentsDto,\n  ): Promise> {\n    return this.commentsService.getComments(postId, { page, limit });\n  }\n\n  @Post()\n  async createComment(\n    @Body() comment: CreateCommentDto,\n    @Req() request: RequestWithUser,\n  ) {\n    const user = request.user;\n    return this.commentsService.createComment(comment, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\n\nCommentsService\n\nCommentsService\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CreateCommentHandler } from './commands/handlers/create-comment.handler';\nimport { CommentsController } from './comments.controller';\nimport { CommentsService } from './comments.service';\nimport { Comment } from './entities/comment.entity';\nimport { GetCommentsHandler } from './queries/handlers/get-comments.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment]), CqrsModule],\n  controllers: [CommentsController],\n  providers: [CommentsService, CreateCommentHandler, GetCommentsHandler],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/comments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commandBus: CommandBus, queryBus: QueryBus)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/comments.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commandBus\n                                                  \n                                                        \n                                                                    CommandBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBus\n                                                  \n                                                        \n                                                                    QueryBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, author: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/comments.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(postId: number, paginationDto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/comments.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paginationDto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { PaginationDto } from '../../utils/dto/pagination.dto';\nimport { User } from '../users/entities/user.entity';\nimport { CreateCommentCommand } from './commands/implementations/create-comment.command';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { GetCommentsQuery } from './queries/implementations/get-comments.query';\nimport { Comment } from './entities/comment.entity';\n\n@Injectable()\nexport class CommentsService {\n  constructor(private commandBus: CommandBus, private queryBus: QueryBus) {}\n\n  async getComments(\n    postId: number,\n    paginationDto: PaginationDto,\n  ): Promise> {\n    return this.queryBus.execute(new GetCommentsQuery(postId, paginationDto));\n  }\n\n  async createComment(comment: CreateCommentDto, author: User) {\n    return this.commandBus.execute(new CreateCommentCommand(comment, author));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-confirmation/dto/confirm-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-confirmation/dto/confirm-email.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/create-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentCommand.html":{"url":"classes/CreateCommentCommand.html","title":"class - CreateCommentCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/commands/implementations/create-comment.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                author\n                            \n                            \n                                    Public\n                                    Readonly\n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(comment: CreateCommentDto, author: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        comment\n                                                  \n                                                        \n                                                                        CreateCommentDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        author\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateCommentDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { CreateCommentDto } from '../../dto/create-comment.dto';\n\nexport class CreateCommentCommand {\n  constructor(\n    public readonly comment: CreateCommentDto,\n    public readonly author: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/create-comment.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ObjectWithIdDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/create-comment.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { ObjectWithIdDto } from '../../../utils/dto/object-with-id.dto';\nexport class CreateCommentDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithIdDto)\n  post: ObjectWithIdDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentHandler.html":{"url":"classes/CreateCommentHandler.html","title":"class - CreateCommentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/commands/handlers/create-comment.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/commands/handlers/create-comment.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateCommentCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/commands/handlers/create-comment.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateCommentCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCommentCommand } from '../implementations/create-comment.command';\nimport { Comment } from '../../entities/comment.entity';\n\n@CommandHandler(CreateCommentCommand)\nexport class CreateCommentHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Comment) private commentsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateCommentCommand): Promise {\n    const { comment, author } = command;\n    const newComment = await this.commentsRepository.create({\n      ...comment,\n      author,\n    });\n    await this.commentsRepository.save(newComment);\n    return newComment;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/dto/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                level\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class CreateLogDto {\n  @IsString()\n  context: string;\n\n  @IsString()\n  message: string;\n\n  @IsString()\n  level: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\nexport class CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString({ each: true })\n  @IsOptional()\n  paragraphs: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductCommand.html":{"url":"classes/CreateProductCommand.html","title":"class - CreateProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/create-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                product\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(product: CreateProductDto, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        product\n                                                  \n                                                        \n                                                                        CreateProductDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateProductDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { CreateProductDto } from '../../dto/create-product.dto';\n\nexport class CreateProductCommand {\n  constructor(\n    public readonly product: CreateProductDto,\n    public readonly owner: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/create-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/create-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { BookProperties } from '../types/book-properties.interface';\nimport { CarProperties } from '../types/car-properties.interface';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsOptional()\n  properties?: CarProperties | BookProperties;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductHandler.html":{"url":"classes/CreateProductHandler.html","title":"class - CreateProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/create-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/create-product.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/create-product.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { CreateProductCommand } from '../implementations/create-product.command';\n\n@CommandHandler(CreateProductCommand)\nexport class CreateProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateProductCommand): Promise {\n    const { product, owner } = command;\n    const newProduct = await this.productsRepository.create({\n      ...product,\n      owner,\n    });\n    await this.productsRepository.save(newProduct);\n    return newProduct;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n  IsOptional,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/custom-logger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, context?: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogsService\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/custom-logger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from '@nestjs/common';\nimport { ConsoleLoggerOptions } from '@nestjs/common/services/console-logger.service';\nimport { ConfigService } from '@nestjs/config';\nimport { getLogLevels } from '../utils/get-log-levels';\nimport { LogsService } from './logs.service';\n\n@Injectable()\nexport class CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogsService;\n\n  constructor(\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogsService,\n  ) {\n    const environment = configService.get('NODE_ENV');\n\n    super(context, {\n      ...options,\n      logLevels: getLogLevels(environment === 'production'),\n    });\n\n    this.logsService = logsService;\n  }\n\n  log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'log',\n    });\n  }\n\n  error(message: string, context?: string, stack?: string) {\n    super.error.apply(this, [message, context, stack]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DatabaseFile.html":{"url":"entities/DatabaseFile.html","title":"entity - DatabaseFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DatabaseFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/entities/database-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                filename\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Uint8Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'bytea'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class DatabaseFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public filename: string;\n\n  @Column({\n    type: 'bytea',\n  })\n  public data: Uint8Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DatabaseFilesController.html":{"url":"controllers/DatabaseFilesController.html","title":"controller - DatabaseFilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DatabaseFilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/database-files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                database-files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDatabaseFileById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatabaseFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatabaseFileById(id: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/database-files/database-files.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Res,\n  StreamableFile,\n} from '@nestjs/common';\nimport { DatabaseFilesService } from './database-files.service';\nimport { Readable } from 'stream';\nimport { Response } from 'express';\n\n@Controller('database-files')\nexport class DatabaseFilesController {\n  constructor(private readonly databaseFilesService: DatabaseFilesService) {}\n\n  @Get(':id')\n  async getDatabaseFileById(\n    @Param('id', ParseIntPipe) id: number,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const file = await this.databaseFilesService.getFileById(id);\n\n    const stream = Readable.from(file.data);\n\n    response.set({\n      'Content-Disposition': `inline; filename=\"${file.filename}\"`,\n      'Content-Type': 'image',\n    });\n\n    return new StreamableFile(stream);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseFilesModule.html":{"url":"modules/DatabaseFilesModule.html","title":"module - DatabaseFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DatabaseFilesModule\n\n\n\ncluster_DatabaseFilesModule_providers\n\n\n\ncluster_DatabaseFilesModule_exports\n\n\n\n\nDatabaseFilesService \n\nDatabaseFilesService \n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\nDatabaseFilesService  -->\n\nDatabaseFilesModule->DatabaseFilesService \n\n\n\n\n\nDatabaseFilesService\n\nDatabaseFilesService\n\nDatabaseFilesModule -->\n\nDatabaseFilesService->DatabaseFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/database-files/database-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseFilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DatabaseFilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseFilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DatabaseFilesService } from './database-files.service';\nimport { DatabaseFile } from './entities/database-file.entity';\nimport { DatabaseFilesController } from './database-files.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DatabaseFile]), ConfigModule],\n  providers: [DatabaseFilesService],\n  exports: [DatabaseFilesService],\n  controllers: [DatabaseFilesController],\n})\nexport class DatabaseFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseFilesService.html":{"url":"injectables/DatabaseFilesService.html","title":"injectable - DatabaseFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/database-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFileWithQueryRunner\n                            \n                            \n                                    Async\n                                getFileById\n                            \n                            \n                                    Async\n                                uploadDatabaseFileWithQueryRunner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseFilesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/database-files/database-files.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileById(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadDatabaseFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadDatabaseFileWithQueryRunner(dataBuffer: Buffer, filename: string, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { DatabaseFile } from './entities/database-file.entity';\n\n@Injectable()\nexport class DatabaseFilesService {\n  constructor(\n    @InjectRepository(DatabaseFile)\n    private databaseFilesRepository: Repository,\n  ) {}\n\n  async uploadDatabaseFileWithQueryRunner(\n    dataBuffer: Buffer,\n    filename: string,\n    queryRunner: QueryRunner,\n  ) {\n    const newFile = await queryRunner.manager.create(DatabaseFile, {\n      filename,\n      data: dataBuffer,\n    });\n    await queryRunner.manager.save(DatabaseFile, newFile);\n    return newFile;\n  }\n\n  async deleteFileWithQueryRunner(fileId: number, queryRunner: QueryRunner) {\n    const deleteResponse = await queryRunner.manager.delete(\n      DatabaseFile,\n      fileId,\n    );\n    if (!deleteResponse.affected) {\n      throw new NotFoundException();\n    }\n  }\n\n  async getFileById(fileId: number) {\n    const file = await this.databaseFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n    });\n    if (!file) {\n      throw new NotFoundException();\n    }\n    return file;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLogger.html":{"url":"classes/DatabaseLogger.html","title":"class - DatabaseLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database-logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger('SQL')\n                    \n                \n                    \n                        \n                                Defined in src/database/database-logger.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from 'typeorm';\nimport { Logger as NestLogger } from '@nestjs/common';\n\nexport class DatabaseLogger implements TypeOrmLogger {\n  private readonly logger = new NestLogger('SQL');\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)}`,\n    );\n  }\n\n  logQueryError(\n    error: string,\n    query: string,\n    parameters?: unknown[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${error}`,\n    );\n  }\n\n  logQuerySlow(\n    time: number,\n    query: string,\n    parameters?: unknown[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.warn(\n      `Time: ${time} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${query}`,\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.log(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.log(message);\n  }\n\n  log(\n    level: 'log' | 'info' | 'warn',\n    message: string,\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    if (level === 'log') {\n      return this.logger.log(message);\n    }\n    if (level === 'info') {\n      return this.logger.debug(message);\n    }\n    if (level === 'warn') {\n      return this.logger.warn(message);\n    }\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return '';\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeormModuleOptions } from '../config/typeorm.config';\n\n@Module({\n  imports: [TypeOrmModule.forRootAsync(typeormModuleOptions)],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteProductCommand.html":{"url":"classes/DeleteProductCommand.html","title":"class - DeleteProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/delete-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\n\nexport class DeleteProductCommand {\n  constructor(public readonly id: string, public readonly owner: User) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteProductHandler.html":{"url":"classes/DeleteProductHandler.html","title":"class - DeleteProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/delete-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/delete-product.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: DeleteProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/delete-product.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                DeleteProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { ProductNotFoundException } from '../../exceptions/file-not-found.exception';\nimport { DeleteProductCommand } from '../implementations/delete-product.command';\n\n@CommandHandler(DeleteProductCommand)\nexport class DeleteProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: DeleteProductCommand): Promise {\n    const { id, owner } = command;\n    const oldProduct = await this.productsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['owner'],\n    });\n    if (oldProduct) {\n      if (oldProduct.owner && oldProduct.owner.id === owner.id) {\n        const deleteResponse = await this.productsRepository.delete(id);\n        if (!deleteResponse.affected) {\n          throw new ProductNotFoundException(id);\n        }\n        return;\n      } else {\n        throw new UnauthorizedException();\n      }\n    }\n    throw new ProductNotFoundException(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-confirmation/email-confirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { ConfirmEmailDto } from './dto/confirm-email.dto';\nimport { EmailConfirmationService } from './email-confirmation.service';\n\n@Controller('email-confirmation')\n@ApiTags('authentication')\nexport class EmailConfirmationController {\n  constructor(\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: ConfirmEmailDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      confirmationData.token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationModule.html":{"url":"modules/EmailConfirmationModule.html","title":"module - EmailConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/email-confirmation/email-confirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { EmailModule } from '../../email/email.module';\nimport { UsersModule } from '../users/users.module';\nimport { EmailConfirmationController } from './email-confirmation.controller';\nimport { EmailConfirmationService } from './email-confirmation.service';\n\n@Module({\n  imports: [ConfigModule, EmailModule, JwtModule.register({}), UsersModule],\n  controllers: [EmailConfirmationController],\n  providers: [EmailConfirmationService],\n  exports: [EmailConfirmationService],\n})\nexport class EmailConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-confirmation/email-confirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/features/email-confirmation/email-confirmation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(undefined: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { RegisterDto } from '../../authentication/dto/register.dto';\nimport { EmailService } from '../../email/email.service';\nimport { UsersService } from '../users/users.service';\nimport { VerificationTokenPayload } from './verification-token-payload.interface';\n\n@Injectable()\nexport class EmailConfirmationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  public sendVerificationLink({ email, name }: RegisterDto) {\n    const payload: VerificationTokenPayload = { email };\n\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('jwt.verificationTokenSecret'),\n      expiresIn: `${this.configService.get(\n        'jwt.verificationTokenExpirationTime',\n      )}s`,\n    });\n\n    const url = `${this.configService.get(\n      'email.confirmationLink',\n    )}?token=${token}`;\n\n    const text = `Welcome to the application. To confirm the email address, click here:${url}`;\n\n    return this.emailService.sendMail({\n      from: this.configService.get('email.from'),\n      to: email,\n      subject: 'Email confirmation',\n      html: `Hello ${name}!${text}`,\n    });\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.usersService.getById(userId);\n\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n\n    await this.sendVerificationLink(user);\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('jwt.verificationTokenSecret'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n\n      throw new BadRequestException();\n    } catch (error: any) {\n      if (error.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailService } from './email.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-scheduling/dto/email-schedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-scheduling/dto/email-schedule.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-scheduling/dto/email-schedule.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-scheduling/dto/email-schedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-scheduling/dto/email-schedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail()\n  recipient: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-scheduling/email-scheduling.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cancelScheduleEmail\n                            \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        cancelScheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelScheduleEmail()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule/cancel')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/email-scheduling/email-scheduling.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/email-scheduling/email-scheduling.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { EmailScheduleDto } from './dto/email-schedule.dto';\nimport { EmailSchedulingService } from './email-scheduling.service';\n\n@Controller('email-scheduling')\n@ApiTags('email-scheduling')\nexport class EmailSchedulingController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('schedule')\n  @UseGuards(JwtAuthenticationGuard)\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n\n  @Post('schedule/cancel')\n  @UseGuards(JwtAuthenticationGuard)\n  async cancelScheduleEmail() {\n    this.emailSchedulingService.cancelAllScheduledEmails();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/email-scheduling/email-scheduling.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailSchedulingService } from './email-scheduling.service';\nimport { EmailSchedulingController } from './email-scheduling.controller';\nimport { EmailModule } from '../../email/email.module';\n\n@Module({\n  imports: [EmailModule],\n  providers: [EmailSchedulingService],\n  controllers: [EmailSchedulingController],\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-scheduling/email-scheduling.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelAllScheduledEmails\n                            \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/features/email-scheduling/email-scheduling.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelAllScheduledEmails\n                        \n                    \n                \n            \n            \n                \ncancelAllScheduledEmails()\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-scheduling/email-scheduling.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-scheduling/email-scheduling.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { CronJob } from 'cron';\nimport { EmailService } from '../../email/email.service';\nimport { EmailScheduleDto } from './dto/email-schedule.dto';\n\n@Injectable()\nexport class EmailSchedulingService {\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly schedulerRegistry: SchedulerRegistry,\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    const date = new Date(emailSchedule.date);\n\n    const job = new CronJob(date, () => {\n      this.emailService.sendMail({\n        to: emailSchedule.recipient,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content,\n      });\n    });\n\n    this.schedulerRegistry.addCronJob(\n      `${Date.now()}-${emailSchedule.subject}`,\n      job,\n    );\n\n    job.start();\n  }\n\n  cancelAllScheduledEmails() {\n    this.schedulerRegistry.getCronJobs().forEach((job) => {\n      job.stop();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      host: configService.get('email.host'),\n      port: configService.get('email.port'),\n      secure: configService.get('email.secure'),\n      auth: {\n        user: configService.get('email.user'),\n        pass: configService.get('email.password'),\n      },\n      from: configService.get('email.from'),\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options, (err) => {\n      if (err) {\n        throw new InternalServerErrorException(\n          `Internal Mailer Failed Error - ${err.message}`,\n        );\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariables.html":{"url":"classes/EnvironmentVariables.html","title":"class - EnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/env.validation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                APP_DEBUG\n                            \n                            \n                                APP_ENV\n                            \n                            \n                                APP_URL\n                            \n                            \n                                DATABASE_HOST\n                            \n                            \n                                DATABASE_NAME\n                            \n                            \n                                DATABASE_PASSWORD\n                            \n                            \n                                DATABASE_PORT\n                            \n                            \n                                DATABASE_USER\n                            \n                            \n                                EMAIL_CONFIRMATION_URL\n                            \n                            \n                                EMAIL_HOST\n                            \n                            \n                                EMAIL_IS_SECURE\n                            \n                            \n                                EMAIL_PASSWORD\n                            \n                            \n                                EMAIL_PORT\n                            \n                            \n                                EMAIL_USER\n                            \n                            \n                                JWT_ACCESS_TOKEN_EXPIRATION_TIME\n                            \n                            \n                                JWT_ACCESS_TOKEN_SECRET\n                            \n                            \n                                JWT_REFRESH_TOKEN_EXPIRATION_TIME\n                            \n                            \n                                JWT_REFRESH_TOKEN_SECRET\n                            \n                            \n                                JWT_VERIFICATION_TOKEN_EXPIRATION_TIME\n                            \n                            \n                                JWT_VERIFICATION_TOKEN_SECRET\n                            \n                            \n                                PORT\n                            \n                            \n                                TYPEORM_LOGGING\n                            \n                            \n                                TYPEORM_SYNCHRONIZE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        APP_DEBUG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_CONFIRMATION_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_IS_SECURE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_ACCESS_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_ACCESS_TOKEN_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_REFRESH_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_REFRESH_TOKEN_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_VERIFICATION_TOKEN_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPEORM_LOGGING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPEORM_SYNCHRONIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { plainToClass } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  validateSync,\n} from 'class-validator';\n\nenum Environment {\n  Local = 'local',\n  Production = 'production',\n  Staging = 'staging',\n  Test = 'test',\n}\n\nclass EnvironmentVariables {\n  @IsEnum(Environment)\n  @IsNotEmpty()\n  APP_ENV: Environment;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  APP_DEBUG: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  APP_URL: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  PORT: number;\n\n  @IsString()\n  @IsNotEmpty()\n  JWT_ACCESS_TOKEN_SECRET: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  JWT_ACCESS_TOKEN_EXPIRATION_TIME: number;\n\n  @IsString()\n  @IsNotEmpty()\n  JWT_REFRESH_TOKEN_SECRET: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  JWT_REFRESH_TOKEN_EXPIRATION_TIME: number;\n\n  @IsString()\n  @IsNotEmpty()\n  JWT_VERIFICATION_TOKEN_SECRET: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: number;\n\n  @IsString()\n  @IsNotEmpty()\n  EMAIL_CONFIRMATION_URL: string;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_HOST: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  DATABASE_PORT: number;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_USER: string;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_PASSWORD: string;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_NAME: string;\n\n  @IsBoolean()\n  @IsOptional()\n  TYPEORM_SYNCHRONIZE: boolean;\n\n  @IsBoolean()\n  @IsOptional()\n  TYPEORM_LOGGING: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  EMAIL_HOST: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  EMAIL_PORT: number;\n\n  @IsBoolean()\n  @IsOptional()\n  EMAIL_IS_SECURE: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  EMAIL_USER: string;\n\n  @IsString()\n  @IsNotEmpty()\n  EMAIL_PASSWORD: string;\n}\n\nexport function validate(config: Record) {\n  const validatedConfig = plainToClass(EnvironmentVariables, config, {\n    enableImplicitConversion: true,\n  });\n  const errors = validateSync(validatedConfig, {\n    skipMissingProperties: false,\n  });\n\n  if (errors.length > 0) {\n    throw new Error(errors.toString());\n  }\n  return validatedConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsLoggerFilter.html":{"url":"classes/ExceptionsLoggerFilter.html","title":"class - ExceptionsLoggerFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsLoggerFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptions-logger.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exceptions-logger.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\n@Catch()\nexport class ExceptionsLoggerFilter extends BaseExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    console.log('Exception thrown', exception);\n    super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exclude-null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exclude-null.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { recursivelyStripNullValues } from './recursively-strip-null-values';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map((value) => recursivelyStripNullValues(value)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileNotFoundException.html":{"url":"classes/FileNotFoundException.html","title":"class - FileNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/exceptions/file-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/files/exceptions/file-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class FileNotFoundException extends NotFoundException {\n  constructor(fileId: number) {\n    super(`File with id ${fileId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto.html":{"url":"classes/FileResponseDto.html","title":"class - FileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber } from 'class-validator';\nimport { User } from '../entities/user.entity';\n\nexport class FileResponseDto {\n  @IsString()\n  public url: string;\n\n  @IsNumber()\n  public id: number;\n\n  @IsString()\n  public key: string;\n\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-upload.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Express } from 'express';\n\nexport class FileUploadDto {\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadMultipleDto.html":{"url":"classes/FileUploadMultipleDto.html","title":"class - FileUploadMultipleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadMultipleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-upload-multiple.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                files\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-upload-multiple.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class FileUploadMultipleDto {\n  @ApiProperty({ type: 'array', items: { type: 'string', format: 'binary' } })\n  files: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PrivateFile } from './entities/private-file.entity';\nimport { PublicFile } from './entities/public-file.entity';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PublicFile, PrivateFile])],\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePrivateFile\n                            \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Public\n                                    Async\n                                generatePresignedUrl\n                            \n                            \n                                    Public\n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                uploadPrivateFile\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFilesRepository: Repository, privateFilesRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/features/files/files.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        privateFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePrivateFile(fileId: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of the user who uploaded the file. A user with this id should exist on the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePresignedUrl(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        AWS object key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise with a url\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise with the file and its information\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPrivateFile(dataBuffer: Buffer, ownerId: number, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file buffer of the uploaded content\n\n                                    \n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of the user who uploaded the file. A user with this id should exist on the database\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A file name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the public version of the uploaded file\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file buffer of the uploaded content\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A file name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the public version of the uploaded file\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { PublicFile } from './entities/public-file.entity';\nimport { PrivateFile } from './entities/private-file.entity';\nimport { S3 } from 'aws-sdk';\nimport { v4 as uuid } from 'uuid';\nimport { FileNotFoundException } from './exceptions/file-not-found.exception';\nimport internal from 'stream';\n\n@Injectable()\nexport class FilesService {\n  constructor(\n    @InjectRepository(PublicFile)\n    private publicFilesRepository: Repository,\n    @InjectRepository(PrivateFile)\n    private privateFilesRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   * @returns A promise with the file and its information\n   */\n  public async getPrivateFile(fileId: number): Promise {\n    const s3 = new S3();\n    const fileInfo = await this.privateFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n      relations: ['owner'],\n    });\n    if (fileInfo) {\n      const stream = await s3\n        .getObject({\n          Bucket: this.configService.get('aws.publicBucketName'),\n          Key: fileInfo.key,\n        })\n        .createReadStream();\n      return {\n        stream,\n        info: fileInfo,\n      };\n    }\n    throw new FileNotFoundException(fileId);\n  }\n\n  /**\n   * @param key AWS object key\n   * @returns A promise with a url\n   */\n  public async generatePresignedUrl(key: string): Promise {\n    const s3 = new S3();\n    return s3.getSignedUrlPromise('getObject', {\n      Bucket: this.configService.get('aws.publicBucketName'),\n      Key: key,\n    });\n  }\n\n  /**\n   * @param dataBuffer The file buffer of the uploaded content\n   * @param filename A file name\n   * @returns A promise with the public version of the uploaded file\n   */\n  async uploadPublicFile(\n    dataBuffer: Buffer,\n    filename: string,\n  ): Promise {\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${filename}`,\n      })\n      .promise();\n    const newFile = this.publicFilesRepository.create({\n      key: uploadResult.Key,\n      url: uploadResult.Location,\n    });\n    await this.publicFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  /**\n   * @param dataBuffer The file buffer of the uploaded content\n   * @param ownerId An id of the user who uploaded the file. A user with this id should exist on the database\n   * @param filename A file name\n   * @returns A promise with the public version of the uploaded file\n   */\n  async uploadPrivateFile(\n    dataBuffer: Buffer,\n    ownerId: number,\n    filename: string,\n  ): Promise {\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${filename}`,\n      })\n      .promise();\n    const newFile = this.privateFilesRepository.create({\n      key: uploadResult.Key,\n      owner: {\n        id: ownerId,\n      },\n    });\n    await this.privateFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   */\n  async deletePublicFile(fileId: number): Promise {\n    const s3 = new S3();\n    const file = await this.publicFilesRepository.findOne({\n      where: { id: fileId },\n    });\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Key: file.key,\n      })\n      .promise();\n    await this.publicFilesRepository.delete(fileId);\n  }\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   * @param ownerId An id of the user who uploaded the file. A user with this id should exist on the database\n   */\n  async deletePrivateFile(fileId: number, ownerId: number): Promise {\n    const s3 = new S3();\n    const file = await this.privateFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n      relations: ['owner'],\n    });\n    if (file) {\n      if (file.owner && file.owner.id === ownerId) {\n        await s3\n          .deleteObject({\n            Bucket: this.configService.get('aws.publicBucketName'),\n            Key: file.key,\n          })\n          .promise();\n        await this.privateFilesRepository.delete(fileId);\n      } else {\n        throw new UnauthorizedException();\n      }\n    } else {\n      throw new FileNotFoundException(fileId);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllProductsHandler.html":{"url":"classes/FindAllProductsHandler.html","title":"class - FindAllProductsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllProductsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/handlers/find-all-products.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/handlers/find-all-products.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(undefined: FindAllProductsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/queries/handlers/find-all-products.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindAllProductsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../../../utils/dto/paginated-result.dto';\nimport { Product } from '../../entities/product.entity';\nimport { FindAllProductsQuery } from '../implementations/find-all-products.query';\nimport { getPaginationProps } from '../../../../utils/get-pagination-props';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, Repository } from 'typeorm';\n\n@QueryHandler(FindAllProductsQuery)\nexport class FindAllProductsHandler\n  implements IQueryHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute({\n    ownerId,\n    paginationDto,\n  }: FindAllProductsQuery): Promise> {\n    const { page, limit, skippedItems } = getPaginationProps(paginationDto);\n\n    const where: FindManyOptions['where'] = {};\n    if (ownerId) {\n      where.owner = {\n        id: ownerId,\n      };\n    }\n\n    const [products, productsCount] =\n      await this.productsRepository.findAndCount({\n        where,\n        relations: ['owner'],\n        skip: skippedItems,\n        take: limit,\n      });\n\n    return {\n      totalCount: productsCount,\n      page: page,\n      limit: limit,\n      data: products,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllProductsQuery.html":{"url":"classes/FindAllProductsQuery.html","title":"class - FindAllProductsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllProductsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/implementations/find-all-products.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ownerId\n                            \n                            \n                                    Public\n                                    Readonly\n                                paginationDto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ownerId: number, paginationDto: PaginationDto)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ownerId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationDto\n                                                  \n                                                        \n                                                                        PaginationDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        paginationDto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationDto } from '../../../../utils/dto/pagination.dto';\n\nexport class FindAllProductsQuery {\n  constructor(\n    public readonly ownerId: number,\n    public readonly paginationDto: PaginationDto,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/find-one-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/find-one-params.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nexport class FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductHandler.html":{"url":"classes/FindProductHandler.html","title":"class - FindProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/handlers/find-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/handlers/find-product.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute(undefined: FindProductQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/queries/handlers/find-product.handler.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { Product } from '../../entities/product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindProductQuery } from '../implementations/find-product.query';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(FindProductQuery)\nexport class FindProductHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n  execute({ productId }: FindProductQuery): Promise {\n    return this.productsRepository.findOne({\n      where: {\n        id: productId,\n      },\n      relations: ['owner'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductQuery.html":{"url":"classes/FindProductQuery.html","title":"class - FindProductQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/implementations/find-product.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                productId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productId: string)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/implementations/find-product.query.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-product.query.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class FindProductQuery {\n  constructor(public readonly productId: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsDto.html":{"url":"classes/GetCommentsDto.html","title":"class - GetCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/dto/get-comments.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                postId\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/get-comments.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional } from 'class-validator';\nimport { PaginationDto } from '../../../utils/dto/pagination.dto';\n\nexport class GetCommentsDto extends PaginationDto {\n  @Type(() => Number)\n  @IsOptional()\n  postId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsHandler.html":{"url":"classes/GetCommentsHandler.html","title":"class - GetCommentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/queries/handlers/get-comments.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/queries/handlers/get-comments.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(undefined: GetCommentsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/queries/handlers/get-comments.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetCommentsQuery } from '../implementations/get-comments.query';\nimport { Comment } from '../../entities/comment.entity';\nimport { FindManyOptions, Repository } from 'typeorm';\nimport { PaginatedResultDto } from '../../../../utils/dto/paginated-result.dto';\nimport { getPaginationProps } from '../../../../utils/get-pagination-props';\n\n@QueryHandler(GetCommentsQuery)\nexport class GetCommentsHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Comment) private commentsRepository: Repository,\n  ) {}\n\n  async execute({\n    postId,\n    paginationDto,\n  }: GetCommentsQuery): Promise> {\n    const { page, limit, skippedItems } = getPaginationProps(paginationDto);\n\n    const where: FindManyOptions['where'] = {};\n    if (postId) {\n      where.post = {\n        id: postId,\n      };\n    }\n\n    const [comments, commentsCount] =\n      await this.commentsRepository.findAndCount({\n        where,\n        relations: ['author'],\n        skip: skippedItems,\n        take: limit,\n      });\n\n    return {\n      totalCount: commentsCount,\n      page: page,\n      limit: limit,\n      data: comments,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsQuery.html":{"url":"classes/GetCommentsQuery.html","title":"class - GetCommentsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/queries/implementations/get-comments.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                paginationDto\n                            \n                            \n                                    Public\n                                    Readonly\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number, paginationDto: PaginationDto)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationDto\n                                                  \n                                                        \n                                                                        PaginationDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        paginationDto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationDto } from '../../../../utils/dto/pagination.dto';\n\nexport class GetCommentsQuery {\n  constructor(\n    public readonly postId: number,\n    public readonly paginationDto: PaginationDto,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductDto.html":{"url":"classes/GetProductDto.html","title":"class - GetProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/get-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                ownerId\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/get-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional } from 'class-validator';\nimport { PaginationDto } from '../../../utils/dto/pagination.dto';\n\nexport class GetProductDto extends PaginationDto {\n  @Type(() => Number)\n  @IsOptional()\n  ownerId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/google-authentication/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(tokenData: TokenVerificationDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                TokenVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { GoogleAuthenticationService } from './google-authentication.service';\nimport { Request } from 'express';\nimport { TokenVerificationDto } from './dto/token-verification.dto';\n\n@Controller('google-authentication')\n@ApiTags('authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  async authenticate(\n    @Body() tokenData: TokenVerificationDto,\n    @Req() request: Request,\n  ) {\n    const { accessTokenCookie, refreshTokenCookie, user } =\n      await this.googleAuthenticationService.authenticate(tokenData.token);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthenticationModule.html":{"url":"modules/GoogleAuthenticationModule.html","title":"module - GoogleAuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_imports\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/google-authentication/google-authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthenticationModule } from '../../authentication/authentication.module';\nimport { UsersModule } from '../users/users.module';\nimport { GoogleAuthenticationController } from './google-authentication.controller';\nimport { GoogleAuthenticationService } from './google-authentication.service';\n\n@Module({\n  imports: [ConfigModule, UsersModule, AuthenticationModule],\n  controllers: [GoogleAuthenticationController],\n  providers: [GoogleAuthenticationService],\n})\nexport class GoogleAuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/google-authentication/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                getCookiesForUser\n                            \n                            \n                                    Async\n                                getUserData\n                            \n                            \n                                    Async\n                                handleRegisteredUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/features/google-authentication/google-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCookiesForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserData(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRegisteredUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(token: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth.OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/features/google-authentication/google-authentication.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Auth, google } from 'googleapis';\nimport { AuthenticationService } from '../../authentication/authentication.service';\nimport { User } from '../users/entities/user.entity';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class GoogleAuthenticationService {\n  oauthClient: Auth.OAuth2Client;\n\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n    private readonly authenticationService: AuthenticationService,\n  ) {\n    const clientID = this.configService.get('google.auth.clientId');\n    const clientSecret = this.configService.get('google.auth.clientSecret');\n\n    this.oauthClient = new google.auth.OAuth2(clientID, clientSecret);\n  }\n\n  async getUserData(token: string) {\n    const userInfoClient = google.oauth2('v2').userinfo;\n\n    this.oauthClient.setCredentials({\n      access_token: token,\n    });\n\n    const userInfoResponse = await userInfoClient.get({\n      auth: this.oauthClient,\n    });\n\n    return userInfoResponse.data;\n  }\n\n  async getCookiesForUser(user: User) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    return {\n      accessTokenCookie,\n      refreshTokenCookie,\n    };\n  }\n\n  async handleRegisteredUser(user: User) {\n    if (!user.isRegisteredWithGoogle) {\n      throw new UnauthorizedException();\n    }\n\n    const { accessTokenCookie, refreshTokenCookie } =\n      await this.getCookiesForUser(user);\n\n    return {\n      accessTokenCookie,\n      refreshTokenCookie,\n      user,\n    };\n  }\n\n  async registerUser(token: string, email: string) {\n    const userData = await this.getUserData(token);\n    const name = userData.name;\n\n    const user = await this.usersService.createWithGoogle(email, name);\n\n    return this.handleRegisteredUser(user);\n  }\n\n  async authenticate(token: string) {\n    const tokenInfo = await this.oauthClient.getTokenInfo(token);\n\n    const email = tokenInfo.email;\n\n    try {\n      const user = await this.usersService.getByEmail(email);\n\n      return this.handleRegisteredUser(user);\n    } catch (error: any) {\n      if (error.status !== 404) {\n        throw new error();\n      }\n\n      return this.registerUser(token, email);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  DiskHealthIndicator,\n  HealthCheck,\n  HealthCheckService,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n    private memoryHealthIndicator: MemoryHealthIndicator,\n    private diskHealthIndicator: DiskHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.healthCheckService.check([\n      () => this.typeOrmHealthIndicator.pingCheck('database'),\n      // the process should not use more than 300MB memory\n      () =>\n        this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n      // The process should not have more than 300MB RSS memory allocated\n      () =>\n        this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n      // the used disk storage should not exceed the 50% of the available space\n      () =>\n        this.diskHealthIndicator.checkStorage('disk health', {\n          thresholdPercent: 0.5,\n          path: '/',\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/http-cache.interceptor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CACHE_KEY_METADATA,\n  CacheInterceptor,\n  ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const cacheKey = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (cacheKey) {\n      const request = context.switchToHttp().getRequest();\n      return `${cacheKey}-${request._parsedUrl.query}`;\n    }\n\n    return super.trackBy(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImagesUploadDto.html":{"url":"classes/ImagesUploadDto.html","title":"class - ImagesUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImagesUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/optimize/dto/images-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                files\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Attachments', type: 'array', items: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/optimize/dto/images-upload.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Express } from 'express';\n\nexport class ImagesUploadDto {\n  @ApiProperty({\n    description: 'Attachments',\n    type: 'array',\n    items: {\n      type: 'file',\n      items: {\n        type: 'string',\n        format: 'binary',\n      },\n    },\n  })\n  files: Express.Multer.File[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from '../features/users/users.service';\nimport { Request } from 'express';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.refreshTokenSecret'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from '../features/users/users.service';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.accessTokenSecret'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/two-factor/jwt-two-factor.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/jwt-two-factor.strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../features/users/users.service';\nimport { TokenPayload } from '../token-payload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.accessTokenSecret'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.userId);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isSecondFactorAuthenticated) {\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LocalFile.html":{"url":"entities/LocalFile.html","title":"entity - LocalFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LocalFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/entities/local-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filename\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                mimetype\n                            \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class LocalFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  path: string;\n\n  @Column()\n  mimetype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalFileDto.html":{"url":"interfaces/LocalFileDto.html","title":"interface - LocalFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/dto/local-file.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LocalFileDto {\n  filename: string;\n  path: string;\n  mimetype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LocalFilesController.html":{"url":"controllers/LocalFilesController.html","title":"controller - LocalFilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LocalFilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                local-files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDatabaseFileById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatabaseFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatabaseFileById(id: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/local-files/local-files.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Res,\n  StreamableFile,\n} from '@nestjs/common';\nimport { createReadStream } from 'fs';\nimport { join } from 'path';\nimport { Response } from 'express';\nimport { LocalFilesService } from './local-files.service';\n\n@Controller('local-files')\nexport class LocalFilesController {\n  constructor(private readonly localFilesService: LocalFilesService) {}\n\n  @Get(':id')\n  async getDatabaseFileById(\n    @Param('id', ParseIntPipe) id: number,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const file = await this.localFilesService.getFileById(id);\n\n    const stream = createReadStream(join(process.cwd(), file.path));\n\n    response.set({\n      'Content-Disposition': `inline; filename=\"${file.filename}\"`,\n      'Content-Type': file.mimetype,\n    });\n\n    return new StreamableFile(stream);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalFilesInterceptorOptions.html":{"url":"interfaces/LocalFilesInterceptorOptions.html","title":"interface - LocalFilesInterceptorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalFilesInterceptorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fieldName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fileFilter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limits\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileFilter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileFilter:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limits:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, mixin, NestInterceptor, Type } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { diskStorage } from 'multer';\n\ninterface LocalFilesInterceptorOptions {\n  fieldName: string;\n  path?: string;\n  fileFilter?: MulterOptions['fileFilter'];\n  limits?: MulterOptions['limits'];\n}\n\nexport function LocalFilesInterceptor(\n  options: LocalFilesInterceptorOptions,\n): Type {\n  @Injectable()\n  class Interceptor implements NestInterceptor {\n    fileInterceptor: NestInterceptor;\n\n    constructor(configService: ConfigService) {\n      const filesDestination = configService.get('app.fileDestination');\n\n      const destination = `${filesDestination}${options.path}`;\n\n      const multerOptions: MulterOptions = {\n        storage: diskStorage({\n          destination,\n        }),\n        fileFilter: options.fileFilter,\n        limits: options.limits,\n      };\n\n      this.fileInterceptor = new (FileInterceptor(\n        options.fieldName,\n        multerOptions,\n      ))();\n    }\n\n    intercept(...args: Parameters) {\n      return this.fileInterceptor.intercept(...args);\n    }\n  }\n\n  return mixin(Interceptor);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LocalFilesModule.html":{"url":"modules/LocalFilesModule.html","title":"module - LocalFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    LocalFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LocalFilesModule\n\n\n\ncluster_LocalFilesModule_exports\n\n\n\ncluster_LocalFilesModule_providers\n\n\n\n\nLocalFilesService \n\nLocalFilesService \n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nLocalFilesService  -->\n\nLocalFilesModule->LocalFilesService \n\n\n\n\n\nLocalFilesService\n\nLocalFilesService\n\nLocalFilesModule -->\n\nLocalFilesService->LocalFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/local-files/local-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalFilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LocalFilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LocalFilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LocalFile } from './entities/local-file.entity';\nimport { LocalFilesController } from './local-files.controller';\nimport { LocalFilesService } from './local-files.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LocalFile]), ConfigModule],\n  controllers: [LocalFilesController],\n  providers: [LocalFilesService],\n  exports: [LocalFilesService],\n})\nexport class LocalFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalFilesService.html":{"url":"injectables/LocalFilesService.html","title":"injectable - LocalFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteLocalFileWithQueryRunner\n                            \n                            \n                                    Async\n                                getFileById\n                            \n                            \n                                    Async\n                                saveLocalFileData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(localFilesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/local-files/local-files.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        localFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteLocalFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLocalFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileById(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveLocalFileData\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLocalFileData(fileData: LocalFileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileData\n                                    \n                                                LocalFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { LocalFileDto } from './dto/local-file.dto';\nimport { LocalFile } from './entities/local-file.entity';\n\n@Injectable()\nexport class LocalFilesService {\n  constructor(\n    @InjectRepository(LocalFile)\n    private localFilesRepository: Repository,\n  ) {}\n\n  async saveLocalFileData(fileData: LocalFileDto) {\n    const newFile = await this.localFilesRepository.create(fileData);\n    await this.localFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  async getFileById(fileId: number) {\n    const file = await this.localFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n    });\n    if (!file) {\n      throw new NotFoundException();\n    }\n    return file;\n  }\n\n  async deleteLocalFileWithQueryRunner(\n    fileId: number,\n    queryRunner: QueryRunner,\n  ) {\n    await queryRunner.manager.delete(LocalFile, fileId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { User } from '../features/users/entities/user.entity';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Log.html":{"url":"entities/Log.html","title":"entity - Log","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/entities/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                creationDate\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Log {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  creationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({default: 'test@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)@ApiProperty({default: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  @ApiProperty({\n    default: 'test@example.com',\n  })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  @ApiProperty({\n    default: 'password',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CustomLogger } from './custom-logger';\nimport { Log } from './entities/log.entity';\nimport { LogsService } from './logs.service';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([Log])],\n  providers: [CustomLogger, LogsService],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsMiddleware.html":{"url":"injectables/LogsMiddleware.html","title":"injectable - LogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logs.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/logs.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/utils/logs.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LogsMiddleware implements NestMiddleware {\n  private readonly logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction) {\n    response.on('finish', () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(message);\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(message);\n      }\n\n      return this.logger.log(message);\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logs.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateLogDto } from './dto/create-log.dto';\nimport { Log } from './entities/log.entity';\n\n@Injectable()\nexport class LogsService {\n  constructor(\n    @InjectRepository(Log)\n    private logsRepository: Repository,\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = await this.logsRepository.create(log);\n    await this.logsRepository.save(newLog, {\n      data: {\n        isCreatingLogs: true,\n      },\n    });\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObjectWithIdDto.html":{"url":"classes/ObjectWithIdDto.html","title":"class - ObjectWithIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObjectWithIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/object-with-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/object-with-id.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nexport class ObjectWithIdDto {\n  @IsNumber()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OptimizeController.html":{"url":"controllers/OptimizeController.html","title":"controller - OptimizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OptimizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/optimize/optimize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                optimize\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getJobResult\n                            \n                            \n                                    Async\n                                processImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJobResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJobResult(response: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('image/:id')@ApiParam({name: 'id', required: true, description: 'Should be a valid job id', type: String})\n                \n            \n\n            \n                \n                    Defined in src/features/optimize/optimize.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    processImage(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image')@ApiConsumes('multipart/form-data')@ApiBody({description: 'Upload images', type: ImagesUploadDto})@ApiCreatedResponse({description: 'Images have been uploaded successfully!'})@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/optimize/optimize.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bull';\nimport {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Res,\n  UploadedFiles,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiBody,\n  ApiConsumes,\n  ApiCreatedResponse,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Queue } from 'bull';\nimport { Response } from 'express';\nimport { Readable } from 'stream';\nimport { ImagesUploadDto } from './dto/images-upload.dto';\n\n@Controller('optimize')\n@ApiTags('optimize')\nexport class OptimizeController {\n  constructor(@InjectQueue('image') private readonly imageQueue: Queue) {}\n\n  @Post('image')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Upload images',\n    type: ImagesUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'Images have been uploaded successfully!',\n  })\n  @UseInterceptors(FilesInterceptor('files'))\n  async processImage(@UploadedFiles() files: Express.Multer.File[]) {\n    const job = await this.imageQueue.add('optimize', {\n      files,\n    });\n\n    return {\n      jobId: job.id,\n    };\n  }\n\n  @Get('image/:id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be a valid job id',\n    type: String,\n  })\n  async getJobResult(@Res() response: Response, @Param('id') id: string) {\n    const job = await this.imageQueue.getJob(id);\n    if (!job) {\n      return response.sendStatus(404);\n    }\n\n    const isCompleted = await job.isCompleted();\n\n    if (!isCompleted) {\n      return response.sendStatus(202);\n    }\n\n    const result = Buffer.from(job.returnvalue);\n\n    const stream = Readable.from(result);\n\n    stream.pipe(response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OptimizeModule.html":{"url":"modules/OptimizeModule.html","title":"module - OptimizeModule","body":"\n                   \n\n\n\n\n    Modules\n    OptimizeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/optimize/optimize.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            OptimizeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull';\nimport { Module } from '@nestjs/common';\nimport { join } from 'path';\nimport { OptimizeController } from './optimize.controller';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'image',\n      processors: [\n        {\n          name: 'optimize',\n          path: join(__dirname, 'image.processor.js'),\n        },\n      ],\n    }),\n  ],\n  controllers: [OptimizeController],\n})\nexport class OptimizeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedResultDto.html":{"url":"classes/PaginatedResultDto.html","title":"class - PaginatedResultDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedResultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/paginated-result.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                            \n                                totalCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, ValidateNested } from 'class-validator';\n\nexport class PaginatedResultDto {\n  @ValidateNested()\n  data: T[];\n\n  @IsNumber()\n  page: number;\n\n  @IsNumber()\n  limit: number;\n\n  @IsNumber()\n  totalCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsNumber, IsOptional, Min } from 'class-validator';\n\nexport class PaginationDto {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationWithStartIdDto.html":{"url":"classes/PaginationWithStartIdDto.html","title":"class - PaginationWithStartIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationWithStartIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination-with-start-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-with-start-id.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-with-start-id.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-with-start-id.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsNumber, IsOptional, Min } from 'class-validator';\n\nexport class PaginationWithStartIdDto {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  offset?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                paragraphs\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('post_authorId_index')@ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, category => category.posts)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Category } from '../../categories/entities/category.entity';\nimport { User } from '../../users/entities/user.entity';\nimport { Comment } from '../../comments/entities/comment.entity';\nimport {\n  Column,\n  Entity,\n  Index,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public title: string;\n\n  @Column()\n  public content: string;\n\n  @Column('text', { array: true, nullable: true })\n  public paragraphs?: string[];\n\n  @Column({ nullable: true })\n  public category?: string;\n\n  @Index('post_authorId_index')\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n\n  @ManyToMany(() => Category, (category: Category) => category.posts)\n  @JoinTable()\n  public categories: Category[];\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.post)\n  public comments: Comment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/exceptions/post-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/posts/exceptions/post-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class PostNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Post with id ${postId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchDocument.html":{"url":"interfaces/PostSearchDocument.html","title":"interface - PostSearchDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/types/post-search-document.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authorId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            paragraphs\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paragraphs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paragraphs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PostSearchDocument {\n  id: number;\n  title: string;\n  paragraphs: string[];\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                getPostById\n                            \n                            \n                                getPosts\n                            \n                            \n                                getPostsWithParagraph\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPosts\n                        \n                    \n                \n            \n            \n                \ngetPosts(search: string, undefined: PaginationWithStartIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(HttpCacheInterceptor)@CacheKey('GET_POSTS_CACHE_KEY')@CacheTTL(120)@Get()\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PaginationWithStartIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostsWithParagraph\n                        \n                    \n                \n            \n            \n                \ngetPostsWithParagraph(paragraph: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('paragraphs/:paragraph')\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraph\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(undefined: FindOneParams, post: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  CacheKey,\n  CacheTTL,\n  // CacheInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtTwoFactorGuard } from '../../authentication/two-factor/jwt-two-factor.guard';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { PostsService } from './posts.service';\nimport { HttpCacheInterceptor } from '../../utils/http-cache.interceptor';\nimport { PaginationWithStartIdDto } from '../../utils/dto/pagination-with-start-id.dto';\n\n@Controller('posts')\n@ApiTags('posts')\n// @UseInterceptors(CacheInterceptor) // default cache interceptor\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  // custom cache interceptor\n  @UseInterceptors(HttpCacheInterceptor)\n  @CacheKey('GET_POSTS_CACHE_KEY')\n  @CacheTTL(120)\n  @Get()\n  getPosts(\n    @Query('search') search: string,\n    @Query() { offset, limit, startId }: PaginationWithStartIdDto,\n  ) {\n    if (search) {\n      return this.postsService.searchForPosts(search, offset, limit, startId);\n    }\n    return this.postsService.getPostsWithAuthors();\n  }\n\n  @Get(':id')\n  getPostById(@Param() { id }: FindOneParams) {\n    return this.postsService.getPostById(Number(id));\n  }\n\n  @Get('paragraphs/:paragraph')\n  getPostsWithParagraph(@Param() paragraph: string) {\n    return this.postsService.getPostsWithParagraph(paragraph);\n  }\n\n  @Post()\n  @UseGuards(JwtTwoFactorGuard)\n  async createPost(\n    @Body() post: CreatePostDto,\n    @Req() request: RequestWithUser,\n  ) {\n    return this.postsService.createPost(post, request.user);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtTwoFactorGuard)\n  async updatePost(\n    @Param() { id }: FindOneParams,\n    @Body() post: UpdatePostDto,\n  ) {\n    return this.postsService.updatePost(Number(id), post);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtTwoFactorGuard)\n  async deletePost(@Param() { id }: FindOneParams) {\n    return this.postsService.deletePost(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nSearchModule\n\nSearchModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostsModule -->\n\nPostsSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsSearchService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { cacheModuleOptions } from '../../config/redis.config';\nimport { SearchModule } from '../search/search.module';\nimport { Post } from './entities/post.entity';\nimport { PostsSearchService } from './posts-search.service';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './posts.service';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync(cacheModuleOptions),\n    TypeOrmModule.forFeature([Post]),\n    SearchModule,\n  ],\n  controllers: [PostsController],\n  providers: [PostsService, PostsSearchService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsSearchService.html":{"url":"injectables/PostsSearchService.html","title":"injectable - PostsSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/posts-search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                count\n                            \n                            \n                                    Async\n                                indexPost\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/features/posts/posts-search.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count(query: string, fields: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts-search.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fields\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        indexPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    indexPost(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts-search.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(postId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts-search.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string, offset?: number, limit?: number, startId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts-search.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts-search.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'posts'\n                    \n                \n                    \n                        \n                                Defined in src/features/posts/posts-search.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport { WriteResponseBase } from '@elastic/elasticsearch/lib/api/types';\nimport { Post } from './entities/post.entity';\nimport { PostSearchDocument } from './types/post-search-document.interface';\n\n@Injectable()\nexport class PostsSearchService {\n  index = 'posts';\n\n  constructor(private readonly elasticsearchService: ElasticsearchService) {}\n\n  async indexPost(post: Post): Promise {\n    return this.elasticsearchService.index({\n      index: this.index,\n      document: {\n        id: post.id,\n        title: post.title,\n        paragraphs: post.paragraphs,\n        authorId: post.author.id,\n      },\n    });\n  }\n\n  async count(query: string, fields: string[]) {\n    const { count } = await this.elasticsearchService.count({\n      index: this.index,\n      body: {\n        query: {\n          multi_match: {\n            query,\n            fields,\n          },\n        },\n      },\n    });\n    return count;\n  }\n\n  async search(text: string, offset?: number, limit?: number, startId = 0) {\n    let separateCount = 0;\n    if (startId) {\n      separateCount = await this.count(text, ['title', 'paragraphs']);\n    }\n    const { hits } = await this.elasticsearchService.search(\n      {\n        index: this.index,\n        from: offset,\n        size: limit,\n        query: {\n          bool: {\n            should: {\n              multi_match: {\n                query: text,\n                fields: ['title', 'paragraphs'],\n              },\n            },\n            filter: {\n              range: {\n                id: {\n                  gt: startId,\n                },\n              },\n            },\n          },\n        },\n      },\n    );\n    const count = hits.total;\n    const results = hits.hits.map((item) => item._source);\n    return {\n      count: startId ? separateCount : count,\n      results,\n    };\n  }\n\n  async remove(postId: number) {\n    this.elasticsearchService.deleteByQuery({\n      index: this.index,\n      query: {\n        match: {\n          id: postId,\n        },\n      },\n    });\n  }\n\n  async update(post: Post) {\n    const newDocument: PostSearchDocument = {\n      id: post.id,\n      title: post.title,\n      paragraphs: post.paragraphs,\n      authorId: post.author.id,\n    };\n\n    const script = Object.entries(newDocument).reduce(\n      (result, [key, value]) => {\n        return `${result} ctx._source.${key}='${value}';`;\n      },\n      '',\n    );\n\n    return this.elasticsearchService.updateByQuery({\n      index: this.index,\n      script: {\n        source: script,\n      },\n      query: {\n        match: {\n          id: post.id,\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostsWithAuthors\n                            \n                            \n                                    Async\n                                getPostsWithParagraph\n                            \n                            \n                                    Async\n                                searchForPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, postsSearchService: PostsSearchService)\n                    \n                \n                        \n                            \n                                Defined in src/features/posts/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsSearchService\n                                                  \n                                                        \n                                                                        PostsSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithAuthors()\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithParagraph\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithParagraph(paragraph: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraph\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchForPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForPosts(text: string, offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, post: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { In, Repository } from 'typeorm';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { Post } from './entities/post.entity';\nimport { PostNotFoundException } from './exceptions/post-not-found.exception';\nimport { PostsSearchService } from './posts-search.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post) private postsRepository: Repository,\n    private postsSearchService: PostsSearchService,\n  ) {}\n\n  async getPostsWithAuthors() {\n    return this.postsRepository.find({\n      relations: ['author'],\n    });\n  }\n\n  async getPostById(id: number) {\n    const post = await this.postsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['author'],\n    });\n    if (post) {\n      return post;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async getPostsWithParagraph(paragraph: string) {\n    const posts = await this.postsRepository.query(\n      'SELECT * FROM post WHERE $1 = ANY(paragraphs)',\n      [paragraph],\n    );\n    if (posts) {\n      return posts;\n    }\n    throw new NotFoundException('Post with the paragraph is not found!');\n  }\n\n  async createPost(post: CreatePostDto, user: User) {\n    const newPost = await this.postsRepository.create({\n      ...post,\n      author: user,\n    });\n    const savedPost = await this.postsRepository.save(newPost);\n    this.postsSearchService.indexPost(savedPost);\n    return savedPost;\n  }\n\n  async updatePost(id: number, post: UpdatePostDto) {\n    await this.postsRepository.update(id, post);\n    const updatedPost = await this.postsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['author'],\n    });\n    if (updatedPost) {\n      await this.postsSearchService.update(updatedPost);\n      return updatedPost;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async deletePost(id: number) {\n    const deleteResponse = await this.postsRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new PostNotFoundException(id);\n    }\n    await this.postsSearchService.remove(id);\n  }\n\n  async searchForPosts(\n    text: string,\n    offset?: number,\n    limit?: number,\n    startId?: number,\n  ) {\n    const { results, count } = await this.postsSearchService.search(\n      text,\n      offset,\n      limit,\n      startId,\n    );\n\n    const ids = results.map((result) => result.id);\n    if (!ids.length) {\n      return {\n        items: [],\n        count,\n      };\n    }\n    const items = await this.postsRepository.find({\n      where: { id: In(ids) },\n    });\n    return {\n      items,\n      count,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PrivateFile.html":{"url":"entities/PrivateFile.html","title":"entity - PrivateFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PrivateFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/entities/private-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.files)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class PrivateFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public key: string;\n\n  @ManyToOne(() => User, (owner: User) => owner.files)\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                owner\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.products)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../users/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BookProperties } from '../types/book-properties.interface';\nimport { CarProperties } from '../types/car-properties.interface';\n\n@Entity()\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @Column()\n  public name: string;\n\n  @Column({\n    type: 'jsonb',\n    nullable: true,\n  })\n  public properties?: CarProperties | BookProperties;\n\n  @ManyToOne(() => User, (owner: User) => owner.products)\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/exceptions/file-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileId: string)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/exceptions/file-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class ProductNotFoundException extends NotFoundException {\n  constructor(fileId: string) {\n    super(`Product with id ${fileId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: GetProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n  Query,\n  HttpCode,\n} from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { GetProductDto } from './dto/get-product.dto';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { Product } from './entities/product.entity';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { PermissionGuard } from '../../authorization/permission.guard';\nimport { Permission } from '../../authorization/types/permission.type';\n\n@Controller('products')\n@ApiTags('products')\n@ApiExtraModels(PaginatedResultDto)\n@UseGuards(JwtAuthenticationGuard)\nexport class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @Post()\n  @UseGuards(PermissionGuard(Permission.CreateProduct))\n  async create(\n    @Body() createProductDto: CreateProductDto,\n    @Req() request: RequestWithUser,\n  ): Promise {\n    const user = request.user;\n    return this.productsService.create(createProductDto, user);\n  }\n\n  @Get()\n  async findAll(\n    @Query() { ownerId, page = 1, limit = 20 }: GetProductDto,\n  ): Promise> {\n    return this.productsService.findAll(ownerId, { page, limit });\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise {\n    return this.productsService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n    @Req() request: RequestWithUser,\n  ) {\n    const user = request.user;\n    return this.productsService.update(id, updateProductDto, user);\n  }\n\n  @Delete(':id')\n  @UseGuards(PermissionGuard(Permission.DeleteProduct))\n  @HttpCode(204)\n  remove(@Param('id') id: string, @Req() request: RequestWithUser) {\n    const user = request.user;\n    return this.productsService.remove(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService\n\nProductsService\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { ProductsController } from './products.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './entities/product.entity';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { CreateProductHandler } from './commands/handlers/create-product.handler';\nimport { FindAllProductsHandler } from './queries/handlers/find-all-products.handler';\nimport { FindProductHandler } from './queries/handlers/find-product.handler';\nimport { UpdateProductHandler } from './commands/handlers/update-product.handler';\nimport { DeleteProductHandler } from './commands/handlers/delete-product.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), CqrsModule],\n  controllers: [ProductsController],\n  providers: [\n    ProductsService,\n    CreateProductHandler,\n    FindAllProductsHandler,\n    FindProductHandler,\n    UpdateProductHandler,\n    DeleteProductHandler,\n  ],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commandBus: CommandBus, queryBus: QueryBus)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/products.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commandBus\n                                                  \n                                                        \n                                                                    CommandBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBus\n                                                  \n                                                        \n                                                                    QueryBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(ownerId: number, paginationDto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paginationDto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { PaginationDto } from '../../utils/dto/pagination.dto';\nimport { User } from '../users/entities/user.entity';\nimport { CreateProductCommand } from './commands/implementations/create-product.command';\nimport { DeleteProductCommand } from './commands/implementations/delete-product.command';\nimport { UpdateProductCommand } from './commands/implementations/update-product.command';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { FindAllProductsQuery } from './queries/implementations/find-all-products.query';\nimport { FindProductQuery } from './queries/implementations/find-product.query';\n\n@Injectable()\nexport class ProductsService {\n  constructor(private commandBus: CommandBus, private queryBus: QueryBus) {}\n\n  async create(\n    createProductDto: CreateProductDto,\n    owner: User,\n  ): Promise {\n    return this.commandBus.execute(\n      new CreateProductCommand(createProductDto, owner),\n    );\n  }\n\n  async findAll(\n    ownerId: number,\n    paginationDto: PaginationDto,\n  ): Promise> {\n    return this.queryBus.execute(\n      new FindAllProductsQuery(ownerId, paginationDto),\n    );\n  }\n\n  async findOne(id: string): Promise {\n    return this.queryBus.execute(new FindProductQuery(id));\n  }\n\n  async update(id: string, updateProductDto: UpdateProductDto, owner: User) {\n    return this.commandBus.execute(\n      new UpdateProductCommand(id, updateProductDto, owner),\n    );\n  }\n\n  remove(id: string, owner: User) {\n    return this.commandBus.execute(new DeleteProductCommand(id, owner));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PublicFile.html":{"url":"entities/PublicFile.html","title":"entity - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/entities/public-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class PublicFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public url: string;\n\n  @Column()\n  public key: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Has to match a regular expression: /^\\+[1-9]\\d{1,14}$/', example: '+123123123123'})@IsOptional()@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n  IsOptional,\n} from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @ApiProperty({\n    description: 'Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/',\n    example: '+123123123123',\n  })\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/request-with-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '../features/users/entities/user.entity';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\nimport { elasticSearchModuleOptions } from '../../config/elastic-search.config';\n\n@Module({\n  imports: [\n    ConfigModule,\n    ElasticsearchModule.registerAsync(elasticSearchModuleOptions),\n  ],\n  exports: [ElasticsearchModule],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n  isSecondFactorAuthenticated?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenVerificationDto.html":{"url":"classes/TokenVerificationDto.html","title":"class - TokenVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/google-authentication/dto/token-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/google-authentication/dto/token-verification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class TokenVerificationDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TwoFactorAuthenticationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthenticationCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/two-factor-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOffTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOffTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOffTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-off')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Res,\n  UseGuards,\n  Req,\n  Body,\n  UnauthorizedException,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { UsersService } from '../../features/users/users.service';\nimport { AuthenticationService } from '../authentication.service';\nimport { JwtAuthenticationGuard } from '../jwt-authentication.guard';\nimport { RequestWithUser } from '../request-with-user.interface';\nimport { TwoFactorAuthenticationCodeDto } from './dto/two-factor-authentication-code.dto';\nimport { TwoFactorAuthenticationService } from './two-factor-authentication.service';\n\n@Controller('2fa')\n@ApiTags('authentication-2fa')\nexport class TwoFactorAuthenticationController {\n  constructor(\n    private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly authenticationService: AuthenticationService,\n  ) {}\n\n  @Post('generate')\n  @UseGuards(JwtAuthenticationGuard)\n  async register(@Res() response: Response, @Req() request: RequestWithUser) {\n    const { otpauthUrl } =\n      await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(\n        request.user,\n      );\n\n    response.setHeader('content-type', 'image/png');\n\n    return this.twoFactorAuthenticationService.pipeQrCodeStream(\n      response,\n      otpauthUrl,\n    );\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOnTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('turn-off')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOffTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOffTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('authenticate')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async authenticate(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(\n        request.user.id,\n        true,\n      );\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/two-factor-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/two-factor/two-factor-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { authenticator } from 'otplib';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\nimport { User } from '../../features/users/entities/user.entity';\nimport { UsersService } from '../../features/users/users.service';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async generateTwoFactorAuthenticationSecret(user: User) {\n    const secret = authenticator.generateSecret();\n\n    const otpauthUrl = authenticator.keyuri(\n      user.email,\n      this.configService.get('app.fileDestination'),\n      secret,\n    );\n\n    await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n    return {\n      secret,\n      otpauthUrl,\n    };\n  }\n\n  public isTwoFactorAuthenticationCodeValid(\n    twoFactorAuthenticationCode: string,\n    user: User,\n  ) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret,\n    });\n  }\n\n  public async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    return toFileStream(stream, otpauthUrl);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmConfig.html":{"url":"classes/TypeOrmConfig.html","title":"class - TypeOrmConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/typeorm.config.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getOrmConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getOrmConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrmConfig(configService: ConfigService)\n                \n            \n\n\n            \n                \n                    Defined in src/config/typeorm.config.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configService\n                                    \n                                            ConfigService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService, registerAs } from '@nestjs/config';\nimport {\n  TypeOrmModuleAsyncOptions,\n  TypeOrmModuleOptions,\n} from '@nestjs/typeorm';\nimport { DatabaseLogger } from '../database/database-logger';\n\nclass TypeOrmConfig {\n  static getOrmConfig(configService: ConfigService): TypeOrmModuleOptions {\n    const options: TypeOrmModuleOptions = {\n      type: 'postgres',\n      host: configService.get('database.host'),\n      port: configService.get('database.port'),\n      username: configService.get('database.username'),\n      password: configService.get('database.password'),\n      database: configService.get('database.name'),\n      entities: ['dist/**/*.entity{.ts,.js}'],\n      synchronize: configService.get('typeorm.synchronize'),\n    };\n\n    const isLogging = configService.get('typeorm.logging') || false;\n    if (!isLogging) {\n      return options;\n    }\n\n    return {\n      ...options,\n      logger: new DatabaseLogger(),\n    };\n  }\n}\n\nexport const typeormModuleOptions: TypeOrmModuleAsyncOptions = {\n  imports: [ConfigModule],\n  inject: [ConfigService],\n  useFactory: async (\n    configService: ConfigService,\n  ): Promise => TypeOrmConfig.getOrmConfig(configService),\n};\n\nexport default registerAs('typeorm', () => ({\n  synchronize: process.env.TYPEORM_SYNCHRONIZE === 'false' ? false : true,\n  logging: process.env.TYPEORM_LOGGING === 'true' ? true : false,\n}));\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/update-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/update-category.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsOptional, IsString, IsNotEmpty } from 'class-validator';\n\nexport class UpdateCategoryDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePermissionsDto.html":{"url":"classes/UpdatePermissionsDto.html","title":"class - UpdatePermissionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePermissionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization/dto/update-permissions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Permission[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({isArray: true, enum: Permission})@IsEnum(Permission, {each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authorization/dto/update-permissions.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Permission } from '../types/permission.type';\n\nexport class UpdatePermissionsDto {\n  @ApiProperty({\n    isArray: true,\n    enum: Permission,\n  })\n  @IsEnum(Permission, { each: true })\n  @IsNotEmpty()\n  permissions: Permission[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsOptional, IsString, IsNotEmpty } from 'class-validator';\n\nexport class UpdatePostDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductCommand.html":{"url":"classes/UpdateProductCommand.html","title":"class - UpdateProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/update-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                product\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, product: UpdateProductDto, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        product\n                                                  \n                                                        \n                                                                        UpdateProductDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UpdateProductDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { UpdateProductDto } from '../../dto/update-product.dto';\n\nexport class UpdateProductCommand {\n  constructor(\n    public readonly id: string,\n    public readonly product: UpdateProductDto,\n    public readonly owner: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/update-product.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateProductDto } from './create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductHandler.html":{"url":"classes/UpdateProductHandler.html","title":"class - UpdateProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/update-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/update-product.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: UpdateProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/update-product.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                UpdateProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { ProductNotFoundException } from '../../exceptions/file-not-found.exception';\nimport { UpdateProductCommand } from '../implementations/update-product.command';\n\n@CommandHandler(UpdateProductCommand)\nexport class UpdateProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: UpdateProductCommand): Promise {\n    const { id, product, owner } = command;\n    const oldProduct = await this.productsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['owner'],\n    });\n    if (oldProduct) {\n      if (oldProduct.owner && oldProduct.owner.id === owner.id) {\n        await this.productsRepository.update(id, product);\n        const updatedProduct = await this.productsRepository.findOne({\n          where: {\n            id,\n          },\n          relations: ['owner'],\n        });\n        if (updatedProduct) {\n          return updatedProduct;\n        }\n      } else {\n        throw new UnauthorizedException();\n      }\n    }\n    throw new ProductNotFoundException(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization/dto/update-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authorization/dto/update-role.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Role } from '../role.enum';\n\nexport class UpdateRoleDto {\n  @IsEnum(Role)\n  @IsNotEmpty()\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                address\n                            \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                avatarId\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                files\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                    Optional\n                                isRegisteredWithGoogle\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                permissions\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                    Public\n                                    Optional\n                                products\n                            \n                            \n                                    Public\n                                    Optional\n                                role\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LocalFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'avatarId'})@OneToOne(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatarId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivateFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isRegisteredWithGoogle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Permission[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Permission, array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:101\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { Address } from './address.entity';\nimport { Post } from '../../posts/entities/post.entity';\nimport { PrivateFile } from '../../files/entities/private-file.entity';\nimport { Product } from '../../products/entities/product.entity';\nimport { LocalFile } from '../../../features/local-files/entities/local-file.entity';\nimport { Role } from '../../../authorization/role.enum';\nimport { Permission } from '../../../authorization/types/permission.type';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  public id?: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ default: false })\n  public isEmailConfirmed?: boolean;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    default: Role.User,\n  })\n  public role?: Role;\n\n  @Column({\n    type: 'enum',\n    enum: Permission,\n    array: true,\n    default: [],\n  })\n  public permissions?: Permission[];\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @OneToOne(() => Address, {\n    eager: true,\n    cascade: true,\n  })\n  @JoinColumn()\n  public address?: Address;\n\n  @Column()\n  @Exclude()\n  public password: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts?: Post[];\n\n  // use Amazon S3 to store avatar publicly\n  // @OneToOne(() => PublicFile, {\n  //   eager: true,\n  //   nullable: true,\n  // })\n  // @JoinColumn()\n  // public avatar?: PublicFile;\n\n  // store file directly to postgres database\n  // @JoinColumn({ name: 'avatarId' })\n  // @OneToOne(() => DatabaseFile, {\n  //   nullable: true,\n  // })\n  // public avatar?: DatabaseFile;\n\n  @JoinColumn({ name: 'avatarId' })\n  @OneToOne(() => LocalFile, {\n    nullable: true,\n  })\n  public avatar?: LocalFile;\n\n  // this field is necessary only for storing files to postgres database\n  @Column({ nullable: true })\n  public avatarId?: number;\n\n  @OneToMany(() => PrivateFile, (file: PrivateFile) => file.owner)\n  public files?: PrivateFile[];\n\n  @OneToMany(() => Product, (product: Product) => product.owner)\n  public products?: Product[];\n\n  @Column({ nullable: true })\n  @Exclude()\n  public twoFactorAuthenticationSecret?: string;\n\n  @Column({ default: false })\n  public isTwoFactorAuthenticationEnabled: boolean;\n\n  @Column({ default: false })\n  public isRegisteredWithGoogle?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/exceptions/user-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/users/exceptions/user-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class UserNotFoundException extends NotFoundException {\n  constructor(userId: number) {\n    super(`User with id ${userId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAvatar\n                            \n                            \n                                addAvatarOnAmazonS3\n                            \n                            \n                                addAvatarOnPostgres\n                            \n                            \n                                addPrivateFile\n                            \n                            \n                                deleteAvatar\n                            \n                            \n                                deletePrivateFile\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getAvatar\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatar\n                        \n                    \n                \n            \n            \n                \naddAvatar(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatarOnAmazonS3\n                        \n                    \n                \n            \n            \n                \naddAvatarOnAmazonS3(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar/amazonS3')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatarOnPostgres\n                        \n                    \n                \n            \n            \n                \naddAvatarOnPostgres(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar/postgres')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \naddPrivateFile(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('files')@ApiConsumes('multipart/form-data')@ApiBody({description: 'Upload a new private file for the logged in user', type: FileUploadDto})@ApiCreatedResponse({description: 'A private file for this user has been uploaded successfully!', type: PrivateFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:247\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \ndeleteAvatar(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('avatar')@ApiOkResponse({description: 'Avatar for this user has been deleted successfully!'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePrivateFile\n                        \n                    \n                \n            \n            \n                \ndeletePrivateFile(request: RequestWithUser, undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('files/:id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a product that exists in the database', type: String})@ApiOkResponse({description: 'A private file of the user has been deleted successfully!'})@ApiNotFoundResponse({description: 'A file with given id does not exist.'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:273\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'All the users have been fetched successfully!', type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':email')@ApiParam({name: 'email', required: true, description: 'Should be a valid email for the user to fetch', type: String})@ApiOkResponse({description: 'A user with the email has been fetched successfully!', type: User})@ApiNotFoundResponse({description: 'A user with given email does not exist.'})\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files')@ApiOkResponse({description: 'All the private files of the user have been fetched successfully!', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvatar(userId: number, response: Response, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/avatar')\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(request: RequestWithUser, undefined: FindOneParams, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a file that exists in the database', type: String})@ApiOkResponse({description: 'A private file of the user has been fetched successfully!', type: FileResponseDto})@ApiNotFoundResponse({description: 'A file with given id does not exist.'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:222\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Req,\n  Res,\n  StreamableFile,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { UsersService } from './users.service';\nimport { Express, Response, Request } from 'express';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport {\n  ApiBody,\n  ApiConsumes,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { FileUploadDto } from './dto/file-upload.dto';\nimport { User } from './entities/user.entity';\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { PublicFile } from '../files/entities/public-file.entity';\nimport { PrivateFile } from '../files/entities/private-file.entity';\nimport { LocalFilesInterceptor } from '../local-files/local-files.interceptor';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @ApiOkResponse({\n    description: 'All the users have been fetched successfully!',\n    type: [User],\n  })\n  findAll() {\n    return this.usersService.getAllUsers();\n  }\n\n  @Get(':email')\n  @ApiParam({\n    name: 'email',\n    required: true,\n    description: 'Should be a valid email for the user to fetch',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A user with the email has been fetched successfully!',\n    type: User,\n  })\n  @ApiNotFoundResponse({\n    description: 'A user with given email does not exist.',\n  })\n  findOne(@Param('email') email: string) {\n    return this.usersService.getByEmail(email);\n  }\n\n  @Get(':userId/avatar')\n  async getAvatar(\n    @Param('userId', ParseIntPipe) userId: number,\n    @Res({ passthrough: true }) response: Response,\n    @Req() request: Request,\n  ) {\n    const { file, fileMetadata } = await this.usersService.getAvatar(userId);\n\n    const tag = `W/\"file-id-${fileMetadata.id}\"`;\n\n    response.set({\n      'Content-Disposition': `inline; filename=\"${fileMetadata.filename}\"`,\n      'Content-Type': fileMetadata.mimetype,\n      ETag: tag,\n    });\n\n    if (request.headers['if-none-match'] === tag) {\n      response.status(304);\n      return;\n    }\n\n    return new StreamableFile(file);\n  }\n\n  @Post('avatar')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(\n    LocalFilesInterceptor({\n      fieldName: 'file',\n      path: '/avatars',\n      fileFilter: (request, file, callback) => {\n        if (!file.mimetype.includes('image')) {\n          return callback(\n            new BadRequestException('Provide a valid image'),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n      limits: {\n        fileSize: Math.pow(1024, 2), // 1 MB\n      },\n    }),\n  )\n  addAvatar(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatar(request.user.id, {\n      path: file.path,\n      filename: file.originalname,\n      mimetype: file.mimetype,\n    });\n  }\n\n  @Delete('avatar')\n  @ApiOkResponse({\n    description: 'Avatar for this user has been deleted successfully!',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  deleteAvatar(@Req() request: RequestWithUser) {\n    return this.usersService.deleteAvatar(request.user.id);\n  }\n\n  @Post('avatar/amazonS3')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addAvatarOnAmazonS3(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatarUsingAmazonS3(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Post('avatar/postgres')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addAvatarOnPostgres(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatarInPGsql(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Get('files')\n  @ApiOkResponse({\n    description:\n      'All the private files of the user have been fetched successfully!',\n    type: [FileResponseDto],\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllPrivateFiles(@Req() request: RequestWithUser) {\n    return this.usersService.getAllPrivateFiles(request.user.id);\n  }\n\n  @Get('files/:id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a file that exists in the database',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A private file of the user has been fetched successfully!',\n    type: FileResponseDto,\n  })\n  @ApiNotFoundResponse({\n    description: 'A file with given id does not exist.',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  async getPrivateFile(\n    @Req() request: RequestWithUser,\n    @Param() { id }: FindOneParams,\n    @Res() response: Response,\n  ) {\n    const file = await this.usersService.getPrivateFile(\n      request.user.id,\n      Number(id),\n    );\n    file.stream.pipe(response);\n  }\n\n  @Post('files')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Upload a new private file for the logged in user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'A private file for this user has been uploaded successfully!',\n    type: PrivateFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addPrivateFile(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addPrivateFile(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Delete('files/:id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a product that exists in the database',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A private file of the user has been deleted successfully!',\n  })\n  @ApiNotFoundResponse({\n    description: 'A file with given id does not exist.',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  deletePrivateFile(\n    @Req() request: RequestWithUser,\n    @Param() { id }: FindOneParams,\n  ) {\n    return this.usersService.deletePrivateFile(request.user.id, Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseFilesModule->UsersModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nUsersModule -->\n\nLocalFilesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseFilesModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            LocalFilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { FilesModule } from '../files/files.module';\nimport { DatabaseFilesModule } from '../database-files/database-files.module';\nimport { LocalFilesModule } from '../local-files/local-files.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    FilesModule,\n    DatabaseFilesModule,\n    LocalFilesModule,\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-confirmation/verification-token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayload {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/local-authentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/request-with-user.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/tests/user.mock.ts\n            \n            variable\n            mockedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/token-payload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/two-factor-authentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/two-factor-authentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authorization/authorization.controller.ts\n            \n            controller\n            AuthorizationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authorization/authorization.service.ts\n            \n            injectable\n            AuthorizationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authorization/dto/update-permissions.dto.ts\n            \n            class\n            UpdatePermissionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authorization/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authorization/permission.guard.ts\n            \n            variable\n            PermissionGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authorization/role.guard.ts\n            \n            variable\n            RoleGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authorization/types/permission.type.ts\n            \n            variable\n            Permission\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/bull.config.ts\n            \n            variable\n            bullModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/elastic-search.config.ts\n            \n            variable\n            elasticSearchModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/redis.config.ts\n            \n            variable\n            cacheModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            class\n            TypeOrmConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeormModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database-logger.ts\n            \n            class\n            DatabaseLogger\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/env.validation.ts\n            \n            class\n            EnvironmentVariables\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/env.validation.ts\n            \n            function\n            validate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/features/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/categories/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/categories/exceptions/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/comments/commands/handlers/create-comment.handler.ts\n            \n            class\n            CreateCommentHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/commands/implementations/create-comment.command.ts\n            \n            class\n            CreateCommentCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/dto/get-comments.dto.ts\n            \n            class\n            GetCommentsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/comments/queries/handlers/get-comments.handler.ts\n            \n            class\n            GetCommentsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/queries/implementations/get-comments.query.ts\n            \n            class\n            GetCommentsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/database-files/database-files.controller.ts\n            \n            controller\n            DatabaseFilesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/database-files/database-files.service.ts\n            \n            injectable\n            DatabaseFilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/database-files/entities/database-file.entity.ts\n            \n            entity\n            DatabaseFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/email-confirmation/dto/confirm-email.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/email-confirmation/email-confirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/email-confirmation/email-confirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/features/email-confirmation/verification-token-payload.interface.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/email-scheduling/dto/email-schedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/email-scheduling/email-scheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/email-scheduling/email-scheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/files/entities/private-file.entity.ts\n            \n            entity\n            PrivateFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/files/entities/public-file.entity.ts\n            \n            entity\n            PublicFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/files/exceptions/file-not-found.exception.ts\n            \n            class\n            FileNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/google-authentication/dto/token-verification.dto.ts\n            \n            class\n            TokenVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/google-authentication/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/google-authentication/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/local-files/dto/local-file.dto.ts\n            \n            interface\n            LocalFileDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/local-files/entities/local-file.entity.ts\n            \n            entity\n            LocalFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.controller.ts\n            \n            controller\n            LocalFilesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.interceptor.ts\n            \n            interface\n            LocalFilesInterceptorOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.interceptor.ts\n            \n            function\n            LocalFilesInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.service.ts\n            \n            injectable\n            LocalFilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/optimize/dto/images-upload.dto.ts\n            \n            class\n            ImagesUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/optimize/image.processor.ts\n            \n            function\n            imageProcessor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/optimize/optimize.controller.ts\n            \n            controller\n            OptimizeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/posts/exceptions/post-not-found.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/posts/posts-search.service.ts\n            \n            injectable\n            PostsSearchService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/features/posts/types/post-search-document.interface.ts\n            \n            interface\n            PostSearchDocument\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/create-product.handler.ts\n            \n            class\n            CreateProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/delete-product.handler.ts\n            \n            class\n            DeleteProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/update-product.handler.ts\n            \n            class\n            UpdateProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/create-product.command.ts\n            \n            class\n            CreateProductCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/delete-product.command.ts\n            \n            class\n            DeleteProductCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/update-product.command.ts\n            \n            class\n            UpdateProductCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/products/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/dto/get-product.dto.ts\n            \n            class\n            GetProductDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/products/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/products/exceptions/file-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/features/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/products/queries/handlers/find-all-products.handler.ts\n            \n            class\n            FindAllProductsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/queries/handlers/find-product.handler.ts\n            \n            class\n            FindProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/queries/implementations/find-all-products.query.ts\n            \n            class\n            FindAllProductsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/queries/implementations/find-product.query.ts\n            \n            class\n            FindProductQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/types/book-properties.interface.ts\n            \n            interface\n            BookProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/types/car-properties.interface.ts\n            \n            interface\n            CarProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-upload-multiple.dto.ts\n            \n            class\n            FileUploadMultipleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/features/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/dto/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/entities/log.entity.ts\n            \n            entity\n            Log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/dto/find-one-params.dto.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/dto/object-with-id.dto.ts\n            \n            class\n            ObjectWithIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/dto/paginated-result.dto.ts\n            \n            class\n            PaginatedResultDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-with-start-id.dto.ts\n            \n            class\n            PaginationWithStartIdDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/exceptions-logger.filter.ts\n            \n            class\n            ExceptionsLoggerFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/exclude-null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/get-log-levels.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-pagination-props.ts\n            \n            variable\n            getPaginationProps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/logs.middleware.ts\n            \n            injectable\n            LogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/mocks/config.service.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mocks/jwt.service.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/recursively-strip-null-values.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @elastic/elasticsearch : ^8.2.1\n        \n            @nestjs/bull : ^0.5.5\n        \n            @nestjs/common : ^8.4.4\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.4.4\n        \n            @nestjs/cqrs : ^8.0.4\n        \n            @nestjs/elasticsearch : ^8.1.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : ^1.0.1\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.4\n        \n            @nestjs/schedule : ^2.0.1\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/terminus : ^8.0.6\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            aws-sdk : ^2.1128.0\n        \n            bcrypt : ^5.0.1\n        \n            bull : ^4.8.3\n        \n            cache-manager : ^3.6.3\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            googleapis : ^100.0.0\n        \n            nodemailer : ^6.7.5\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            qrcode : ^1.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.5.5\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.3.6\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategoriesPermission   (src/.../categoriesPermission.enum.ts)\n                        \n                        \n                            Environment   (src/.../env.validation.ts)\n                        \n                        \n                            PostgresErrorCode   (src/.../postgres-error-codes.enum.ts)\n                        \n                        \n                            ProductsPermission   (src/.../productsPermission.enum.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/features/categories/enums/categoriesPermission.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CategoriesPermission\n                    \n                \n                        \n                            \n                                 CreateCategory\n                            \n                        \n                        \n                            \n                                Value : CreateCategory\n                            \n                        \n                        \n                            \n                                 UpdateCategory\n                            \n                        \n                        \n                            \n                                Value : UpdateCategory\n                            \n                        \n                        \n                            \n                                 DeleteCategory\n                            \n                        \n                        \n                            \n                                Value : DeleteCategory\n                            \n                        \n                        \n                            \n                                 RestoreCategory\n                            \n                        \n                        \n                            \n                                Value : RestoreCategory\n                            \n                        \n            \n        \n\n    src/env.validation.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Local\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n    src/database/postgres-error-codes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n    src/features/products/enums/productsPermission.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductsPermission\n                    \n                \n                        \n                            \n                                 CreateProduct\n                            \n                        \n                        \n                            \n                                Value : CreateProduct\n                            \n                        \n                        \n                            \n                                 UpdateProduct\n                            \n                        \n                        \n                            \n                                Value : UpdateProduct\n                            \n                        \n                        \n                            \n                                 DeleteProduct\n                            \n                        \n                        \n                            \n                                Value : DeleteProduct\n                            \n                        \n            \n        \n\n    src/authorization/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 SuperAdmin\n                            \n                        \n                        \n                            \n                                Value : SuperAdmin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : Admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../get-log-levels.ts)\n                        \n                        \n                            imageProcessor   (src/.../image.processor.ts)\n                        \n                        \n                            LocalFilesInterceptor   (src/.../local-files.interceptor.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../recursively-strip-null-values.ts)\n                        \n                        \n                            validate   (src/.../env.validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/get-log-levels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/features/optimize/image.processor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        imageProcessor\n                        \n                    \n                \n            \n            \n                \nimageProcessor(job: Job, doneCallback: DoneCallback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    doneCallback\n                                    \n                                            DoneCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/features/local-files/local-files.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LocalFilesInterceptor\n                        \n                    \n                \n            \n            \n                \nLocalFilesInterceptor(options: LocalFilesInterceptorOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                LocalFilesInterceptorOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/recursively-strip-null-values.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recursivelyStripNullValues\n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/env.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(config: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nUnder Development: Do not use this repository for production purpose!\nDescription\nNest framework TypeScript starter repository with custom setup maintaining industry standard best practices. Just clone and start building without worrying about anything. Focus on the product not the setup.\nOverview\n\nconfig/ setup - separated segment for each config\napp.config.ts\naws.config.ts\ndatabase.config.ts\njwt.config.ts\ntypeorm.config.ts\n\n\nauthentication module - JWT token based cookie authentication out of the box\ndatabase module - Typeorm\nAPI validation and serialization\ncustom pagination (page, limit) - check the src/features/comments module\nCQRS - check the src/features/comments module\nOut of the box file upload feature module to Amazon S3 (both private and public)\nCQRS + pagination - a complete module => src/features/products\nSwagger Open API specification setup out of the box - check the src/features/users/users.controller.ts for examples\nPostgreSQL database file storing support - check the avatar upload of users.services.ts and src/features/database-files\nSoft Delete example - check the src/features/categories module\nTwo factor authentication setup out of the box - use JwtTwoFactorGuard when some specific endpoints need 2FA\nLogging with built-in logger and TypeORM is configurable through .env - TYPEORM_LOGGING=true - specify false to disable database logging\nHealth module\nDocumentation with Compodoc and JSDoc - take a look on the src/features/files/files.service.ts for a detailed example. And for the generation command, run pnpm run documentation:serve. Or to customize it, check the package.json.\nSending scheduled emails with cron and Nodemailer - src/features/email-scheduling and check the email service in src/email\nOut of the box Google authentication module - check out the src/features/google-authentication module\nRoles and Permissions based authorization setup - check out the src/authorization module. For implementation, check the src/features/categories and src/features/products modules\nIn memory cache - check the src/features/categories module\nRedis cache setup out of the box - check the src/features/posts.module.ts module\nElasticSearch setup out of the box with docker-compose - check the /src/features/search.module.ts module and /src/features/posts.module.ts for implementation details\nQueue setup example - check the /src/features/optimize module\n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthorizationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LocalFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OptimizeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthorizationModule\n\n\n\ncluster_AuthorizationModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_DatabaseFilesModule\n\n\n\ncluster_DatabaseFilesModule_exports\n\n\n\ncluster_DatabaseFilesModule_providers\n\n\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_LocalFilesModule\n\n\n\ncluster_LocalFilesModule_exports\n\n\n\ncluster_LocalFilesModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthorizationModule\n\nAuthorizationModule\n\nAppModule -->\n\nAuthorizationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseFilesModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseFilesModule->AppModule\n\n\n\n\n\nDatabaseFilesService \n\nDatabaseFilesService \n\nDatabaseFilesService  -->\n\nDatabaseFilesModule->DatabaseFilesService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nUsersModule -->\n\nLocalFilesModule->UsersModule\n\n\n\nAppModule -->\n\nLocalFilesModule->AppModule\n\n\n\n\n\nLocalFilesService \n\nLocalFilesService \n\nLocalFilesService  -->\n\nLocalFilesModule->LocalFilesService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\nAuthorizationService\n\nAuthorizationService\n\nAuthorizationModule -->\n\nAuthorizationService->AuthorizationModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nDatabaseFilesService\n\nDatabaseFilesService\n\nDatabaseFilesModule -->\n\nDatabaseFilesService->DatabaseFilesModule\n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\nLocalFilesService\n\nLocalFilesService\n\nLocalFilesModule -->\n\nLocalFilesService->LocalFilesModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostsModule -->\n\nPostsSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        20 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    29 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    52 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Permission   (src/.../permission.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authorization/types/permission.type.ts\n    \n    \n        \n            \n                \n                    \n                    Permission\n                \n            \n            \n                \n                            ProductsPermission | CategoriesPermission\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bullModuleOptions   (src/.../bull.config.ts)\n                        \n                        \n                            cacheModuleOptions   (src/.../redis.config.ts)\n                        \n                        \n                            elasticSearchModuleOptions   (src/.../elastic-search.config.ts)\n                        \n                        \n                            getPaginationProps   (src/.../get-pagination-props.ts)\n                        \n                        \n                            mockedConfigService   (src/.../config.service.ts)\n                        \n                        \n                            mockedJwtService   (src/.../jwt.service.ts)\n                        \n                        \n                            mockedUser   (src/.../user.mock.ts)\n                        \n                        \n                            Permission   (src/.../permission.type.ts)\n                        \n                        \n                            PermissionGuard   (src/.../permission.guard.ts)\n                        \n                        \n                            RoleGuard   (src/.../role.guard.ts)\n                        \n                        \n                            typeormModuleOptions   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/bull.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bullModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SharedBullAsyncConfiguration\n\n                    \n                \n                \n                    \n                        Default value : {\n  imports: [ConfigModule],\n  inject: [ConfigService],\n  useFactory: (configService: ConfigService) => ({\n    redis: {\n      host: configService.get('redis.host'),\n      port: configService.get('redis.port'),\n    },\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/config/redis.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cacheModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CacheModuleAsyncOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  imports: [ConfigModule],\n  inject: [ConfigService],\n  useFactory: (configService: ConfigService) => ({\n    store: redisStore,\n    host: configService.get('redis.host'),\n    port: configService.get('redis.port'),\n    ttl: 120,\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/config/elastic-search.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        elasticSearchModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElasticsearchModuleAsyncOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  imports: [ConfigModule],\n  inject: [ConfigService],\n  useFactory: (configService: ConfigService) => ({\n    node: configService.get('elasticSearch.node'),\n    auth: {\n      username: configService.get('elasticSearch.auth.username'),\n      password: configService.get('elasticSearch.auth.password'),\n    },\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/get-pagination-props.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getPaginationProps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (paginationDto: PaginationDto) => {\n  if (Object.keys(paginationDto).length === 0) {\n    return {\n      page: 1,\n      limit: 20,\n      skippedItems: 0,\n    };\n  }\n\n  const page = Number(paginationDto.page);\n  const limit = Number(paginationDto.limit);\n  const skippedItems = (page - 1) * limit;\n\n  return {\n    page,\n    limit: limit > 20 ? 20 : limit,\n    skippedItems,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get(key: string) {\n    switch (key) {\n      case 'JWT_EXPIRATION_TIME':\n        return '3600';\n    }\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedJwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  sign: () => '',\n}\n                    \n                \n\n\n        \n    \n\n    src/authentication/tests/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: 1,\n  email: 'user@email.com',\n  name: 'John',\n  password: 'hash',\n  address: {\n    id: 1,\n    street: 'streetName',\n    city: 'cityName',\n    country: 'countryName',\n  },\n  isTwoFactorAuthenticationEnabled: false,\n}\n                    \n                \n\n\n        \n    \n\n    src/authorization/types/permission.type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  ...ProductsPermission,\n  ...CategoriesPermission,\n}\n                    \n                \n\n\n        \n    \n\n    src/authorization/permission.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PermissionGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (permission: Permission): Type => {\n  class PermissionGuardMixin extends JwtAuthenticationGuard {\n    async canActivate(context: ExecutionContext) {\n      await super.canActivate(context);\n\n      const request = context.switchToHttp().getRequest();\n      const user = request.user;\n\n      return user?.permissions.includes(permission);\n    }\n  }\n\n  return mixin(PermissionGuardMixin);\n}\n                    \n                \n\n\n        \n    \n\n    src/authorization/role.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: Role): Type => {\n  class RoleGuardMixin extends JwtAuthenticationGuard {\n    async canActivate(context: ExecutionContext) {\n      await super.canActivate(context);\n\n      const request = context.switchToHttp().getRequest();\n      const user = request.user;\n\n      return user?.role === role;\n    }\n  }\n\n  return mixin(RoleGuardMixin);\n}\n                    \n                \n\n\n        \n    \n\n    src/config/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeormModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleAsyncOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  imports: [ConfigModule],\n  inject: [ConfigService],\n  useFactory: async (\n    configService: ConfigService,\n  ): Promise => TypeOrmConfig.getOrmConfig(configService),\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
