var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,1.63,1,3.098]],["body/entities/Address.html",[0,2.317,1,4.403,2,2.311,3,0.089,4,0.089,5,0.07,6,4.108,7,0.307,8,1.219,9,3.315,10,6.26,11,6.26,12,1.658,13,6.26,14,0.89,15,2.757,16,0.461,17,0.009,18,1.586,19,1.81,20,4.446,21,0.606,22,4.653,23,4.653,24,1.572,25,3.781,26,4.653,27,4.653,28,4.108,29,6.269,30,4.653,31,0.188,32,5.535,33,1.514,34,4.653,35,0.089,36,0.208,37,0.006,38,0.006]],["title/controllers/AppController.html",[39,1.63,40,3.3]],["body/controllers/AppController.html",[3,0.092,4,0.092,5,0.072,7,0.315,17,0.009,18,1.241,19,1.093,21,0.366,31,0.192,35,0.092,36,0.214,37,0.006,38,0.006,39,2.36,40,4.777,41,1.815,42,4.221,43,1.564,44,7.669,45,4.78,46,1.144,47,6.383,48,0.787,49,3.696,50,2.154,51,3.852,52,2.55,53,3.577,54,3.852,55,2.487,56,5.144,57,4.78,58,6.383,59,4.78,60,6.383,61,4.78,62,6.383,63,4.78,64,6.383,65,4.78,66,6.383,67,3.852,68,1.171,69,3.577,70,4.221,71,4.221]],["title/modules/AppModule.html",[72,1.472,73,3.3]],["body/modules/AppModule.html",[3,0.057,4,0.057,5,0.045,14,0.421,16,0.173,17,0.009,21,0.227,31,0.263,35,0.057,36,0.133,37,0.004,38,0.004,40,4.116,41,1.721,43,0.727,46,0.71,48,0.489,50,1.337,72,1.512,73,6.655,74,1.337,75,2.177,76,2.619,77,2.619,78,4.913,79,4.913,80,4.913,81,4.645,82,4.913,83,4.645,84,4.913,85,4.645,86,4.913,87,4.913,88,4.913,89,4.645,90,2.331,91,1.526,92,1.473,93,2.966,94,2.108,95,2.966,96,4.533,97,6.159,98,2.966,99,0.55,100,0.454,101,2.966,102,2.083,103,3.653,104,4.533,105,1.873,106,2.966,107,2.966,108,2.862,109,2.966,110,2.966,111,2.619,112,2.966,113,2.966,114,2.966,115,4.533,116,2.966,117,4.533,118,2.966,119,3.392,120,2.619,121,4.533,122,2.966,123,4.533,124,2.966,125,5.501,126,4.533,127,2.391,128,2.966,129,2.966,130,2.966,131,1.873,132,4.002,133,2.966,134,1.644,135,2.966,136,2.22,137,2.966,138,2.966,139,2.966,140,2.966,141,2.558,142,2.966,143,2.966,144,2.966,145,1.582,146,6.159,147,6.159,148,2.966,149,2.22,150,2.22,151,2.966]],["title/controllers/AuthenticationController.html",[39,1.63,152,3.3]],["body/controllers/AuthenticationController.html",[3,0.06,4,0.06,5,0.047,7,0.204,14,0.96,15,2.001,16,0.415,17,0.009,19,1.547,21,0.518,31,0.238,35,0.06,36,0.139,37,0.005,38,0.005,39,1.146,41,1.177,43,1.149,46,1.62,48,0.511,55,2.047,68,1.658,99,1.255,100,1.035,152,3.508,153,2.738,154,1.719,155,2.059,156,4.14,157,2.301,158,4.688,159,4.688,160,3.113,161,3.778,162,2.738,163,4.773,164,3.101,165,3.101,166,4.234,167,3.101,168,3.101,169,4.23,170,3.101,171,1.78,172,3.101,173,3.101,174,3.101,175,3.101,176,3.101,177,3.101,178,2.738,179,4.425,180,4.688,181,3.101,182,4.14,183,1.958,184,2.499,185,1.398,186,2.059,187,2.059,188,4.14,189,1.958,190,1.595,191,2.807,192,1.958,193,3.406,194,2.321,195,3.101,196,2.738,197,1.869,198,2.825,199,3.293,200,2.321,201,3.101,202,2.321,203,1.719,204,2.059,205,3.101,206,2.738,207,0.796,208,1.489,209,1.604,210,3.293,211,3.101,212,3.293,213,3.101,214,3.101,215,3.101,216,5.563,217,3.101,218,4.14,219,4.425,220,3.101,221,3.101,222,4.14,223,3.101,224,3.101,225,3.101,226,3.101,227,4.688,228,1.869,229,2.499,230,3.101,231,1.829,232,3.101,233,2.738,234,2.738,235,3.101,236,3.101,237,3.101,238,3.101,239,3.101,240,3.101]],["title/modules/AuthenticationModule.html",[72,1.472,78,3.098]],["body/modules/AuthenticationModule.html",[3,0.072,4,0.072,5,0.056,17,0.009,31,0.257,35,0.072,36,0.167,37,0.005,38,0.005,41,2.038,48,0.614,49,3.542,50,1.679,72,1.791,74,1.679,75,2.579,78,6.228,89,5.05,90,2.761,91,1.916,92,1.851,94,2.927,105,3.974,111,3.29,145,2.864,152,4.71,157,1.101,160,2.474,193,5.115,194,4.018,198,2.245,241,3.29,242,3.726,243,3.29,244,3.29,245,5.341,246,5.341,247,5.341,248,5.341,249,5.05,250,3.726,251,4.71,252,3.565,253,3.726,254,3.003,255,5.369,256,2.065,257,5.369,258,3.726,259,3.726,260,3.726,261,4.348,262,2.617,263,3.726,264,4.018,265,3.236,266,3.726,267,3.003,268,3.003,269,2.788,270,3.003,271,3.726,272,3.29,273,3.726]],["title/injectables/AuthenticationService.html",[193,2.658,274,0.941]],["body/injectables/AuthenticationService.html",[3,0.047,4,0.047,5,0.037,7,0.162,9,2.974,14,0.919,15,1.55,16,0.377,17,0.009,18,1.546,21,0.519,24,1.622,31,0.212,35,0.047,36,0.11,37,0.004,38,0.004,43,0.96,46,1.549,48,0.405,49,3.491,50,1.109,55,2.197,68,1.488,99,1.201,100,0.99,155,1.634,157,2.145,160,1.634,161,3.157,171,1.487,178,3.459,179,3.908,182,3.459,191,3.214,192,1.553,193,2.36,196,2.172,207,1.005,208,2.055,209,1.67,219,3.428,228,3.661,231,2.37,254,1.983,269,2.931,272,3.459,274,0.836,275,0.909,276,2.172,277,3.917,278,5.564,279,4.88,280,3.917,281,4.88,282,2.172,283,6.788,284,2.46,285,3.917,286,6.472,287,2.46,288,2.261,289,2.46,290,2.46,291,4.913,292,2.46,293,1.553,294,1.634,295,4.546,296,2.36,297,3.917,298,2.46,299,2.46,300,2.46,301,6.472,302,2.46,303,5.364,304,2.172,305,3.157,306,2.172,307,2.46,308,3.428,309,2.46,310,3.081,311,1.841,312,2.46,313,2.172,314,3.157,315,3.917,316,2.46,317,1.483,318,2.931,319,2.46,320,2.46,321,2.968,322,2.231,323,2.46,324,2.172,325,4.88,326,2.46,327,2.46,328,4.88,329,2.46,330,2.172,331,2.46,332,2.46,333,3.917,334,3.917,335,2.931,336,3.917,337,2.46,338,2.46,339,2.46,340,5.564,341,3.513,342,5.564,343,3.917,344,2.46,345,2.46,346,2.46,347,2.46,348,2.46,349,3.917,350,3.917,351,2.172]],["title/interfaces/BookProperties.html",[352,2.19,353,3.098]],["body/interfaces/BookProperties.html",[3,0.12,4,0.12,5,0.094,7,0.411,8,1.471,16,0.441,17,0.009,18,1.713,35,0.12,37,0.007,38,0.007,352,3.1,353,5.315,354,3.941,355,5.512,356,5.031,357,8.464,358,8.464]],["title/interfaces/CarProperties.html",[352,2.19,359,3.098]],["body/interfaces/CarProperties.html",[3,0.117,4,0.117,5,0.091,7,0.4,8,1.447,16,0.489,17,0.009,18,1.63,24,1.523,35,0.117,37,0.007,38,0.007,352,3.017,354,3.834,356,4.895,359,5.226,360,5.363,361,8.385,362,8.385,363,7.441,364,6.074,365,6.074]],["title/controllers/CategoriesController.html",[39,1.63,366,3.3]],["body/controllers/CategoriesController.html",[3,0.066,4,0.066,5,0.052,7,0.227,12,1.552,14,1.004,16,0.412,17,0.009,19,1.748,21,0.585,31,0.222,35,0.066,36,0.154,37,0.005,38,0.005,39,1.272,41,1.306,43,1.241,46,1.831,48,0.567,52,1.835,68,1.873,99,1.312,100,1.082,154,1.907,183,3.198,185,2.71,189,2.172,190,1.769,209,1.177,366,3.791,367,3.038,368,3.038,369,3.198,370,4.659,371,5.857,372,3.558,373,3.791,374,4.473,375,3.791,376,3.441,377,4.659,378,3.441,379,4.669,380,3.441,381,5.066,382,4.473,383,3.441,384,3.441,385,5.605,386,3.558,387,3.441,388,3.441,389,4.083,390,3.441,391,3.441,392,5.066,393,3.441,394,3.441,395,4.659,396,4.083,397,3.441,398,2.773,399,2.172,400,2.416,401,2.773,402,2.773,403,2.416,404,2.773,405,3.993,406,3.038,407,1.769,408,4.473,409,2.172,410,3.441,411,3.441,412,3.441,413,3.441,414,3.441,415,3.441,416,3.441,417,3.441,418,3.441,419,3.441,420,3.441,421,3.441,422,3.441,423,3.441,424,3.441]],["title/modules/CategoriesModule.html",[72,1.472,79,3.098]],["body/modules/CategoriesModule.html",[3,0.107,4,0.107,5,0.084,17,0.009,31,0.252,35,0.107,36,0.25,37,0.007,38,0.007,41,2.679,48,0.919,72,2.355,74,2.514,75,3.389,79,6.021,90,3.629,91,2.869,92,2.77,94,2.594,145,3.764,366,5.793,379,3.521,405,5.693,406,4.925,425,4.925,426,4.925,427,5.578,428,5.578,429,3.091,430,1.908,431,4.925,432,5.578]],["title/injectables/CategoriesService.html",[274,0.941,405,2.929]],["body/injectables/CategoriesService.html",[3,0.059,4,0.059,5,0.046,7,0.202,12,1.656,14,1.005,16,0.412,17,0.009,21,0.58,24,2.043,31,0.221,33,0.996,35,0.059,36,0.137,37,0.005,38,0.005,43,1.137,46,1.761,48,0.504,55,2.035,68,1.648,99,1.313,100,1.083,141,1.422,157,2.483,171,2.128,207,1.19,208,0.971,231,2.869,274,0.99,275,1.131,321,3.337,322,2.509,369,2.929,370,4.394,371,5.525,372,3.259,373,3.472,374,4.097,375,3.472,377,4.724,379,4.994,395,4.394,405,3.081,407,1.573,408,4.097,409,1.931,430,1.047,431,2.701,433,2.701,434,3.059,435,2.909,436,3.059,437,4.64,438,4.64,439,3.059,440,3.059,441,3.059,442,3.739,443,3.059,444,3.739,445,3.059,446,4.64,447,3.059,448,3.739,449,3.059,450,1.469,451,2.289,452,3.059,453,2.031,454,3.059,455,3.059,456,3.059,457,4.64,458,3.611,459,4.394,460,3.059,461,4.64,462,6.257,463,3.059,464,5.606,465,2.289,466,3.059,467,2.289,468,3.059,469,3.059,470,3.059]],["title/entities/Category.html",[0,1.63,379,2.784]],["body/entities/Category.html",[0,2.399,2,2.433,3,0.094,4,0.094,5,0.074,7,0.323,8,1.262,9,3.287,12,1.702,16,0.451,17,0.009,18,1.262,19,1.77,20,3.88,21,0.592,24,1.627,25,3.88,31,0.195,33,1.595,35,0.094,36,0.219,37,0.006,38,0.006,100,1.113,185,3.806,379,4.096,459,5.11,471,4.326,472,7.275,473,5.729,474,7.275,475,4.9,476,4.9,477,4.9,478,4.326,479,6.489,480,4.9,481,3.949,482,5.729]],["title/classes/CategoryNotFoundException.html",[36,0.198,451,3.3]],["body/classes/CategoryNotFoundException.html",[3,0.116,4,0.116,5,0.091,12,1.41,14,0.856,16,0.351,17,0.009,21,0.461,24,2.01,31,0.181,35,0.116,36,0.27,37,0.007,38,0.007,48,0.993,99,1.118,100,0.922,207,1.546,451,5.542,483,1.286,484,6.54,485,4.003,486,2.97,487,4.832,488,7.406,489,4.233,490,7.406,491,6.027,492,4.003]],["title/entities/Comment.html",[0,1.63,493,2.444]],["body/entities/Comment.html",[0,2.336,2,2.339,3,0.091,4,0.091,5,0.071,7,0.31,8,1.229,9,3.267,12,1.668,15,2.525,16,0.444,17,0.009,18,1.229,19,1.743,20,3.804,21,0.583,24,1.584,25,3.804,31,0.214,33,1.533,35,0.091,36,0.211,37,0.006,38,0.006,185,3.921,481,3.795,493,3.502,494,4.158,495,4.791,496,4.298,497,5.093,498,5.58,499,4.709,500,4.709,501,4.709,502,6.319,503,4.709,504,5.337,505,2.512]],["title/controllers/CommentsController.html",[39,1.63,506,3.3]],["body/controllers/CommentsController.html",[3,0.078,4,0.078,5,0.061,7,0.268,14,0.812,15,1.817,16,0.333,17,0.009,19,1.308,21,0.438,31,0.251,35,0.078,36,0.182,37,0.006,38,0.006,39,1.506,41,1.547,43,1.401,46,1.37,48,0.671,52,2.173,55,1.233,68,1.401,99,1.061,100,0.876,154,2.258,157,2.313,163,4.138,166,3.527,171,1.547,183,3.612,185,2.98,186,3.799,187,2.705,189,2.572,190,2.095,197,2.455,199,2.861,204,2.705,209,1.394,210,2.861,212,2.861,401,3.283,407,2.095,493,3.664,506,4.281,507,3.597,508,3.283,509,5.838,510,5.838,511,3.597,512,4.762,513,4.074,514,4.074,515,5.366,516,4.074,517,2.66,518,4.61,519,3.049,520,3.283,521,4.391,522,3.597,523,3.283,524,3.597,525,4.074,526,2.351,527,2.705,528,2.705,529,2.861,530,4.074,531,4.074,532,3.597,533,2.705,534,3.171,535,2.705,536,3.171,537,3.283,538,4.074,539,4.074]],["title/modules/CommentsModule.html",[72,1.472,80,3.098]],["body/modules/CommentsModule.html",[3,0.1,4,0.1,5,0.078,17,0.009,31,0.261,35,0.1,36,0.233,37,0.007,38,0.007,41,2.564,48,0.858,72,2.253,74,2.347,75,3.244,80,5.913,90,3.473,91,2.678,92,2.587,94,2.422,145,3.602,429,2.886,430,1.782,493,2.886,506,5.609,521,5.591,522,4.599,529,3.658,540,4.599,541,4.599,542,5.208,543,5.963,544,2.678,545,5.054,546,4.599,547,5.208,548,5.208,549,5.054,550,5.208,551,5.208,552,5.208]],["title/injectables/CommentsService.html",[274,0.941,521,2.929]],["body/injectables/CommentsService.html",[3,0.08,4,0.08,5,0.063,7,0.276,14,0.952,15,2.303,16,0.391,17,0.009,21,0.513,24,1.681,31,0.252,35,0.08,36,0.187,37,0.006,38,0.006,43,1.427,46,1.395,48,0.689,52,2.231,68,1.427,99,1.244,100,1.026,157,2.333,171,1.588,207,1.073,208,1.328,274,1.243,275,1.546,407,2.151,493,3.229,495,4.371,505,2.231,509,5.145,510,5.921,511,5.145,512,4.817,517,2.71,521,3.87,523,3.371,526,2.414,527,2.777,528,2.777,529,2.937,533,3.87,544,2.151,553,3.693,554,3.693,555,6.973,556,7.155,557,4.182,558,4.182,559,4.182,560,4.25,561,4.182,562,2.777,563,2.937,564,3.693,565,3.693,566,2.937,567,4.182,568,3.693,569,3.693,570,4.182,571,3.693,572,4.182]],["title/classes/CreateCategoryDto.html",[36,0.198,377,3.098]],["body/classes/CreateCategoryDto.html",[3,0.118,4,0.118,5,0.092,7,0.405,8,1.457,16,0.358,17,0.009,18,1.457,19,1.405,21,0.47,31,0.185,35,0.118,36,0.336,37,0.007,38,0.007,100,1.238,377,5.264,483,1.311,573,6.617,574,4.952,575,3.703,576,5.426,577,3.722,578,3.997,579,2.464]],["title/classes/CreateCommentCommand.html",[36,0.198,563,3.098]],["body/classes/CreateCommentCommand.html",[3,0.102,4,0.102,5,0.08,7,0.349,8,1.327,9,3.126,14,0.752,15,2.623,16,0.44,17,0.009,21,0.578,31,0.205,35,0.102,36,0.237,37,0.007,38,0.007,99,0.983,100,0.81,207,1.752,209,2.894,407,2.724,483,1.13,493,4.423,495,4.978,505,2.825,512,5.485,523,4.268,563,4.795,580,7.047,581,4.676,582,5.296,583,5.296,584,5.296,585,5.296]],["title/classes/CreateCommentDto.html",[36,0.198,512,2.929]],["body/classes/CreateCommentDto.html",[3,0.106,4,0.106,5,0.083,7,0.362,8,1.36,16,0.472,17,0.009,18,1.36,19,1.599,21,0.535,31,0.231,35,0.106,36,0.344,37,0.007,38,0.007,185,3.466,483,1.173,496,4.635,512,4.645,575,3.314,577,3.474,578,3.731,579,2.205,586,6.791,587,4.856,588,5.5,589,6.057,590,5.5,591,5.5,592,3.472,593,6.176,594,5.5,595,5.5]],["title/classes/CreateCommentHandler.html",[36,0.198,545,3.3]],["body/classes/CreateCommentHandler.html",[3,0.092,4,0.092,5,0.072,7,0.314,14,0.904,16,0.371,17,0.009,21,0.487,31,0.24,33,1.551,35,0.092,36,0.213,37,0.006,38,0.006,43,1.561,46,1.141,55,1.927,68,1.168,99,1.182,100,0.975,157,2.12,207,1.634,208,1.514,231,2.485,430,1.631,435,3.562,450,2.289,483,1.017,493,3.977,495,3.839,517,2.962,529,3.347,544,2.451,545,4.767,563,5.38,565,4.208,596,6.336,597,4.208,598,3.398,599,5.37,600,4.022,601,4.208,602,4.766,603,5.625,604,4.767,605,4.766,606,4.767,607,3.566,608,4.208,609,4.766,610,4.208,611,6.37,612,4.766,613,4.766]],["title/classes/CreateLogDto.html",[36,0.198,614,3.3]],["body/classes/CreateLogDto.html",[3,0.107,4,0.107,5,0.084,7,0.368,8,1.372,16,0.451,17,0.009,18,1.667,19,1.77,21,0.592,31,0.168,35,0.107,36,0.316,37,0.007,38,0.007,483,1.19,577,4.324,579,2.236,614,5.281,615,7.184,616,4.925,617,5.793,618,5.793,619,5.437,620,5.578,621,5.578,622,5.578]],["title/classes/CreatePostDto.html",[36,0.198,623,3.098]],["body/classes/CreatePostDto.html",[3,0.104,4,0.104,5,0.081,7,0.356,8,1.345,16,0.444,17,0.009,18,1.653,19,1.744,21,0.584,31,0.162,35,0.104,36,0.31,37,0.007,38,0.007,141,2.513,483,1.153,496,4.597,575,4.168,577,3.994,578,4.069,579,2.167,623,4.858,624,7.101,625,4.356,626,6.736,627,6.148,628,5.405,629,5.405,630,5.405,631,5.405,632,5.405,633,3.834,634,4.773]],["title/classes/CreateProductCommand.html",[36,0.198,635,3.098]],["body/classes/CreateProductCommand.html",[3,0.102,4,0.102,5,0.08,7,0.349,8,1.327,9,3.126,14,0.752,15,2.623,16,0.44,17,0.009,21,0.578,31,0.205,35,0.102,36,0.237,37,0.007,38,0.007,99,0.983,100,0.81,207,1.752,209,2.894,407,2.724,483,1.13,505,2.825,635,4.795,636,7.047,637,3.963,638,4.102,639,3.597,640,5.296,641,5.214,642,4.268,643,4.676,644,4.676,645,3.72]],["title/classes/CreateProductDto.html",[36,0.198,641,2.784]],["body/classes/CreateProductDto.html",[3,0.105,4,0.105,5,0.082,7,0.359,8,1.62,14,0.986,16,0.405,17,0.009,18,1.351,19,1.588,21,0.531,31,0.23,35,0.105,36,0.311,37,0.007,38,0.007,100,1.171,353,5.375,359,5.375,483,1.161,575,3.28,577,3.451,578,3.706,579,2.182,633,4.242,641,4.386,646,6.758,647,4.073,648,4.806,649,5.443,650,4.806,651,6.135,652,4.806]],["title/classes/CreateProductHandler.html",[36,0.198,653,3.3]],["body/classes/CreateProductHandler.html",[3,0.092,4,0.092,5,0.072,7,0.314,14,0.904,16,0.371,17,0.009,21,0.487,31,0.24,33,1.551,35,0.092,36,0.213,37,0.006,38,0.006,43,1.561,46,1.141,55,1.927,68,1.168,99,1.182,100,0.975,157,2.12,207,1.634,208,1.514,231,2.485,430,1.631,435,3.562,450,2.289,483,1.017,517,2.962,544,2.451,598,3.398,599,5.37,600,4.022,604,4.767,606,4.767,607,3.566,608,4.208,635,5.38,638,3.164,639,3.234,653,4.767,654,6.336,655,3.347,656,3.347,657,4.766,658,4.474,659,4.766,660,2.872,661,3.566,662,4.766,663,3.347,664,6.37,665,4.766,666,4.766]],["title/classes/CreateUserDto.html",[36,0.198,667,3.098]],["body/classes/CreateUserDto.html",[3,0.097,4,0.097,5,0.076,7,0.333,8,1.288,14,0.94,16,0.457,17,0.009,18,1.679,19,1.793,21,0.6,31,0.152,35,0.097,36,0.297,37,0.006,38,0.006,100,1.131,288,4.265,317,4.453,483,1.079,575,3.048,577,3.894,578,4.182,579,2.028,633,3.672,667,4.653,668,7.187,669,4.076,670,5.955,671,5.955,672,5.057,673,5.057,674,4.465,675,5.057,676,5.057,677,5.85,678,5.057,679,4.076,680,4.465,681,4.076,682,4.465]],["title/injectables/CustomLogger.html",[274,0.941,683,3.098]],["body/injectables/CustomLogger.html",[3,0.057,4,0.057,5,0.045,7,0.195,8,0.88,14,0.992,16,0.424,17,0.009,18,1.758,21,0.556,31,0.199,35,0.057,36,0.133,37,0.004,38,0.004,43,1.109,46,1.587,48,0.488,49,3.74,50,1.334,55,0.896,67,5.633,69,2.216,70,3.996,99,1.297,100,1.07,102,4.656,207,1.161,208,1.745,209,1.88,274,0.966,275,1.095,308,4.909,486,1.815,617,6.635,618,4.961,619,5.867,683,3.179,684,6.622,685,2.386,686,5.494,687,5.439,688,3.708,689,4.526,690,3.996,691,2.961,692,4.604,693,6.153,694,4.526,695,4.526,696,2.961,697,4.526,698,6.153,699,2.961,700,4.526,701,2.961,702,4.526,703,2.961,704,4.526,705,2.961,706,2.961,707,2.961,708,2.386,709,2.386,710,2.961,711,2.614,712,2.961,713,2.961,714,2.961,715,2.961,716,2.216,717,2.961,718,2.961,719,6.629,720,2.961,721,2.961,722,4.526]],["title/entities/DatabaseFile.html",[0,1.63,723,2.929]],["body/entities/DatabaseFile.html",[0,2.502,2,2.595,3,0.1,4,0.1,5,0.079,7,0.344,8,1.316,9,3.248,12,1.756,16,0.463,17,0.009,18,1.316,19,1.716,20,4.235,21,0.574,24,1.697,25,4.004,31,0.157,33,1.701,35,0.1,36,0.234,37,0.007,38,0.007,723,4.495,724,5.273,725,7.011,726,3.67,727,4.739,728,4.739,729,6.768,730,4.614,731,6.768,732,5.225,733,4.211,734,4.211]],["title/controllers/DatabaseFilesController.html",[39,1.63,735,3.3]],["body/controllers/DatabaseFilesController.html",[3,0.09,4,0.09,5,0.094,7,0.308,12,1.469,14,0.662,16,0.366,17,0.009,19,1.067,21,0.357,24,1.78,31,0.228,35,0.09,36,0.209,37,0.006,38,0.006,39,1.725,41,1.772,43,1.539,46,1.117,48,0.769,52,2.489,55,1.9,68,1.143,99,0.866,100,0.714,103,3.761,131,3.965,141,2.17,154,2.586,157,2.097,171,1.772,209,1.597,231,1.82,322,1.871,386,4.412,399,2.946,496,3.785,724,4.171,735,4.7,736,3.761,737,3.625,738,3.965,739,6.269,740,4.121,741,5.54,742,4.667,743,5.546,744,4.7,745,4.121,746,3.761,747,4.482,748,3.099,749,4.667,750,4.7,751,2.318,752,4.667,753,4.121,754,3.761,755,4.121,756,4.667,757,4.667,758,4.121,759,4.121,760,4.121,761,4.121,762,4.121,763,4.121]],["title/modules/DatabaseFilesModule.html",[72,1.472,81,2.929]],["body/modules/DatabaseFilesModule.html",[3,0.099,4,0.099,5,0.078,17,0.009,31,0.252,35,0.099,36,0.232,37,0.007,38,0.007,41,2.553,48,0.852,50,2.332,72,2.244,74,2.332,75,3.23,81,5.683,90,3.458,91,2.661,92,2.57,94,2.406,105,4.245,131,3.266,145,3.587,252,4.466,429,2.867,430,1.77,723,3.436,724,3.436,735,5.591,737,3.881,747,5.659,748,3.436,764,4.568,765,4.568,766,4.568,767,4.568,768,4.568,769,3.118,770,4.568,771,5.174]],["title/injectables/DatabaseFilesService.html",[274,0.941,747,2.784]],["body/injectables/DatabaseFilesService.html",[3,0.072,4,0.072,5,0.104,7,0.246,12,0.874,14,0.979,16,0.402,17,0.009,18,1.225,21,0.527,24,1.908,31,0.207,33,1.216,35,0.072,36,0.167,37,0.005,38,0.005,43,1.318,46,1.509,48,0.615,55,1.907,68,1.318,99,1.279,100,1.055,131,4.613,157,2.415,171,2.042,207,1.38,208,1.186,231,2.689,274,1.147,275,1.381,321,2.869,322,2.156,430,1.278,435,3.206,450,1.794,465,2.795,467,2.795,487,3.798,723,3.572,724,4.853,727,2.358,728,4.353,747,3.395,768,3.298,769,2.251,772,3.01,773,5.378,774,4.749,775,6.303,776,3.735,777,3.735,778,5.378,779,5.378,780,6.412,781,3.735,782,4.579,783,4.749,784,3.735,785,3.735,786,5.079,787,3.735,788,5.565,789,3.735,790,5.079,791,3.735,792,3.735,793,3.735,794,3.735]],["title/classes/DatabaseLogger.html",[36,0.198,795,3.3]],["body/classes/DatabaseLogger.html",[3,0.123,4,0.052,5,0.041,7,0.179,8,0.824,14,1.001,16,0.411,17,0.009,18,1.666,21,0.558,24,1.306,31,0.127,33,0.885,35,0.052,36,0.122,37,0.004,38,0.004,43,1.039,46,1.689,48,0.448,67,5.879,68,1.836,99,1.598,100,1.079,102,4.478,171,2.233,208,2.145,209,1.782,293,1.717,294,1.806,308,3.659,314,2.192,318,2.035,322,1.7,483,0.58,518,6.176,598,2.261,618,4.771,619,4.478,685,2.192,688,4.251,690,5.194,780,6.526,795,3.172,796,6.619,797,5.209,798,4.478,799,4.239,800,4.239,801,5.209,802,5.209,803,4.239,804,4.239,805,4.239,806,2.72,807,2.72,808,2.72,809,4.239,810,2.72,811,4.239,812,2.72,813,2.72,814,2.72,815,2.72,816,2.72,817,5.882,818,4.239,819,2.72,820,4.239,821,2.72,822,2.72,823,5.882,824,2.72,825,2.72,826,2.72,827,4.239,828,2.72,829,4.6,830,2.72,831,2.402,832,2.72]],["title/modules/DatabaseModule.html",[72,1.472,82,3.098]],["body/modules/DatabaseModule.html",[3,0.122,4,0.122,5,0.095,17,0.009,31,0.246,35,0.122,36,0.284,37,0.007,38,0.007,48,1.045,72,2.549,74,2.859,82,5.366,94,2.95,120,5.601,429,3.516,430,2.17,833,6.343,834,4.747,835,6.343]],["title/classes/DeleteProductCommand.html",[36,0.198,836,3.098]],["body/classes/DeleteProductCommand.html",[3,0.105,4,0.105,5,0.082,7,0.359,8,1.351,9,3.079,12,1.886,14,0.773,15,2.645,16,0.446,17,0.009,18,1.568,21,0.585,31,0.163,35,0.105,36,0.244,37,0.007,38,0.007,99,1.01,100,0.833,207,1.396,209,2.914,483,1.161,505,2.903,637,4.073,638,4.137,642,5.599,836,4.88,837,7.119,838,4.806,839,5.443,840,4.806]],["title/classes/DeleteProductHandler.html",[36,0.198,841,3.3]],["body/classes/DeleteProductHandler.html",[3,0.082,4,0.082,5,0.064,7,0.28,12,1.378,14,0.836,16,0.343,17,0.009,21,0.451,31,0.244,33,1.383,35,0.082,36,0.19,37,0.006,38,0.006,43,1.444,46,1.017,48,0.7,55,2.046,68,1.041,99,1.093,100,0.902,157,1.998,207,1.512,208,1.35,231,2.298,321,3.608,322,2.712,430,1.454,435,3.396,450,2.041,453,2.822,458,2.453,465,3.181,467,3.181,483,0.907,517,2.74,544,2.186,598,3.143,599,5.061,600,3.72,604,4.41,606,4.41,607,3.181,638,2.927,639,1.915,655,2.985,656,2.985,658,4.139,660,2.561,661,3.181,663,2.985,836,5.13,841,4.41,842,5.972,843,3.425,844,3.753,845,4.139,846,2.985,847,3.425,848,4.25,849,4.25,850,5.203,851,3.425,852,3.753,853,3.753,854,3.753,855,4.25,856,5.203]],["title/classes/EnvironmentVariables.html",[36,0.198,857,3.554]],["body/classes/EnvironmentVariables.html",[3,0.063,4,0.063,5,0.049,7,0.215,8,0.948,16,0.487,17,0.009,18,1.564,19,1.911,21,0.639,24,1.938,31,0.146,35,0.063,36,0.261,37,0.005,38,0.005,53,2.446,55,1.476,56,4.702,68,0.801,69,4.366,141,1.52,203,2.703,296,1.97,321,1.744,322,1.311,483,0.697,575,4.171,577,3.605,578,4.291,579,1.311,592,2.064,633,3.836,716,3.65,857,3.931,858,2.446,859,5.834,860,5.834,861,5.834,862,5.834,863,5.834,864,5.834,865,5.834,866,5.834,867,5.834,868,5.834,869,5.834,870,5.834,871,5.432,872,3.269,873,3.269,874,3.269,875,3.269,876,3.269,877,3.269,878,3.269,879,3.269,880,4.877,881,3.269,882,3.269,883,3.931,884,3.269,885,3.269,886,3.269,887,4.877,888,3.269,889,3.269,890,3.269,891,6.469,892,3.269,893,4.369,894,3.269,895,3.269,896,4.307,897,3.931,898,3.269,899,2.634,900,2.886,901,2.886,902,4.877,903,3.269,904,3.269,905,3.269,906,3.269,907,3.269,908,3.269,909,2.634,910,3.269]],["title/classes/ExceptionsLoggerFilter.html",[36,0.198,149,3.3]],["body/classes/ExceptionsLoggerFilter.html",[3,0.108,4,0.108,5,0.085,7,0.37,14,0.797,16,0.327,17,0.009,21,0.43,31,0.213,35,0.108,36,0.252,37,0.007,38,0.007,43,1.737,46,1.345,48,0.925,99,1.042,100,0.86,102,3.946,127,4.527,149,5.305,171,2.133,318,6.104,483,1.198,486,2.842,911,6.259,912,4.96,913,7.767,914,7.089,915,7.202,916,8.157,917,5.618,918,7.089,919,5.618,920,5.618,921,5.618]],["title/injectables/ExcludeNullInterceptor.html",[150,3.3,274,0.941]],["body/injectables/ExcludeNullInterceptor.html",[3,0.102,4,0.102,5,0.08,7,0.349,14,0.752,16,0.309,17,0.009,21,0.405,31,0.24,35,0.102,36,0.237,37,0.007,38,0.007,43,1.672,46,1.268,48,0.872,68,1.297,99,0.983,100,0.81,150,5.109,274,1.456,275,1.958,598,2.825,617,3.963,922,6.028,923,4.676,924,6.827,925,6.827,926,7.981,927,7.047,928,7.981,929,5.296,930,7.555,931,6.028,932,4.676,933,5.296,934,5.296,935,4.268,936,5.296,937,4.268,938,3.963,939,5.296,940,5.296,941,5.296,942,4.676]],["title/classes/FileNotFoundException.html",[36,0.198,943,3.098]],["body/classes/FileNotFoundException.html",[3,0.116,4,0.116,5,0.091,12,1.41,14,0.856,16,0.351,17,0.009,21,0.461,24,2.01,31,0.181,35,0.116,36,0.27,37,0.007,38,0.007,48,0.993,99,1.118,100,0.922,207,1.546,483,1.286,485,4.003,486,2.97,487,4.832,489,4.233,492,4.003,782,4.918,943,5.202,944,6.54,945,6.54,946,6.027]],["title/classes/FileResponseDto.html",[36,0.198,947,3.3]],["body/classes/FileResponseDto.html",[3,0.098,4,0.098,5,0.076,7,0.334,8,1.291,9,3.304,12,1.731,15,2.35,16,0.457,17,0.009,18,1.526,19,1.692,21,0.601,24,1.665,31,0.199,35,0.098,36,0.297,37,0.006,38,0.006,483,1.082,577,4.047,579,2.034,638,3.676,893,4.672,947,4.968,948,6.098,949,4.48,950,5.198,951,5.538,952,5.074,953,5.074,954,5.074,955,5.074,956,3.797]],["title/classes/FileUploadDto.html",[36,0.198,957,3.3]],["body/classes/FileUploadDto.html",[3,0.114,4,0.114,5,0.125,7,0.39,8,1.423,16,0.427,17,0.009,18,1.423,19,1.352,21,0.452,31,0.22,35,0.114,36,0.265,37,0.007,38,0.007,190,3.041,483,1.262,751,3.635,948,5.478,957,5.478,958,5.222,959,6.463,960,5.222,961,6.463,962,6.463,963,5.914,964,5.478]],["title/classes/FileUploadMultipleDto.html",[36,0.198,965,3.554]],["body/classes/FileUploadMultipleDto.html",[3,0.114,4,0.114,5,0.089,7,0.39,8,1.423,16,0.463,17,0.009,18,1.15,19,1.352,21,0.452,31,0.178,35,0.114,36,0.265,37,0.007,38,0.007,190,3.041,483,1.262,738,5.019,948,5.478,960,5.222,961,5.222,962,5.222,964,5.478,965,5.899,966,4.861,967,5.222,968,6.463,969,7.32,970,4.766,971,5.914]],["title/modules/FilesModule.html",[72,1.472,83,2.929]],["body/modules/FilesModule.html",[3,0.104,4,0.104,5,0.081,17,0.009,31,0.249,35,0.104,36,0.241,37,0.007,38,0.007,48,0.887,72,2.303,74,2.428,75,3.315,83,5.736,90,3.55,91,2.77,92,2.675,94,2.505,145,3.681,252,4.583,429,2.985,430,1.843,748,3.577,769,4.159,972,4.756,973,4.756,974,4.756,975,5.987,976,5.387,977,4.357,978,4.756,979,3.401,980,4.756,981,5.387]],["title/injectables/FilesService.html",[274,0.941,975,2.929]],["body/injectables/FilesService.html",[3,0.058,4,0.034,5,0.128,7,0.117,9,2.467,12,1.899,14,0.838,15,1.969,16,0.344,17,0.009,18,1.255,21,0.452,24,1.863,31,0.2,33,0.58,35,0.034,36,0.08,37,0.003,38,0.003,43,0.736,46,1.598,48,0.293,49,3.036,50,0.803,51,3.69,55,2.212,68,1.122,99,1.095,100,1.051,157,2.281,183,1.898,207,0.771,208,1.238,209,0.61,231,2.743,274,0.641,275,0.659,321,2.08,322,2.588,399,4.214,430,0.61,435,2.745,450,0.856,453,1.183,458,1.735,496,2.76,517,3.775,638,1.937,728,4.214,737,3.852,750,2.918,769,1.812,782,4.287,786,5.379,788,5.476,790,3.69,845,2.112,847,1.436,943,1.252,950,5.043,951,2.918,966,1.996,975,1.996,977,1.125,978,1.574,979,1.125,980,1.574,982,1.574,983,2.423,984,3.006,985,3.006,986,2.423,987,3.899,988,3.899,989,1.782,990,3.899,991,1.782,992,3.006,993,3.006,994,4.432,995,1.782,996,3.896,997,5.379,998,6.209,999,3.006,1000,1.782,1001,3.006,1002,1.782,1003,3.443,1004,2.655,1005,3.006,1006,1.782,1007,3.006,1008,1.782,1009,1.782,1010,1.782,1011,1.782,1012,5.778,1013,1.574,1014,1.782,1015,4.043,1016,1.782,1017,1.782,1018,1.782,1019,3.899,1020,3.006,1021,1.782,1022,5.546,1023,5.546,1024,1.782,1025,1.574,1026,2.655,1027,1.782,1028,3.006,1029,1.782,1030,3.006,1031,1.782,1032,1.782,1033,1.782,1034,1.782,1035,1.782,1036,3.006,1037,3.006,1038,1.782,1039,1.574,1040,1.782,1041,1.782]],["title/classes/FindAllProductsHandler.html",[36,0.198,1042,3.3]],["body/classes/FindAllProductsHandler.html",[3,0.081,4,0.081,5,0.064,7,0.279,12,0.989,14,0.833,16,0.342,17,0.009,21,0.449,31,0.244,33,1.376,35,0.081,36,0.189,37,0.006,38,0.006,43,1.438,46,1.012,55,2.041,68,1.036,99,1.089,100,0.898,157,1.992,207,1.506,208,1.342,231,1.649,430,1.446,435,3.388,450,2.03,458,2.44,483,0.902,517,2.73,526,2.44,527,2.807,528,2.807,534,3.738,536,4.038,544,2.174,560,2.174,598,3.131,600,4.258,638,2.099,639,1.905,656,2.969,658,4.123,660,2.548,663,2.969,709,3.407,727,2.669,994,4.479,1042,4.393,1043,5.435,1044,3.733,1045,5.435,1046,4.227,1047,3.407,1048,5.118,1049,4.227,1050,3.407,1051,3.733,1052,3.733,1053,3.163,1054,2.969,1055,3.733,1056,3.733,1057,4.227,1058,4.731,1059,3.733,1060,3.733,1061,4.227,1062,4.731,1063,5.871,1064,4.227,1065,3.733,1066,3.733,1067,3.407]],["title/classes/FindAllProductsQuery.html",[36,0.198,1048,3.098]],["body/classes/FindAllProductsQuery.html",[3,0.104,4,0.104,5,0.081,7,0.356,8,1.345,9,3.143,14,0.767,16,0.444,17,0.009,21,0.584,24,2.016,31,0.162,35,0.104,36,0.242,37,0.007,38,0.007,99,1.003,100,0.827,207,1.775,209,2.909,483,1.153,560,4.583,562,3.59,994,5.341,1048,4.858,1068,6.481,1069,4.773,1070,5.405,1071,5.405,1072,5.405,1073,5.405]],["title/classes/FindOneParams.html",[36,0.198,385,2.929]],["body/classes/FindOneParams.html",[3,0.118,4,0.118,5,0.092,7,0.405,8,1.457,12,1.892,16,0.358,17,0.009,18,1.457,19,1.405,21,0.47,31,0.185,35,0.118,36,0.336,37,0.007,38,0.007,385,4.977,403,5.264,483,1.311,579,2.464,1074,6.617,1075,5.426,1076,8.086,1077,6.145]],["title/classes/FindProductHandler.html",[36,0.198,1078,3.3]],["body/classes/FindProductHandler.html",[3,0.095,4,0.095,5,0.074,7,0.326,12,1.157,14,0.927,16,0.38,17,0.009,21,0.499,31,0.243,33,1.61,35,0.095,36,0.222,37,0.006,38,0.006,43,1.599,46,1.184,68,1.212,99,1.211,100,0.999,207,1.675,208,1.571,430,1.692,435,3.615,450,2.375,458,2.854,483,1.055,517,3.036,544,2.544,598,3.483,600,4.614,638,2.456,639,2.229,655,3.474,656,3.474,658,4.586,660,2.981,663,3.474,843,3.986,851,3.986,1043,5.89,1045,5.89,1047,3.986,1050,3.986,1051,4.367,1078,4.886,1079,4.946,1080,5.46,1081,4.367,1082,4.946,1083,5.765]],["title/classes/FindProductQuery.html",[36,0.198,1080,3.098]],["body/classes/FindProductQuery.html",[3,0.115,4,0.115,5,0.09,7,0.393,8,1.43,9,2.719,14,0.846,16,0.429,17,0.009,18,1.62,21,0.563,35,0.115,36,0.267,37,0.007,38,0.007,99,1.105,100,0.912,207,1.529,209,2.729,483,1.271,840,5.261,1068,6.429,1080,5.165,1083,7.355,1084,5.261,1085,5.959,1086,5.959,1087,5.959]],["title/classes/GetCommentsDto.html",[36,0.198,515,3.3]],["body/classes/GetCommentsDto.html",[3,0.1,4,0.1,5,0.078,7,0.343,8,1.313,14,1.195,16,0.479,17,0.009,19,1.713,21,0.573,24,2.06,31,0.225,35,0.1,36,0.336,37,0.007,38,0.007,483,1.111,486,2.708,515,5.054,533,4.977,534,3.743,536,3.743,560,4.226,562,3.459,579,2.088,592,3.288,633,3.743,1088,5.963,1089,4.599,1090,4.599,1091,5.208,1092,5.443,1093,5.963,1094,4.599,1095,4.599]],["title/classes/GetCommentsHandler.html",[36,0.198,549,3.3]],["body/classes/GetCommentsHandler.html",[3,0.081,4,0.081,5,0.064,7,0.279,12,0.989,14,0.833,16,0.342,17,0.009,21,0.449,31,0.244,33,1.376,35,0.081,36,0.189,37,0.006,38,0.006,43,1.438,46,1.012,55,2.041,68,1.036,99,1.089,100,0.898,157,1.992,207,1.506,208,1.342,231,1.649,430,1.446,435,3.388,450,2.03,458,2.44,483,0.902,493,2.343,495,2.548,508,4.731,517,2.73,526,2.44,527,2.807,528,2.807,529,2.969,533,4.479,534,3.738,536,4.038,544,2.174,549,4.393,560,2.174,566,5.118,568,3.733,598,3.131,600,4.258,601,3.733,603,5.184,610,3.733,709,3.407,727,2.669,1045,5.435,1047,3.407,1050,3.407,1053,3.163,1054,2.969,1055,3.733,1056,3.733,1058,4.731,1059,3.733,1060,3.733,1065,3.733,1066,3.733,1067,3.407,1096,5.955,1097,3.733,1098,4.227,1099,4.227,1100,4.227,1101,4.227,1102,4.227,1103,5.871,1104,4.227]],["title/classes/GetCommentsQuery.html",[36,0.198,566,3.098]],["body/classes/GetCommentsQuery.html",[3,0.104,4,0.104,5,0.081,7,0.356,8,1.345,9,3.143,14,0.767,16,0.444,17,0.009,21,0.584,24,2.016,31,0.162,35,0.104,36,0.242,37,0.007,38,0.007,99,1.003,100,0.827,207,1.775,209,2.909,483,1.153,533,5.341,560,4.583,562,3.59,566,4.858,1105,7.101,1106,4.773,1107,4.773,1108,5.405,1109,5.405,1110,5.405]],["title/classes/GetProductDto.html",[36,0.198,1111,3.3]],["body/classes/GetProductDto.html",[3,0.1,4,0.1,5,0.078,7,0.343,8,1.313,14,1.195,16,0.479,17,0.009,19,1.713,21,0.573,24,2.06,31,0.225,35,0.1,36,0.336,37,0.007,38,0.007,483,1.111,486,2.708,534,3.743,536,3.743,560,4.226,562,3.459,579,2.088,592,3.288,633,3.743,647,3.897,648,4.599,994,4.977,1090,4.599,1092,5.443,1093,5.963,1094,4.599,1095,4.599,1111,5.054,1112,5.963]],["title/controllers/HealthController.html",[39,1.63,1113,3.3]],["body/controllers/HealthController.html",[3,0.091,4,0.091,5,0.071,7,0.31,17,0.009,19,1.076,21,0.36,31,0.19,35,0.091,36,0.211,37,0.006,38,0.006,39,1.741,41,1.788,43,1.548,46,1.127,48,0.775,68,1.154,154,2.61,207,1.208,208,2.421,341,2.973,1113,4.729,1114,4.158,1115,5.58,1116,6.731,1117,4.709,1118,4.709,1119,7.132,1120,6.319,1121,7.132,1122,7.132,1123,7.132,1124,3.795,1125,4.709,1126,4.709,1127,4.709,1128,6.319,1129,3.524,1130,6.319,1131,6.319,1132,6.319,1133,4.709,1134,4.709,1135,6.319,1136,7.623,1137,6.319,1138,4.709,1139,4.709,1140,4.709,1141,4.709,1142,4.158,1143,4.709,1144,4.709,1145,4.158,1146,4.709,1147,4.709,1148,4.709,1149,4.709]],["title/modules/HealthModule.html",[72,1.472,84,3.098]],["body/modules/HealthModule.html",[3,0.12,4,0.12,5,0.094,17,0.009,31,0.245,35,0.12,36,0.28,37,0.007,38,0.007,41,2.873,48,1.028,72,2.525,74,2.813,84,5.315,94,2.903,1113,6.093,1124,5.031,1150,6.243,1151,7.567,1152,6.243]],["title/injectables/JwtAuthenticationGuard.html",[197,2.658,274,0.941]],["body/injectables/JwtAuthenticationGuard.html",[3,0.124,4,0.124,5,0.097,17,0.009,31,0.232,35,0.124,36,0.29,37,0.008,38,0.008,48,1.066,197,4.661,256,3.588,274,1.65,275,2.393,486,2.596,1153,4.845,1154,5.218,1155,4.845,1156,5.218]],["title/injectables/JwtRefreshGuard.html",[200,3.3,274,0.941]],["body/injectables/JwtRefreshGuard.html",[3,0.123,4,0.123,5,0.097,17,0.009,31,0.231,35,0.123,36,0.288,37,0.007,38,0.007,48,1.058,160,4.264,200,5.759,228,3.87,256,3.559,274,1.642,275,2.374,486,2.575,1153,4.805,1155,4.805,1156,5.175,1157,5.67]],["title/injectables/JwtRefreshTokenStrategy.html",[245,3.098,274,0.941]],["body/injectables/JwtRefreshTokenStrategy.html",[3,0.082,4,0.082,5,0.064,7,0.282,14,0.841,16,0.345,17,0.009,21,0.453,31,0.245,35,0.082,36,0.192,37,0.006,38,0.006,43,1.452,46,1.026,48,0.706,49,4.092,50,1.931,55,1.296,68,1.452,99,1.099,100,0.907,108,3.741,141,1.993,157,2.007,160,4.867,166,4.351,171,1.627,191,3.64,192,2.705,198,3.571,207,1.52,208,1.882,209,2.028,228,3.571,229,4.776,245,4.162,256,2.375,274,1.264,275,1.584,310,4.627,311,3.207,335,5.083,486,1.718,751,2.128,1153,5.083,1158,3.784,1159,3.207,1160,5.474,1161,4.285,1162,5.926,1163,4.285,1164,4.434,1165,3.453,1166,4.434,1167,3.01,1168,3.207,1169,3.453,1170,3.453,1171,4.285,1172,3.453,1173,4.285,1174,4.285,1175,4.285,1176,4.285,1177,4.285]],["title/injectables/JwtStrategy.html",[246,3.098,274,0.941]],["body/injectables/JwtStrategy.html",[3,0.089,4,0.089,5,0.069,7,0.304,14,0.885,16,0.363,17,0.009,21,0.477,31,0.25,35,0.089,36,0.207,37,0.006,38,0.006,43,1.527,46,1.104,48,0.76,49,4.184,50,2.079,68,1.527,99,1.156,100,0.954,108,3.934,157,2.085,166,3.764,171,1.751,191,3.754,192,2.912,198,2.779,207,1.599,208,1.979,209,2.132,228,2.779,246,4.377,256,2.556,270,3.717,274,1.329,275,1.705,310,4.772,311,3.451,335,3.451,486,1.849,751,2.291,1159,3.451,1160,5.688,1164,3.451,1165,3.717,1166,3.451,1167,3.239,1168,3.451,1169,3.717,1170,3.717,1172,3.717,1178,4.072,1179,4.612,1180,5.502,1181,4.612,1182,4.072,1183,4.072,1184,4.072]],["title/injectables/JwtTwoFactorGuard.html",[274,0.941,1185,3.098]],["body/injectables/JwtTwoFactorGuard.html",[3,0.122,4,0.122,5,0.096,17,0.009,31,0.23,35,0.122,36,0.285,37,0.007,38,0.007,48,1.049,256,3.53,261,4.835,262,4.473,265,3.838,274,1.634,275,2.354,486,2.554,1155,4.766,1156,5.133,1185,5.379,1186,4.23,1187,5.624]],["title/injectables/JwtTwoFactorStrategy.html",[247,3.098,274,0.941]],["body/injectables/JwtTwoFactorStrategy.html",[3,0.082,4,0.082,5,0.064,7,0.282,14,0.84,15,2.154,16,0.345,17,0.009,21,0.452,31,0.245,35,0.082,36,0.191,37,0.006,38,0.006,43,1.449,46,1.023,48,0.704,49,4.089,50,1.926,55,1.293,68,1.662,99,1.097,100,0.905,108,3.734,157,2.004,166,3.618,171,1.622,191,3.636,192,2.698,198,3.564,207,1.518,208,1.878,209,2.024,228,2.575,231,1.667,234,3.773,247,4.154,256,2.368,261,4.622,262,4.764,265,2.575,270,3.444,274,1.262,275,1.58,310,4.622,311,3.198,335,3.198,486,1.713,751,2.122,1159,3.198,1160,5.467,1164,4.426,1165,3.444,1166,4.426,1167,3.001,1168,3.198,1169,3.444,1170,3.444,1172,3.444,1180,5.223,1183,3.773,1184,3.773,1186,4.505,1188,3.773,1189,4.273,1190,4.273,1191,4.273]],["title/injectables/LocalAuthenticationGuard.html",[202,3.3,274,0.941]],["body/injectables/LocalAuthenticationGuard.html",[3,0.124,4,0.124,5,0.097,17,0.009,31,0.232,35,0.124,36,0.29,37,0.008,38,0.008,48,1.066,202,5.788,256,3.588,274,1.65,275,2.393,486,2.596,1154,5.218,1155,4.845,1192,5.717,1193,6.474]],["title/entities/LocalFile.html",[0,1.63,1194,2.929]],["body/entities/LocalFile.html",[0,2.475,2,2.553,3,0.099,4,0.099,5,0.077,7,0.339,8,1.302,9,2.753,12,1.742,16,0.46,17,0.009,18,1.631,19,1.804,20,4.557,21,0.604,24,1.679,25,3.972,31,0.154,33,1.673,35,0.099,36,0.23,37,0.007,38,0.007,341,4.702,726,3.61,728,4.702,733,4.142,734,4.142,1194,4.447,1195,4.722,1196,6.594,1197,6.002,1198,5.14,1199,4.538]],["title/interfaces/LocalFileDto.html",[352,2.19,1200,3.098]],["body/interfaces/LocalFileDto.html",[3,0.115,4,0.115,5,0.09,7,0.396,8,1.437,16,0.466,17,0.009,18,1.751,35,0.115,37,0.007,38,0.007,341,5.273,352,2.982,354,3.79,728,5.273,1195,3.465,1197,6.731,1200,5.19,1201,4.839,1202,5.302]],["title/controllers/LocalFilesController.html",[39,1.63,1203,3.3]],["body/controllers/LocalFilesController.html",[3,0.088,4,0.088,5,0.093,7,0.302,12,1.452,14,0.651,16,0.362,17,0.009,19,1.048,21,0.351,24,1.764,31,0.237,35,0.088,36,0.205,37,0.006,38,0.006,39,1.695,41,1.741,43,1.521,46,1.098,48,0.755,52,2.446,55,1.878,68,1.123,99,0.851,100,0.702,103,3.695,134,3.44,141,2.132,154,2.541,157,2.078,171,1.741,203,3.44,209,1.569,231,1.788,322,1.838,341,2.895,386,4.359,399,2.895,496,3.74,736,3.695,738,3.918,739,6.213,740,4.048,741,5.515,743,5.48,744,4.645,745,4.048,746,3.695,748,3.045,750,3.431,751,2.277,753,4.048,754,3.695,755,4.048,758,4.048,759,4.048,760,4.048,761,4.048,763,4.048,1025,4.048,1195,3.582,1203,4.645,1204,4.585,1205,4.585,1206,4.585,1207,4.442,1208,4.585,1209,4.585,1210,4.585,1211,4.048,1212,4.048]],["title/interfaces/LocalFilesInterceptorOptions.html",[352,2.19,1213,3.3]],["body/interfaces/LocalFilesInterceptorOptions.html",[3,0.084,4,0.084,5,0.066,7,0.289,8,1.172,14,1.138,16,0.432,17,0.009,18,1.559,31,0.233,35,0.084,36,0.197,37,0.006,38,0.006,48,0.723,49,3.1,50,1.98,55,2.082,68,1.477,99,0.815,134,2.435,274,1.286,322,1.761,341,4.676,352,2.182,354,2.773,598,2.343,692,3.287,751,2.182,899,3.54,931,6.077,1142,3.879,1159,3.287,1195,2.535,1213,5.15,1214,3.54,1215,6.54,1216,6.854,1217,6.854,1218,4.393,1219,6.077,1220,4.858,1221,7.407,1222,4.393,1223,4.393,1224,6.028,1225,4.393,1226,4.393,1227,4.393,1228,3.287,1229,4.393,1230,4.393,1231,4.393,1232,6.028,1233,4.393,1234,4.393,1235,4.393,1236,4.393,1237,4.393,1238,4.393,1239,4.393,1240,4.393]],["title/modules/LocalFilesModule.html",[72,1.472,85,2.929]],["body/modules/LocalFilesModule.html",[3,0.099,4,0.099,5,0.078,17,0.009,31,0.252,35,0.099,36,0.232,37,0.007,38,0.007,41,2.553,48,0.852,50,2.332,72,2.244,74,2.332,75,3.23,85,5.683,90,3.458,91,2.661,92,2.57,94,2.406,105,4.245,134,2.867,145,3.587,203,3.727,252,4.466,429,2.867,430,1.77,748,3.436,767,4.568,769,3.118,770,4.568,1194,3.436,1195,2.986,1203,5.591,1207,5.659,1241,4.568,1242,4.568,1243,4.568,1244,4.568,1245,5.174]],["title/injectables/LocalFilesService.html",[274,0.941,1207,2.784]],["body/injectables/LocalFilesService.html",[3,0.076,4,0.076,5,0.106,7,0.26,12,0.924,14,1.004,16,0.412,17,0.009,21,0.541,24,1.944,31,0.224,33,1.286,35,0.076,36,0.177,37,0.005,38,0.005,43,1.372,46,1.557,48,0.651,55,1.694,68,1.372,99,1.312,100,1.083,134,4.138,157,2.448,171,2.125,207,1.436,208,1.255,231,2.759,274,1.194,275,1.461,321,2.107,322,1.584,430,1.352,435,3.289,450,1.898,487,3.374,769,2.381,772,3.184,774,4.943,780,5.967,782,4.959,783,4.943,790,4.512,1194,2.624,1195,4.31,1200,4.968,1207,3.534,1244,3.489,1246,6.502,1247,5.599,1248,3.951,1249,3.951,1250,5.599,1251,3.951,1252,3.951,1253,3.951,1254,5.599,1255,3.951,1256,3.489,1257,3.951,1258,3.489,1259,3.951,1260,3.951,1261,3.951,1262,3.951,1263,3.951]],["title/injectables/LocalStrategy.html",[248,3.098,274,0.941]],["body/injectables/LocalStrategy.html",[3,0.096,4,0.096,5,0.075,7,0.328,14,0.931,15,1.581,16,0.382,17,0.009,18,1.617,21,0.502,31,0.243,35,0.096,36,0.223,37,0.006,38,0.006,43,1.606,46,1.191,48,0.82,52,2.655,68,1.219,99,1.216,100,1.003,108,4.139,157,2.166,193,5.011,194,3.725,203,2.758,207,1.277,248,4.605,256,2.758,274,1.399,275,1.84,288,3.784,317,4.696,486,1.996,517,3.049,1164,3.725,1166,3.725,1167,3.496,1168,3.725,1182,4.395,1264,4.395,1265,4.977,1266,4.977,1267,6.556,1268,4.977,1269,4.011,1270,4.977,1271,4.977]],["title/entities/Log.html",[0,1.63,688,2.658]],["body/entities/Log.html",[0,2.409,2,2.449,3,0.095,4,0.095,5,0.074,7,0.325,8,1.267,9,3.29,12,1.707,16,0.47,17,0.009,18,1.612,19,1.846,20,4.511,21,0.618,24,1.633,25,3.893,31,0.148,33,1.605,35,0.095,36,0.221,37,0.006,38,0.006,473,5.753,617,5.461,618,5.461,619,5.126,688,3.926,1272,4.353,1273,7.298,1274,4.93,1275,7.298,1276,4.93,1277,4.93,1278,4.93,1279,4.93]],["title/classes/LogInDto.html",[36,0.198,169,3.3]],["body/classes/LogInDto.html",[3,0.106,4,0.106,5,0.083,7,0.364,8,1.363,16,0.408,17,0.009,18,1.576,19,1.602,21,0.536,31,0.211,35,0.106,36,0.314,37,0.007,38,0.007,169,5.246,190,2.838,288,4.446,293,4.425,317,5.041,483,1.177,577,3.481,578,3.739,579,2.213,671,5.649,679,4.448,681,4.448,964,5.765,1280,4.873,1281,5.519,1282,7.01,1283,5.519,1284,5.519,1285,5.519]],["title/modules/LoggerModule.html",[72,1.472,86,3.098]],["body/modules/LoggerModule.html",[3,0.099,4,0.099,5,0.078,17,0.009,31,0.252,35,0.099,36,0.232,37,0.007,38,0.007,48,0.852,50,2.332,72,2.244,74,2.332,75,3.23,86,6.159,90,3.458,91,2.661,92,2.57,94,2.406,105,4.245,145,3.587,252,4.466,429,2.867,430,1.77,683,6.296,687,5.581,688,3.118,711,4.568,798,3.634,1286,4.568,1287,4.568,1288,4.568,1289,5.174,1290,4.568,1291,4.568,1292,5.174]],["title/injectables/LogsMiddleware.html",[136,3.3,274,0.941]],["body/injectables/LogsMiddleware.html",[3,0.087,4,0.087,5,0.068,7,0.3,8,1.2,14,0.645,16,0.265,17,0.009,21,0.472,31,0.185,35,0.087,36,0.204,37,0.006,38,0.006,43,1.512,46,1.088,48,0.749,55,2.119,68,1.716,99,0.843,100,0.696,102,3.192,136,4.617,166,4.321,208,2.225,209,2.397,274,1.316,275,1.68,293,2.869,294,3.018,322,2.474,598,2.424,619,3.192,741,5.599,751,2.257,798,5.277,829,4.013,831,4.013,927,6.634,1129,4.617,1293,4.013,1294,6.17,1295,7.513,1296,4.545,1297,6.17,1298,4.545,1299,6.17,1300,4.545,1301,6.17,1302,6.17,1303,7.513,1304,6.17,1305,4.545,1306,4.545,1307,4.545]],["title/injectables/LogsService.html",[274,0.941,687,2.929]],["body/injectables/LogsService.html",[3,0.095,4,0.095,5,0.074,7,0.326,14,0.927,16,0.38,17,0.009,21,0.499,31,0.243,33,1.61,35,0.095,36,0.222,37,0.006,38,0.006,43,1.599,46,1.184,48,0.815,55,1.496,68,1.212,99,1.211,100,0.999,141,2.3,157,2.159,171,1.878,207,1.675,208,1.571,231,2.547,274,1.393,275,1.828,407,2.544,430,1.692,435,3.615,450,2.375,614,5.817,687,4.336,688,3.935,727,3.122,1291,4.367,1308,4.367,1309,6.529,1310,4.946,1311,4.946,1312,6.529,1313,6.529,1314,4.946,1315,4.946,1316,4.946,1317,6.529,1318,4.946,1319,4.946,1320,4.946]],["title/classes/ObjectWithIdDto.html",[36,0.198,589,3.3]],["body/classes/ObjectWithIdDto.html",[3,0.119,4,0.119,5,0.093,7,0.408,8,1.464,12,1.898,16,0.361,17,0.009,19,1.416,21,0.474,24,1.888,31,0.186,35,0.119,36,0.337,37,0.007,38,0.007,483,1.321,579,2.483,589,5.635,893,5.123,1321,6.649,1322,5.469,1323,6.193]],["title/classes/PaginatedResultDto.html",[36,0.198,526,2.545]],["body/classes/PaginatedResultDto.html",[3,0.102,4,0.102,5,0.08,7,0.349,8,1.327,16,0.465,17,0.009,19,1.824,21,0.611,24,2.12,31,0.159,35,0.102,36,0.306,37,0.007,38,0.007,483,1.13,526,3.94,534,4.187,536,4.187,579,2.123,593,6.671,727,4.77,893,5.432,1067,6.089,1324,7.293,1325,4.676,1326,6.827,1327,5.296,1328,5.296,1329,5.296,1330,5.296]],["title/classes/PaginationDto.html",[36,0.198,560,2.268]],["body/classes/PaginationDto.html",[3,0.105,4,0.105,5,0.082,7,0.361,8,1.357,14,1.147,16,0.486,17,0.009,19,1.595,21,0.534,24,2.139,31,0.21,35,0.105,36,0.344,37,0.007,38,0.007,483,1.169,534,4.255,536,4.255,560,3.589,579,2.197,592,3.46,633,4.255,893,4.847,1092,5.624,1331,4.839,1332,5.481,1333,5.481,1334,5.481,1335,6.979]],["title/entities/Post.html",[0,1.63,185,1.988]],["body/entities/Post.html",[0,1.938,2,1.791,3,0.069,4,0.069,5,0.054,7,0.346,8,1.019,9,3.32,12,1.445,14,0.963,15,2.289,16,0.463,17,0.009,18,1.546,19,1.818,20,4.011,21,0.608,24,1.315,25,3.296,31,0.204,33,1.174,35,0.069,36,0.162,37,0.005,38,0.005,141,3.497,185,2.363,368,5.456,379,5.198,478,3.184,482,4.63,493,4.301,495,4.343,496,3.723,498,4.63,504,3.924,505,1.924,508,4.979,626,5.456,627,4.979,968,4.63,1336,3.184,1337,3.606,1338,3.606,1339,3.606,1340,3.606,1341,3.184,1342,3.606,1343,3.184,1344,5.244,1345,3.606,1346,3.606,1347,3.606,1348,5.244,1349,4.979,1350,3.606,1351,3.606,1352,3.606,1353,3.606,1354,5.244,1355,4.63,1356,3.606,1357,3.606]],["title/classes/PostNotFoundException.html",[36,0.198,1358,3.3]],["body/classes/PostNotFoundException.html",[3,0.116,4,0.116,5,0.091,12,1.41,14,0.856,16,0.351,17,0.009,21,0.461,24,2.01,31,0.181,35,0.116,36,0.27,37,0.007,38,0.007,48,0.993,99,1.118,100,0.922,207,1.546,483,1.286,485,4.003,486,2.97,487,4.832,489,4.233,492,4.003,533,4.918,1107,6.54,1358,5.542,1359,6.54,1360,6.027]],["title/controllers/PostsController.html",[39,1.63,1361,3.3]],["body/controllers/PostsController.html",[3,0.063,4,0.063,5,0.049,7,0.216,12,1.368,14,0.984,16,0.404,17,0.009,18,1.137,19,1.662,21,0.556,31,0.232,35,0.063,36,0.147,37,0.005,38,0.005,39,1.213,41,1.246,43,1.199,46,1.74,48,0.541,52,1.751,68,1.781,99,1.286,100,1.061,154,1.819,157,2.337,163,3.741,166,3.12,171,2.22,183,3.692,185,3.488,186,3.249,187,2.18,189,2.072,190,1.688,204,2.18,209,1.123,212,2.305,261,2.072,262,2.305,385,5.348,386,3.436,389,2.645,396,2.645,398,2.645,399,3.089,400,2.305,402,2.645,403,2.305,404,2.645,407,1.688,409,2.072,459,2.305,519,2.456,623,4.553,1185,2.305,1361,3.661,1362,2.898,1363,5.165,1364,4.32,1365,5.724,1366,4.32,1367,4.32,1368,5.165,1369,2.898,1370,3.282,1371,3.282,1372,3.282,1373,3.282,1374,3.282,1375,3.282,1376,3.282,1377,3.282,1378,2.898,1379,4.893,1380,3.282,1381,4.32,1382,3.282,1383,4.553,1384,3.282,1385,3.282,1386,3.282,1387,3.282,1388,4.32,1389,3.884,1390,2.898,1391,3.282,1392,3.282,1393,3.282,1394,3.282,1395,3.282,1396,3.282,1397,3.282,1398,5.849,1399,3.282,1400,3.282,1401,3.282,1402,3.282]],["title/modules/PostsModule.html",[72,1.472,87,3.098]],["body/modules/PostsModule.html",[3,0.107,4,0.107,5,0.084,17,0.009,31,0.252,35,0.107,36,0.25,37,0.007,38,0.007,41,2.679,48,0.919,72,2.355,74,2.514,75,3.389,87,6.021,90,3.629,91,2.869,92,2.77,94,2.594,145,3.764,185,2.514,429,3.091,430,1.908,1361,5.793,1389,5.693,1390,4.925,1403,4.925,1404,4.925,1405,5.578,1406,4.925,1407,5.578,1408,5.578]],["title/injectables/PostsService.html",[274,0.941,1389,2.929]],["body/injectables/PostsService.html",[3,0.057,4,0.057,5,0.045,7,0.195,12,1.552,14,0.993,15,2.383,16,0.408,17,0.009,18,1.07,21,0.557,24,1.928,31,0.225,33,0.965,35,0.057,36,0.133,37,0.004,38,0.004,43,1.11,46,1.675,48,0.489,55,2.007,68,1.625,99,1.298,100,1.07,157,2.523,171,2.519,185,3.597,207,1.163,208,0.942,231,2.839,274,0.967,275,1.097,321,3.285,322,2.469,407,1.526,409,1.873,430,1.015,435,2.864,450,1.425,453,1.97,458,3.175,459,3.864,465,2.22,467,2.22,487,1.788,492,1.97,495,3.711,505,1.582,535,1.97,623,4.326,1358,2.22,1363,4.002,1364,4.002,1365,5.438,1366,4.002,1367,4.002,1368,4.002,1369,4.002,1378,4.002,1381,4.857,1383,4.326,1388,4.002,1389,3.01,1406,2.619,1409,2.619,1410,2.966,1411,2.966,1412,4.533,1413,2.966,1414,4.533,1415,2.966,1416,2.966,1417,4.533,1418,2.966,1419,2.966,1420,4.533,1421,2.966,1422,2.966,1423,2.966,1424,2.966,1425,4.533,1426,5.501,1427,2.966,1428,2.966,1429,2.966,1430,2.966,1431,4.533,1432,2.966,1433,2.966,1434,2.966,1435,5.501,1436,2.966]],["title/entities/PrivateFile.html",[0,1.63,977,2.784]],["body/entities/PrivateFile.html",[0,2.465,2,2.536,3,0.098,4,0.098,5,0.077,7,0.337,8,1.296,9,3.234,12,1.737,15,2.593,16,0.433,17,0.009,18,1.296,19,1.697,20,3.96,21,0.568,24,1.672,25,3.96,31,0.2,33,1.662,35,0.098,36,0.229,37,0.006,38,0.006,497,4.115,504,4.99,505,2.724,638,4.055,726,3.587,950,5.214,977,4.209,1437,6.95,1438,5.107,1439,5.107,1440,6.668,1441,5.107]],["title/entities/Product.html",[0,1.63,639,1.988]],["body/entities/Product.html",[0,2.281,2,2.257,3,0.087,4,0.087,5,0.068,7,0.3,8,1.527,9,3.249,12,1.639,14,0.876,15,2.495,16,0.458,17,0.009,18,1.461,19,1.718,20,4.007,21,0.575,25,2.424,31,0.226,33,1.479,35,0.087,36,0.204,37,0.006,38,0.006,100,1.072,141,2.869,353,4.92,359,4.92,497,3.663,504,4.617,505,2.424,638,3.901,639,2.781,650,4.013,651,5.448,652,4.013,730,4.013,1349,4.973,1442,4.013,1443,6.17,1444,4.545,1445,4.545,1446,6.17,1447,4.545,1448,6.17,1449,4.545]],["title/classes/ProductNotFoundException.html",[36,0.198,846,3.098]],["body/classes/ProductNotFoundException.html",[3,0.116,4,0.116,5,0.091,12,1.41,14,0.856,16,0.351,17,0.009,18,1.559,21,0.461,31,0.181,35,0.116,36,0.27,37,0.007,38,0.007,48,0.993,99,1.118,100,0.922,207,1.546,483,1.286,485,4.003,486,2.97,487,4.832,489,4.233,492,4.003,782,4.918,846,5.202,945,6.54,1450,6.54,1451,6.027]],["title/controllers/ProductsController.html",[39,1.63,1452,3.3]],["body/controllers/ProductsController.html",[3,0.059,4,0.059,5,0.046,7,0.202,12,1.659,14,0.956,15,2.252,16,0.393,17,0.009,18,1.51,19,1.54,21,0.515,31,0.238,35,0.059,36,0.138,37,0.005,38,0.005,39,1.135,41,1.166,43,1.14,46,1.613,48,0.506,52,1.638,55,1.7,68,1.65,99,1.25,100,1.031,154,1.702,157,2.094,163,4.57,166,4.143,183,3.547,184,2.475,185,2.532,186,4.163,187,2.039,189,1.939,190,1.579,197,1.851,199,2.157,204,2.039,209,1.051,210,2.157,212,3.946,369,3.547,370,3.946,372,3.268,373,3.482,375,4.205,386,3.268,389,2.475,396,3.75,398,2.475,399,1.939,400,2.157,401,2.475,407,1.579,409,1.939,442,2.475,444,2.475,448,2.475,517,3.297,518,3.75,519,2.298,520,2.475,524,2.711,526,1.772,527,2.039,528,2.039,532,2.711,534,2.579,535,2.039,536,2.579,537,2.475,639,1.384,641,4.476,645,3.946,660,1.851,754,2.475,994,2.039,1062,2.475,1111,4.691,1452,3.482,1453,2.711,1454,2.711,1455,3.071,1456,3.071,1457,3.071,1458,3.071,1459,3.071,1460,3.071,1461,5.038,1462,3.071,1463,3.731,1464,2.711,1465,3.071,1466,3.071,1467,3.071,1468,3.071,1469,3.071,1470,3.071,1471,3.071,1472,3.071,1473,3.071,1474,3.071]],["title/modules/ProductsModule.html",[72,1.472,88,3.098]],["body/modules/ProductsModule.html",[3,0.093,4,0.093,5,0.073,17,0.009,31,0.265,35,0.093,36,0.217,37,0.006,38,0.006,41,2.443,48,0.797,72,2.147,74,2.181,75,3.091,88,5.794,90,3.31,91,2.489,92,2.403,94,2.25,145,3.433,429,2.682,430,1.656,543,5.682,544,2.489,546,4.273,639,2.181,653,4.816,660,2.916,841,4.816,1042,4.816,1078,4.816,1452,5.411,1463,5.479,1464,4.273,1475,4.273,1476,4.273,1477,4.839,1478,4.839,1479,7.707,1480,6.436,1481,4.839,1482,4.816,1483,4.839,1484,4.839,1485,4.839]],["title/injectables/ProductsService.html",[274,0.941,1463,2.929]],["body/injectables/ProductsService.html",[3,0.06,4,0.06,5,0.047,7,0.205,12,1.326,14,1.012,15,2.524,16,0.415,17,0.009,18,1.516,21,0.545,24,1.421,31,0.249,35,0.06,36,0.139,37,0.005,38,0.005,43,1.152,46,1.623,48,0.513,52,1.661,68,1.66,99,1.322,100,1.091,157,2.417,171,1.182,207,0.799,208,0.989,274,1.003,275,1.151,322,2.272,369,3.577,370,3.98,372,3.303,373,3.519,375,3.519,407,1.601,409,1.965,442,3.79,444,3.79,448,3.79,505,1.661,517,3.314,526,1.797,527,2.068,528,2.068,544,1.601,554,2.749,555,6.293,556,6.534,560,3.918,562,2.068,564,2.749,569,2.749,571,2.749,635,2.187,638,4.064,639,1.403,641,4.499,645,3.303,660,1.876,661,4.24,836,2.187,994,3.123,1048,2.187,1052,2.749,1080,2.187,1081,2.749,1454,2.749,1461,5.059,1463,3.123,1486,2.749,1487,3.113,1488,3.113,1489,3.113,1490,3.113,1491,3.113,1492,3.113,1493,3.113,1494,3.113,1495,2.187,1496,3.113,1497,4.702,1498,4.702,1499,3.113,1500,3.113,1501,3.113,1502,3.113,1503,3.113,1504,3.113]],["title/entities/PublicFile.html",[0,1.63,979,2.784]],["body/entities/PublicFile.html",[0,2.546,2,2.666,3,0.103,4,0.103,5,0.081,7,0.354,8,1.339,9,3.264,12,1.779,16,0.443,17,0.009,18,1.56,19,1.738,20,4.424,21,0.582,24,1.727,25,4.056,31,0.161,33,1.747,35,0.103,36,0.24,37,0.007,38,0.007,726,3.77,733,4.326,734,4.326,950,5.341,951,5.69,979,4.348,1199,4.74,1505,7.083]],["title/classes/RegisterDto.html",[36,0.198,179,3.098]],["body/classes/RegisterDto.html",[3,0.092,4,0.092,5,0.072,7,0.316,8,1.244,14,0.908,16,0.447,17,0.009,18,1.659,19,1.755,21,0.587,31,0.192,35,0.092,36,0.286,37,0.006,38,0.006,100,1.101,179,4.492,190,2.466,288,4.154,317,4.337,483,1.023,535,4.248,575,2.89,577,3.813,578,4.096,579,1.923,633,3.545,670,5.8,671,5.8,674,4.234,677,6.355,679,3.864,680,4.234,681,3.864,682,4.234,964,4.786,996,3.368,1506,4.234,1507,4.795,1508,4.795,1509,4.795,1510,4.795,1511,6.396,1512,6.396,1513,6.396,1514,5.648,1515,4.795,1516,4.795,1517,4.795,1518,4.795]],["title/interfaces/RequestWithUser.html",[163,2.545,352,2.19]],["body/interfaces/RequestWithUser.html",[3,0.118,4,0.118,5,0.092,7,0.403,8,1.454,15,2.847,16,0.357,17,0.009,31,0.225,35,0.118,37,0.007,38,0.007,163,4.315,166,4.306,352,3.04,354,3.864,486,2.998,751,3.04,1269,4.933,1519,5.405,1520,5.405]],["title/interfaces/TokenPayload.html",[310,2.784,352,2.19]],["body/interfaces/TokenPayload.html",[3,0.119,4,0.119,5,0.093,7,0.408,8,1.464,14,1.069,16,0.439,17,0.009,24,2.034,35,0.119,37,0.007,38,0.007,291,7.454,295,6.317,310,4.754,352,3.076,354,3.91,871,6.072,1521,5.469,1522,5.469]],["title/classes/TwoFactorAuthenticationCodeDto.html",[36,0.198,1523,3.3]],["body/classes/TwoFactorAuthenticationCodeDto.html",[3,0.115,4,0.115,5,0.09,7,0.396,8,1.437,16,0.35,17,0.009,18,1.437,19,1.373,21,0.459,31,0.18,35,0.115,36,0.331,37,0.007,38,0.007,155,4.907,265,4.453,483,1.281,575,3.618,577,3.67,578,3.941,579,2.407,1186,4.907,1523,5.529,1524,6.524,1525,5.302,1526,6.45,1527,6.004]],["title/controllers/TwoFactorAuthenticationController.html",[39,1.63,251,3.3]],["body/controllers/TwoFactorAuthenticationController.html",[3,0.054,4,0.054,5,0.042,7,0.185,14,0.848,16,0.377,17,0.009,19,1.366,21,0.457,31,0.227,35,0.054,36,0.126,37,0.004,38,0.004,39,1.036,41,1.064,43,1.063,46,1.431,48,0.462,55,1.956,68,1.063,99,1.109,100,0.915,141,1.303,154,1.553,155,3.969,156,4.688,157,2.36,161,3.497,162,2.474,163,4.671,166,4.122,171,1.647,183,3.773,184,2.258,185,1.263,186,4.294,187,1.861,189,1.769,190,1.441,191,2.637,192,1.769,193,3.199,194,3.247,197,1.689,198,1.689,199,1.968,204,1.861,206,2.474,207,0.719,208,1.686,209,1.816,210,4.198,212,4.541,216,3.831,218,2.474,219,1.968,222,4.688,231,2.071,249,3.526,251,3.247,261,1.769,264,4.838,265,4.297,321,2.832,322,2.129,741,4.736,744,2.097,751,1.392,845,1.968,970,4.278,1186,4.294,1523,5.783,1526,5.511,1528,2.474,1529,3.831,1530,4.688,1531,4.688,1532,2.802,1533,2.802,1534,2.802,1535,2.802,1536,2.802,1537,2.802,1538,5.977,1539,2.802,1540,2.802,1541,2.802,1542,2.802,1543,2.802,1544,2.802,1545,2.802,1546,2.802,1547,2.802,1548,2.802,1549,3.831,1550,2.802,1551,2.802,1552,2.802,1553,2.802,1554,6.838,1555,5.309,1556,5.309,1557,5.309,1558,2.802,1559,2.802,1560,2.802,1561,2.802,1562,2.474]],["title/injectables/TwoFactorAuthenticationService.html",[249,2.929,274,0.941]],["body/injectables/TwoFactorAuthenticationService.html",[3,0.07,4,0.07,5,0.055,7,0.242,9,3.009,14,0.97,15,2.658,16,0.398,17,0.009,18,1.47,21,0.523,31,0.234,35,0.07,36,0.164,37,0.005,38,0.005,43,1.3,46,1.493,48,0.604,49,4.011,50,1.652,55,1.605,68,1.528,99,1.268,100,1.046,157,2.234,171,2.014,191,3.756,192,2.314,207,1.361,208,1.685,209,1.815,228,2.209,231,1.43,233,3.236,249,3.523,264,5.428,265,4.371,269,5.115,274,1.132,275,1.355,282,3.236,741,4.539,750,2.743,751,1.82,1186,4.817,1269,2.954,1526,5.025,1549,6.677,1563,3.236,1564,5.306,1565,6.236,1566,5.306,1567,3.665,1568,5.306,1569,3.665,1570,3.665,1571,3.665,1572,5.306,1573,3.665,1574,3.665,1575,3.236,1576,3.665,1577,3.236,1578,3.665,1579,3.665,1580,3.665,1581,3.665,1582,3.665,1583,3.665,1584,3.665,1585,3.665]],["title/classes/TypeOrmConfig.html",[36,0.198,119,3.3]],["body/classes/TypeOrmConfig.html",[2,2.182,3,0.084,4,0.084,5,0.066,7,0.289,14,0.624,16,0.351,17,0.009,21,0.336,31,0.207,35,0.116,36,0.197,37,0.006,38,0.006,43,1.477,46,1.052,49,4.301,50,1.98,55,2.082,56,3.54,68,1.477,94,2.043,99,0.815,100,0.672,105,3.806,119,4.511,141,3.2,157,1.298,267,3.54,268,3.54,293,2.773,296,4.464,317,2.647,322,1.761,430,1.503,483,0.937,517,2.043,692,5.15,737,2.535,795,4.511,798,4.234,834,5.809,915,3.879,1586,3.54,1587,6.882,1588,6.028,1589,6.028,1590,4.393,1591,4.393,1592,5.323,1593,4.393,1594,3.54,1595,4.393,1596,4.393,1597,4.393,1598,4.393,1599,4.393,1600,4.393,1601,4.393,1602,6.028,1603,4.393,1604,6.028,1605,4.393,1606,3.879,1607,4.393,1608,4.393,1609,3.879,1610,4.393]],["title/classes/UpdateCategoryDto.html",[36,0.198,395,3.098]],["body/classes/UpdateCategoryDto.html",[3,0.11,4,0.11,5,0.086,7,0.378,8,1.397,12,1.835,16,0.419,17,0.009,18,1.397,19,1.643,21,0.55,24,1.802,31,0.172,35,0.11,36,0.322,37,0.007,38,0.007,100,1.2,395,5.047,483,1.225,574,4.627,576,5.069,577,3.569,578,3.833,579,2.302,633,4.347,883,4.627,893,4.537,1611,6.926,1612,5.069,1613,5.741]],["title/classes/UpdatePostDto.html",[36,0.198,1383,3.098]],["body/classes/UpdatePostDto.html",[3,0.104,4,0.104,5,0.082,7,0.357,8,1.348,12,1.787,16,0.445,17,0.009,18,1.566,19,1.747,21,0.585,24,1.738,31,0.163,35,0.104,36,0.311,37,0.007,38,0.007,483,1.157,496,4.605,577,3.795,578,4.075,579,2.175,625,4.371,627,6.158,633,4.463,883,4.371,893,4.376,1383,4.869,1612,6.121,1614,7.11,1615,5.424,1616,5.424,1617,5.424]],["title/classes/UpdateProductCommand.html",[36,0.198,1495,3.098]],["body/classes/UpdateProductCommand.html",[3,0.095,4,0.095,5,0.075,7,0.327,8,1.272,9,3.216,12,1.821,14,0.704,15,2.569,16,0.453,17,0.009,18,1.513,21,0.595,31,0.197,35,0.095,36,0.222,37,0.006,38,0.006,99,0.92,100,0.759,207,1.679,209,2.976,409,3.132,483,1.058,505,2.646,637,3.713,638,4.018,639,3.646,642,3.998,643,4.381,644,4.381,645,3.485,838,4.381,1461,5.372,1495,4.595,1618,7.143,1619,4.961]],["title/classes/UpdateProductDto.html",[36,0.198,1461,2.929]],["body/classes/UpdateProductDto.html",[3,0.124,4,0.124,5,0.097,17,0.009,31,0.232,35,0.124,36,0.289,37,0.008,38,0.008,369,4.07,483,1.375,486,2.585,641,4.07,645,4.529,647,4.825,1461,5.124,1620,5.693,1621,5.693,1622,5.196,1623,5.196,1624,6.448]],["title/classes/UpdateProductHandler.html",[36,0.198,1482,3.3]],["body/classes/UpdateProductHandler.html",[3,0.08,4,0.08,5,0.063,7,0.274,12,1.564,14,0.824,16,0.338,17,0.009,21,0.444,31,0.243,33,1.354,35,0.08,36,0.186,37,0.006,38,0.006,43,1.422,46,0.996,48,0.685,55,2.023,68,1.019,99,1.077,100,0.888,157,1.975,207,1.49,208,1.321,231,2.608,321,3.097,322,2.328,430,1.423,435,3.365,450,1.998,453,2.763,458,3.351,483,0.887,517,2.7,544,2.139,598,3.097,599,5.004,600,3.665,604,4.344,606,4.344,607,3.113,638,3.321,639,3.014,655,2.922,656,2.922,658,4.077,660,2.507,661,3.113,663,2.922,843,3.353,844,3.673,845,4.077,846,2.922,847,3.353,850,5.126,851,4.679,852,3.673,853,3.673,854,3.673,856,3.673,1482,4.344,1495,5.083,1625,5.904,1626,4.16,1627,4.16,1628,4.16,1629,6.687]],["title/classes/UpdateUserDto.html",[36,0.198,1630,3.554]],["body/classes/UpdateUserDto.html",[3,0.124,4,0.124,5,0.097,17,0.009,31,0.232,35,0.124,36,0.289,37,0.008,38,0.008,369,4.07,483,1.375,486,2.585,667,4.529,669,5.196,1621,5.693,1622,5.196,1623,5.196,1630,6.218,1631,5.693,1632,5.693,1633,6.448]],["title/entities/User.html",[0,1.63,15,1.401]],["body/entities/User.html",[0,1.411,1,4.706,2,1.183,3,0.046,4,0.046,5,0.082,7,0.157,8,0.742,9,3.321,12,1.117,14,1.184,15,1.212,16,0.46,17,0.009,18,1.491,19,1.805,20,3.931,21,0.604,24,1.37,25,2.548,28,2.103,31,0.201,32,5.279,33,0.775,35,0.046,36,0.171,37,0.004,38,0.004,100,0.915,141,3.754,185,3.02,288,2.757,293,1.504,296,2.3,317,2.878,459,3.355,481,1.92,592,1.504,639,3.02,670,3.849,723,2.535,737,2.203,738,3.449,769,2.3,871,2.856,977,3.774,979,2.41,1012,1.782,1039,3.37,1062,3.849,1129,1.782,1194,3.628,1195,1.375,1196,1.92,1341,4.823,1343,4.217,1349,5.612,1355,4.823,1594,3.076,1634,2.103,1635,4.774,1636,5.279,1637,4.217,1638,3.849,1639,4.217,1640,4.776,1641,3.817,1642,2.382,1643,2.382,1644,2.382,1645,2.382,1646,2.382,1647,2.382,1648,3.817,1649,2.382,1650,2.382,1651,2.382,1652,2.382,1653,2.382,1654,2.382,1655,2.382,1656,2.382,1657,2.382,1658,2.382,1659,2.382,1660,3.817,1661,2.382,1662,3.817,1663,2.382,1664,2.382,1665,5.978,1666,5.463,1667,2.382,1668,2.103,1669,2.382,1670,2.382,1671,1.92,1672,3.817,1673,2.382,1674,2.103,1675,2.382,1676,2.382,1677,2.103]],["title/classes/UserNotFoundException.html",[36,0.198,1678,3.3]],["body/classes/UserNotFoundException.html",[3,0.116,4,0.116,5,0.091,12,1.41,14,0.856,16,0.351,17,0.009,21,0.461,24,2.01,31,0.181,35,0.116,36,0.27,37,0.007,38,0.007,48,0.993,99,1.118,100,0.922,207,1.546,295,5.542,483,1.286,485,4.003,486,2.97,487,4.832,489,4.233,492,4.003,1678,5.542,1679,6.54,1680,7.406,1681,6.027]],["title/controllers/UsersController.html",[39,1.63,1682,3.3]],["body/controllers/UsersController.html",[3,0.028,4,0.028,5,0.121,7,0.095,12,1.597,14,0.835,15,2.601,16,0.488,17,0.009,18,0.958,19,1.399,21,0.468,31,0.205,35,0.028,36,0.064,37,0.002,38,0.002,39,0.531,41,0.545,43,0.612,46,1.465,48,0.236,52,0.766,55,0.434,68,1.499,99,1.092,100,0.997,134,0.796,141,2.463,154,0.796,157,1.456,163,4.515,166,3.838,171,0.545,185,0.647,186,3.518,187,0.953,188,3.966,189,0.906,190,0.738,191,1.646,197,0.865,199,1.008,203,0.796,204,0.953,208,1.944,209,0.491,210,3.941,231,0.56,288,3.532,296,0.865,322,2.359,324,3.5,330,1.267,341,1.577,370,2.784,372,1.754,382,3.5,385,3.518,399,2.093,400,1.008,402,1.157,403,1.008,404,1.157,519,1.074,520,1.157,535,0.953,639,1.126,727,2.503,728,0.906,737,2.288,738,1.577,741,3.518,744,1.869,746,2.013,751,1.646,762,1.267,769,1.505,947,2.481,956,1.074,957,3.361,959,5.752,966,1.659,970,2.672,977,1.577,979,2.503,983,2.672,986,2.672,996,5.699,997,3.195,998,2.205,1197,1.157,1211,1.267,1212,1.267,1215,1.267,1216,1.267,1217,1.267,1219,1.267,1220,1.157,1228,1.869,1562,3.5,1635,5.11,1668,1.267,1682,1.869,1683,1.157,1684,2.927,1685,2.927,1686,3.315,1687,3.315,1688,2.927,1689,2.205,1690,2.205,1691,1.435,1692,1.435,1693,3.964,1694,3.964,1695,4.929,1696,7.297,1697,3.315,1698,3.964,1699,1.435,1700,1.435,1701,1.435,1702,1.435,1703,1.435,1704,1.435,1705,1.435,1706,1.435,1707,1.435,1708,2.497,1709,1.435,1710,1.435,1711,1.435,1712,1.435,1713,1.435,1714,3.964,1715,1.435,1716,1.435,1717,1.435,1718,4.929,1719,3.315,1720,1.435,1721,4.929,1722,2.497,1723,1.435,1724,1.435,1725,5.612,1726,1.435,1727,1.435,1728,1.435,1729,3.315,1730,2.497,1731,1.435,1732,1.435,1733,1.435,1734,1.435,1735,1.435,1736,1.435,1737,1.435,1738,1.435,1739,1.435,1740,1.435,1741,1.435,1742,4.492,1743,1.267,1744,1.435,1745,4.492,1746,3.964,1747,5.297,1748,3.964,1749,5.883,1750,2.497,1751,1.435,1752,1.435,1753,1.435,1754,1.435,1755,1.435,1756,1.435,1757,1.435,1758,1.435,1759,5.612,1760,1.435,1761,1.435,1762,1.435,1763,1.435,1764,1.435,1765,1.435,1766,2.497,1767,1.435,1768,1.435,1769,3.964,1770,3.315,1771,1.435,1772,3.315,1773,3.964,1774,1.435,1775,1.435,1776,1.435,1777,1.435,1778,2.497,1779,1.435,1780,1.435,1781,1.435,1782,1.435,1783,1.435,1784,1.435,1785,1.435,1786,1.435,1787,1.435,1788,1.435,1789,1.435,1790,1.435,1791,1.435,1792,1.435,1793,1.435]],["title/modules/UsersModule.html",[72,1.472,89,2.929]],["body/modules/UsersModule.html",[3,0.089,4,0.089,5,0.07,15,1.469,17,0.009,31,0.254,35,0.089,36,0.207,37,0.006,38,0.006,41,2.37,48,0.762,72,2.083,74,2.085,75,2.999,81,5.408,83,5.408,85,5.408,89,5.89,90,3.211,91,2.379,92,2.297,94,2.903,131,2.92,132,5.513,134,2.564,145,3.33,191,4.377,203,2.564,252,4.146,429,2.564,430,1.583,737,2.67,956,3.461,1682,5.289,1743,4.084,1794,4.084,1795,4.084,1796,4.084,1797,4.626,1798,4.626,1799,4.626,1800,4.626,1801,4.626]],["title/injectables/UsersService.html",[191,2.19,274,0.941]],["body/injectables/UsersService.html",[3,0.026,4,0.026,5,0.065,7,0.089,12,0.887,14,1.017,15,2.165,16,0.417,17,0.009,18,1.445,21,0.555,24,2.149,31,0.191,33,0.438,35,0.026,36,0.06,37,0.002,38,0.002,43,0.579,46,1.715,48,0.222,55,2.224,68,1.67,99,1.329,100,1.096,131,0.85,134,0.746,141,0.626,157,2.548,171,2.535,191,1.173,203,1.309,207,0.606,208,1.37,209,1.08,229,2.543,231,3.187,269,1.768,274,0.504,275,0.498,288,1.821,295,5.932,296,0.812,303,2.086,304,1.189,305,1.904,308,0.946,313,1.189,314,1.904,318,1.768,321,2.731,322,2.053,351,1.189,369,1.491,407,0.693,430,0.461,435,1.763,450,0.647,453,1.569,458,0.777,667,3.03,728,4.013,737,1.363,738,1.992,747,3.232,748,1.569,780,3.228,782,3.793,786,4.604,845,1.659,938,1.768,943,0.946,951,1.768,956,1.008,966,1.569,975,3.4,983,1.904,986,1.904,997,1.085,1012,1.008,1026,1.189,1200,2.663,1201,1.085,1207,3.232,1256,2.786,1258,1.189,1530,2.086,1531,2.086,1594,1.085,1632,1.189,1635,3.555,1636,2.786,1637,2.786,1638,1.904,1639,1.189,1671,1.085,1674,1.189,1678,1.008,1684,2.086,1685,2.086,1688,2.086,1689,2.086,1690,2.086,1802,1.189,1803,3.155,1804,3.155,1805,3.792,1806,2.362,1807,2.362,1808,2.362,1809,2.362,1810,2.362,1811,2.362,1812,1.347,1813,5.12,1814,1.347,1815,2.362,1816,2.362,1817,1.347,1818,1.347,1819,6.167,1820,1.347,1821,1.347,1822,1.347,1823,2.362,1824,1.347,1825,2.362,1826,1.347,1827,2.362,1828,1.347,1829,2.362,1830,1.347,1831,2.362,1832,1.347,1833,1.347,1834,2.362,1835,1.347,1836,2.362,1837,1.347,1838,2.362,1839,1.347,1840,2.362,1841,1.347,1842,2.362,1843,1.347,1844,2.362,1845,1.347,1846,2.362,1847,1.347,1848,2.362,1849,1.347,1850,2.362,1851,1.347,1852,3.155,1853,1.347,1854,1.347,1855,1.347,1856,1.347,1857,1.347,1858,5.12,1859,3.155,1860,2.362,1861,1.347,1862,1.347,1863,3.155,1864,1.347,1865,1.347,1866,2.362,1867,1.347,1868,1.347,1869,1.347,1870,2.362,1871,2.362,1872,2.362,1873,1.347,1874,3.155,1875,2.362,1876,1.347,1877,2.362,1878,2.362,1879,1.347,1880,2.362,1881,2.362,1882,2.362,1883,2.362,1884,1.347,1885,1.347,1886,1.347,1887,1.347,1888,2.362,1889,1.347,1890,1.347,1891,1.347,1892,1.347,1893,1.347,1894,1.347]],["title/coverage.html",[1895,4.871]],["body/coverage.html",[0,2.468,1,1.158,5,0.025,6,1.456,15,0.524,16,0.096,17,0.009,36,0.389,37,0.003,38,0.003,39,2.468,40,1.234,42,1.456,108,1.041,119,1.234,131,1.777,134,2.413,136,1.234,149,1.234,150,1.234,152,1.234,153,1.456,155,1.095,160,1.095,163,0.952,169,1.234,179,1.158,185,0.743,191,0.819,193,0.994,197,0.994,200,1.234,202,1.234,245,1.158,246,1.158,247,1.158,248,1.158,249,1.095,251,1.234,261,1.777,262,1.977,264,2.107,265,2.219,274,1.68,276,1.456,310,1.041,322,0.661,352,2.644,353,1.158,355,1.456,356,2.269,359,1.158,360,1.456,366,1.234,367,1.456,377,1.158,379,1.041,385,1.095,395,1.158,403,1.158,405,1.095,433,1.456,451,1.234,471,1.456,484,1.456,485,3.246,493,0.914,494,1.456,506,1.234,507,1.456,512,1.095,515,1.234,521,1.095,526,0.952,545,1.234,549,1.234,553,1.456,560,0.848,563,1.158,566,1.158,573,1.456,574,2.269,580,1.456,581,1.456,586,1.456,587,1.456,589,1.234,596,1.456,597,1.456,614,1.234,615,1.456,616,1.456,623,1.158,624,1.456,625,2.269,635,1.158,636,1.456,637,2.756,639,0.743,641,1.041,646,1.456,647,2.756,653,1.234,654,1.456,655,3.058,667,1.158,668,1.456,669,2.269,683,1.158,684,1.456,685,2.269,687,1.095,688,1.696,708,1.329,723,1.095,724,2.446,725,1.456,726,3.058,735,1.234,736,2.269,747,1.041,772,2.269,795,1.234,796,1.456,834,1.234,836,1.158,837,1.456,841,1.234,842,1.456,846,1.158,857,1.329,858,2.107,899,3.94,909,7.4,911,1.456,912,1.456,922,1.456,923,1.456,935,1.329,937,1.329,938,1.234,943,1.158,944,1.456,947,1.234,948,2.756,949,1.456,957,1.234,958,1.456,965,1.329,966,1.095,967,1.456,975,1.095,977,1.041,979,1.041,982,1.456,1042,1.234,1043,2.269,1044,1.456,1048,1.158,1053,1.234,1054,1.158,1068,2.269,1069,1.456,1074,1.456,1075,1.456,1078,1.234,1080,1.158,1084,1.456,1088,1.456,1089,1.456,1096,1.456,1097,1.456,1105,1.456,1106,1.456,1111,1.234,1112,1.456,1113,1.234,1114,1.456,1153,2.756,1154,2.269,1157,1.456,1158,1.456,1178,1.456,1185,1.158,1186,3.246,1187,1.456,1188,1.456,1192,1.456,1194,1.095,1195,3.073,1196,1.329,1200,1.158,1201,1.329,1202,1.456,1203,1.234,1207,1.041,1213,1.234,1214,2.269,1228,1.234,1264,1.456,1272,1.456,1280,1.456,1293,1.456,1308,1.456,1321,1.456,1322,1.456,1324,1.456,1325,1.456,1331,1.456,1336,1.456,1358,1.234,1359,1.456,1361,1.234,1362,1.456,1383,1.158,1389,1.095,1409,1.456,1437,1.456,1442,1.456,1450,1.456,1452,1.234,1453,1.456,1461,1.095,1463,1.095,1482,1.234,1486,1.456,1495,1.158,1505,1.456,1506,1.456,1519,1.456,1520,1.456,1521,1.456,1522,1.456,1523,1.234,1524,1.456,1525,1.456,1528,1.456,1563,1.456,1586,2.269,1611,1.456,1614,1.456,1618,1.456,1620,1.456,1625,1.456,1630,1.329,1631,1.456,1634,1.456,1678,1.234,1679,1.456,1682,1.234,1683,1.329,1802,1.456,1895,1.329,1896,1.649,1897,1.649,1898,1.649,1899,7.659,1900,2.815,1901,4.888,1902,7.939,1903,6.479,1904,8.148,1905,1.456,1906,4.888,1907,1.456,1908,2.815,1909,1.649,1910,6.85,1911,2.815,1912,1.649,1913,1.649,1914,1.456,1915,1.456,1916,2.269,1917,1.456,1918,1.456,1919,1.456,1920,1.456,1921,1.456,1922,1.456,1923,1.456,1924,1.456,1925,1.649,1926,1.649]],["title/dependencies.html",[75,2.551,1927,3.241]],["body/dependencies.html",[17,0.009,33,1.625,36,0.294,37,0.006,38,0.006,48,0.822,50,2.25,75,2.398,127,4.024,190,2.568,198,3.009,203,2.767,219,3.507,254,4.024,256,2.767,305,4.024,430,1.708,544,2.568,579,2.002,592,3.152,751,3.263,932,4.409,1003,4.409,1013,4.409,1015,4.409,1124,4.024,1167,5.158,1220,4.024,1575,4.409,1577,4.409,1622,4.024,1623,4.024,1928,7.343,1929,4.993,1930,4.993,1931,4.993,1932,4.993,1933,4.993,1934,4.993,1935,4.993,1936,4.993,1937,4.993,1938,4.993,1939,4.993,1940,4.993,1941,4.993,1942,4.993,1943,4.993,1944,4.993,1945,4.993,1946,4.993,1947,4.993,1948,4.993,1949,4.993,1950,4.993,1951,4.993,1952,4.993,1953,4.993,1954,4.993,1955,4.993,1956,4.409,1957,4.993,1958,4.993,1959,4.993,1960,4.993]],["title/miscellaneous/enumerations.html",[1961,2.438,1962,4.69]],["body/miscellaneous/enumerations.html",[7,0.408,17,0.009,37,0.007,38,0.007,69,5.635,203,4.174,294,5.745,306,6.649,308,5.289,716,5.635,858,4.635,896,6.649,897,6.069,1961,4.113,1962,5.469,1963,5.469,1964,6.193,1965,7.53,1966,6.193,1967,6.193,1968,6.193]],["title/miscellaneous/functions.html",[1961,2.438,1969,4.69]],["body/miscellaneous/functions.html",[7,0.351,14,1.136,16,0.466,17,0.008,37,0.007,38,0.007,46,1.641,53,3.99,99,1.484,100,1.224,108,4.329,134,2.955,294,3.541,688,4.132,692,3.99,708,5.526,858,3.99,871,5.131,900,4.708,901,6.054,935,5.526,937,5.526,938,5.131,942,4.708,1195,3.077,1213,5.131,1214,5.526,1228,5.131,1914,4.708,1915,6.692,1916,4.297,1917,6.054,1923,4.708,1924,6.054,1961,3.541,1963,4.708,1969,4.708,1970,5.332,1971,4.708,1972,5.332,1973,5.332,1974,5.332,1975,5.332,1976,5.332,1977,5.332]],["title/index.html",[7,0.242,1978,3.671,1979,3.671]],["body/index.html",[5,0.084,9,1.453,17,0.009,33,1.816,37,0.005,38,0.005,53,4.175,71,4.926,72,2.715,92,3.505,155,4.306,198,2.369,208,1.248,219,2.761,228,2.369,261,2.482,265,2.369,296,2.369,400,2.761,435,1.828,534,2.179,536,2.179,634,3.471,639,1.772,716,2.942,724,2.611,737,3.743,738,2.482,798,2.761,897,4.496,966,3.705,996,2.761,1012,2.942,1054,3.918,1115,3.471,1116,6.581,1129,2.942,1185,2.761,1290,4.926,1514,3.471,1529,3.471,1609,4.926,1635,2.942,1671,3.168,1677,3.471,1683,3.168,1895,3.168,1956,3.471,1980,5.579,1981,3.931,1982,3.931,1983,3.931,1984,7.453,1985,3.931,1986,3.931,1987,3.931,1988,3.931,1989,3.931,1990,3.931,1991,5.579,1992,3.931,1993,3.931,1994,3.931,1995,3.931,1996,3.931,1997,3.168,1998,3.931,1999,3.931,2000,3.931,2001,3.931,2002,3.931,2003,3.931,2004,3.931,2005,3.931,2006,7.058,2007,5.579,2008,3.931,2009,3.931,2010,5.579,2011,5.579,2012,3.931,2013,3.931,2014,3.931,2015,3.931,2016,3.931,2017,3.931,2018,3.931,2019,3.931,2020,3.471,2021,3.931,2022,3.931,2023,3.931,2024,3.931,2025,3.931,2026,3.931,2027,3.931,2028,3.931,2029,3.931,2030,3.931,2031,3.931,2032,3.931,2033,3.931,2034,3.931,2035,7.962,2036,3.931,2037,3.931,2038,3.931,2039,7.742,2040,3.931,2041,3.931,2042,3.931,2043,3.931,2044,5.579,2045,3.931,2046,3.931,2047,3.931,2048,3.931,2049,3.931]],["title/modules.html",[74,2.724]],["body/modules.html",[17,0.007,37,0.007,38,0.007,73,4.159,74,2.505,78,3.904,79,3.904,80,3.904,81,3.691,82,3.904,83,3.691,84,3.904,85,3.691,86,3.904,87,3.904,88,3.904,89,3.691,1145,6.217,2020,7.953,2050,9.007,2051,9.007,2052,9.094,2053,7.041]],["title/overview.html",[1997,4.871]],["body/overview.html",[2,1.6,17,0.009,37,0.005,38,0.005,41,1.223,73,6.678,74,1.452,75,2.317,76,2.845,77,2.845,78,6.076,79,4.831,80,4.831,81,4.971,82,4.063,83,4.971,84,4.063,85,4.971,86,5.406,87,4.831,88,4.831,89,5.534,90,2.481,91,1.657,92,1.6,191,3.718,193,4.511,241,2.845,243,2.845,244,2.845,245,4.063,246,4.063,247,4.063,248,4.063,249,3.841,275,1.191,354,2.034,405,3.841,425,2.845,426,2.845,483,0.687,521,3.841,540,2.845,541,2.845,683,5.257,687,3.841,747,4.726,764,2.845,765,2.845,766,2.845,972,2.845,973,2.845,974,2.845,975,4.971,1207,4.726,1241,2.845,1242,2.845,1243,2.845,1286,2.845,1287,2.845,1288,2.845,1389,3.841,1403,2.845,1404,2.845,1463,3.841,1475,2.845,1476,2.845,1794,2.845,1795,2.845,1796,2.845,1997,2.596,2054,3.222,2055,4.825,2056,3.222,2057,3.222,2058,3.222]],["title/properties.html",[8,1.033,1927,3.241]],["body/properties.html",[8,1.33,17,0.009,37,0.008,38,0.008,51,5.513,495,4.122,996,4.805,2059,6.841,2060,6.841,2061,6.841]],["title/miscellaneous/variables.html",[54,4.28,1961,2.438]],["body/miscellaneous/variables.html",[1,2.922,7,0.274,10,3.673,11,3.673,12,1.358,13,3.673,15,1.321,16,0.422,17,0.009,18,0.809,37,0.006,38,0.006,49,3.439,54,3.353,55,2.023,68,1.638,94,1.934,100,0.637,105,2.626,157,1.229,267,3.353,268,3.353,288,2.401,293,4.805,294,5.055,296,2.507,317,2.507,517,1.934,534,4.011,535,4.806,536,4.37,537,5.389,560,2.986,834,4.344,909,4.679,950,2.922,1004,5.126,1053,4.344,1054,4.077,1058,5.389,1586,3.353,1592,3.673,1606,3.673,1638,3.353,1905,3.673,1907,5.126,1916,3.353,1918,5.126,1919,3.673,1920,5.126,1921,3.673,1922,5.126,1961,2.763,1971,3.673,2062,4.16,2063,4.16,2064,4.16,2065,4.16,2066,4.16,2067,4.16,2068,4.16,2069,4.16,2070,4.16,2071,4.16,2072,4.16,2073,4.16,2074,4.16,2075,4.16,2076,4.16,2077,4.16,2078,4.16,2079,4.16,2080,4.16]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":909,"title":{},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":2059,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1952,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1940,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":1959,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1149,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":1939,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1944,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1904,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1912,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1909,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1899,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1913,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1902,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1910,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1903,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1900,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1911,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1901,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1908,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":535,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1946,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1932,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1942,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":1949,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":313,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["1024",{"_index":1136,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2055,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":1943,"title":{},"body":{"dependencies.html":{}}}],["123123123123",{"_index":1518,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123123123123'})@isoptional()@isstring()@isnotempty()@matches(/^\\+[1",{"_index":1515,"title":{},"body":{"classes/RegisterDto.html":{}}}],["13",{"_index":2054,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1784,"title":{},"body":{"controllers/UsersController.html":{}}}],["2.0.0",{"_index":1929,"title":{},"body":{"dependencies.html":{}}}],["2.1128.0",{"_index":1937,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":537,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["22",{"_index":2056,"title":{},"body":{"overview.html":{}}}],["23505",{"_index":1968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2fa",{"_index":1529,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"index.html":{}}}],["3.0.2",{"_index":1954,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1135,"title":{},"body":{"controllers/HealthController.html":{}}}],["300mb",{"_index":1131,"title":{},"body":{"controllers/HealthController.html":{}}}],["3600",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1945,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1958,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1307,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["45",{"_index":2057,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1938,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1934,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1144,"title":{},"body":{"controllers/HealthController.html":{}}}],["500",{"_index":1305,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["6",{"_index":2058,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":1955,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":1931,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":1936,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":1930,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":1935,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1933,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1960,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":1928,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1948,"title":{},"body":{"dependencies.html":{}}}],["9]\\\\d{1,14",{"_index":1517,"title":{},"body":{"classes/RegisterDto.html":{}}}],["9]\\d{1,14",{"_index":677,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["accesstokencookie",{"_index":216,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["addavatar",{"_index":1685,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addavatar(request",{"_index":1691,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(userid",{"_index":1816,"title":{},"body":{"injectables/UsersService.html":{}}}],["addavatarinpgsql",{"_index":1803,"title":{},"body":{"injectables/UsersService.html":{}}}],["addavatarinpgsql(userid",{"_index":1818,"title":{},"body":{"injectables/UsersService.html":{}}}],["addavataronamazons3",{"_index":1686,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronamazons3(request",{"_index":1700,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronpostgres",{"_index":1687,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronpostgres(request",{"_index":1703,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatarusingamazons3",{"_index":1804,"title":{},"body":{"injectables/UsersService.html":{}}}],["addavatarusingamazons3(userid",{"_index":1821,"title":{},"body":{"injectables/UsersService.html":{}}}],["added",{"_index":1695,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile",{"_index":1688,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addprivatefile(request",{"_index":1706,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile(userid",{"_index":1823,"title":{},"body":{"injectables/UsersService.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address.entity",{"_index":1667,"title":{},"body":{"entities/User.html":{}}}],["age=${this.configservice.get",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["allocated",{"_index":1138,"title":{},"body":{"controllers/HealthController.html":{}}}],["already",{"_index":323,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["amazon",{"_index":1671,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["any(paragraphs",{"_index":1429,"title":{},"body":{"injectables/PostsService.html":{}}}],["anything",{"_index":1995,"title":{},"body":{"index.html":{}}}],["api",{"_index":2007,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":1744,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiconsumes('multipart/form",{"_index":1769,"title":{},"body":{"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":1745,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiextramodels",{"_index":401,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["apiextramodels(findoneparams",{"_index":412,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apiextramodels(paginatedresultdto",{"_index":532,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["apinotfoundresponse",{"_index":1746,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":1747,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":1748,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":964,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({description",{"_index":1510,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({type",{"_index":960,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{}}}],["apitags",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["apitags('categories",{"_index":411,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apitags('comments",{"_index":531,"title":{},"body":{"controllers/CommentsController.html":{}}}],["apitags('posts",{"_index":1392,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('products",{"_index":1466,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apitags('users",{"_index":1756,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":1749,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":2037,"title":{},"body":{"index.html":{}}}],["app.config.ts",{"_index":2000,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["app_debug",{"_index":859,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["app_env",{"_index":860,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["app_filter",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["app_url",{"_index":861,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["appconfig",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":40,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appenv",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["appmodule",{"_index":73,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appurl",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["argumentshost",{"_index":916,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["array",{"_index":968,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"entities/Post.html":{}}}],["async",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["authenticate",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(@req",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"index.html":{}}}],["authentication.controller",{"_index":257,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.controller.ts",{"_index":1528,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:31",{"_index":1536,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:48",{"_index":1543,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:66",{"_index":1540,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:84",{"_index":1533,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.guard",{"_index":199,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":1154,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":1563,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:10",{"_index":1567,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:16",{"_index":1569,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:33",{"_index":1571,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:43",{"_index":1573,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication/jwt",{"_index":520,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["authentication/request",{"_index":519,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["authentication/two",{"_index":1386,"title":{},"body":{"controllers/PostsController.html":{}}}],["authentication=${token",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":152,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":78,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":193,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticator",{"_index":1574,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":1578,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri",{"_index":1579,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":1583,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":1155,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":1156,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1193,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":495,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"properties.html":{}}}],["author.posts",{"_index":498,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{}}}],["authors",{"_index":357,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["available",{"_index":1145,"title":{},"body":{"controllers/HealthController.html":{},"modules.html":{}}}],["avatar",{"_index":1635,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["avatar.id",{"_index":1878,"title":{},"body":{"injectables/UsersService.html":{}}}],["avatarid",{"_index":1636,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["avatarid'})@onetoone(undefined",{"_index":1645,"title":{},"body":{"entities/User.html":{}}}],["avatars",{"_index":1777,"title":{},"body":{"controllers/UsersController.html":{}}}],["await",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1003,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["aws.config.ts",{"_index":2001,"title":{},"body":{"index.html":{}}}],["awsconfig",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["badrequestexception",{"_index":1741,"title":{},"body":{"controllers/UsersController.html":{}}}],["badrequestexception('provide",{"_index":1780,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":2005,"title":{},"body":{"index.html":{}}}],["baseexceptionfilter",{"_index":913,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["bcrypt",{"_index":305,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":1857,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":312,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["best",{"_index":1988,"title":{},"body":{"index.html":{}}}],["binary",{"_index":962,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{}}}],["body",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"injectables/FilesService.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["bookproperties",{"_index":353,"title":{"interfaces/BookProperties.html":{}},"body":{"interfaces/BookProperties.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"coverage.html":{}}}],["boolean",{"_index":871,"title":{},"body":{"classes/EnvironmentVariables.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":1915,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":2013,"title":{},"body":{"index.html":{}}}],["box",{"_index":2006,"title":{},"body":{"index.html":{}}}],["brand",{"_index":361,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["browse",{"_index":2052,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2050,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1022,"title":{},"body":{"injectables/FilesService.html":{}}}],["buffer",{"_index":786,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["building",{"_index":1992,"title":{},"body":{"index.html":{}}}],["built",{"_index":2027,"title":{},"body":{"index.html":{}}}],["bytea",{"_index":731,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["cache",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["callback",{"_index":1778,"title":{},"body":{"controllers/UsersController.html":{}}}],["callback(null",{"_index":1781,"title":{},"body":{"controllers/UsersController.html":{}}}],["callhandler",{"_index":928,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["carproperties",{"_index":359,"title":{"interfaces/CarProperties.html":{}},"body":{"interfaces/CarProperties.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"coverage.html":{}}}],["cascade",{"_index":1641,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":318,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":914,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["categories",{"_index":368,"title":{},"body":{"controllers/CategoriesController.html":{},"entities/Post.html":{}}}],["categories.controller",{"_index":428,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":406,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/entities/category.entity",{"_index":1352,"title":{},"body":{"entities/Post.html":{}}}],["categoriescontroller",{"_index":366,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":79,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":405,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":379,"title":{"entities/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Post.html":{},"coverage.html":{}}}],["category.dto",{"_index":408,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["category.dto.ts",{"_index":574,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:11",{"_index":1613,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:6",{"_index":576,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.posts",{"_index":1357,"title":{},"body":{"entities/Post.html":{}}}],["category.posts)@jointable",{"_index":1339,"title":{},"body":{"entities/Post.html":{}}}],["categoryid",{"_index":490,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["categorynotfoundexception",{"_index":451,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["categorynotfoundexception(id",{"_index":462,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoryrepository",{"_index":437,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["check",{"_index":1116,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["city",{"_index":10,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["cityname",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":36,"title":{"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{}},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":483,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["clone",{"_index":1990,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":241,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":243,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":242,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":244,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":425,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":426,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":540,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_providers",{"_index":541,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule",{"_index":764,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule_exports",{"_index":766,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule_providers",{"_index":765,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":972,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":973,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":974,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule",{"_index":1241,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule_exports",{"_index":1243,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule_providers",{"_index":1242,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1286,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1288,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1287,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1403,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":1404,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1475,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1476,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1794,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1795,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1797,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1796,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1557,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto",{"_index":1545,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto.ts",{"_index":1525,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["code.dto.ts:6",{"_index":1527,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["codes.enum",{"_index":309,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["codes.enum.ts",{"_index":1965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":20,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["column('text",{"_index":1348,"title":{},"body":{"entities/Post.html":{}}}],["column()@exclude",{"_index":1657,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":1654,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":1341,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["column({type",{"_index":730,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/Product.html":{}}}],["column({unique",{"_index":1650,"title":{},"body":{"entities/User.html":{}}}],["command",{"_index":606,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["commandbus",{"_index":555,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["commandhandler",{"_index":607,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["commandhandler(createcommentcommand",{"_index":609,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandhandler(createproductcommand",{"_index":662,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["commandhandler(deleteproductcommand",{"_index":849,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["commandhandler(updateproductcommand",{"_index":1627,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["commands/handlers/create",{"_index":546,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ProductsModule.html":{}}}],["commands/handlers/delete",{"_index":1484,"title":{},"body":{"modules/ProductsModule.html":{}}}],["commands/handlers/update",{"_index":1483,"title":{},"body":{"modules/ProductsModule.html":{}}}],["commands/implementations/create",{"_index":564,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["commands/implementations/delete",{"_index":1494,"title":{},"body":{"injectables/ProductsService.html":{}}}],["commands/implementations/update",{"_index":1496,"title":{},"body":{"injectables/ProductsService.html":{}}}],["comment",{"_index":493,"title":{"entities/Comment.html":{}},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{},"coverage.html":{}}}],["comment.command",{"_index":565,"title":{},"body":{"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{}}}],["comment.command.ts",{"_index":581,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["comment.command.ts:4",{"_index":583,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:6",{"_index":585,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:7",{"_index":584,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.dto",{"_index":523,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{}}}],["comment.dto.ts",{"_index":587,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:11",{"_index":591,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:7",{"_index":588,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.handler",{"_index":547,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comment.handler.ts",{"_index":597,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["comment.handler.ts:10",{"_index":602,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.handler.ts:15",{"_index":605,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.post",{"_index":1344,"title":{},"body":{"entities/Post.html":{}}}],["comments",{"_index":508,"title":{},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{}}}],["comments.controller",{"_index":548,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.dto",{"_index":525,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comments.dto.ts",{"_index":1089,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["comments.dto.ts:8",{"_index":1091,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["comments.handler",{"_index":551,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.handler.ts",{"_index":1097,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["comments.handler.ts:10",{"_index":1098,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.handler.ts:15",{"_index":1099,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.query",{"_index":568,"title":{},"body":{"injectables/CommentsService.html":{},"classes/GetCommentsHandler.html":{}}}],["comments.query.ts",{"_index":1106,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["comments.query.ts:3",{"_index":1108,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.query.ts:5",{"_index":1110,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.query.ts:6",{"_index":1109,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.service",{"_index":522,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{}}}],["comments/entities/comment.entity",{"_index":1353,"title":{},"body":{"entities/Post.html":{}}}],["commentscontroller",{"_index":506,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentscount",{"_index":1103,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["commentsmodule",{"_index":80,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":603,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["commentsservice",{"_index":521,"title":{"injectables/CommentsService.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"coverage.html":{},"overview.html":{}}}],["complete",{"_index":2014,"title":{},"body":{"index.html":{}}}],["config",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config/app.config",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["config/aws.config",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["config/typeorm.config",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["configmodule.forroot",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('app.filedestination",{"_index":1231,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["configservice.get('database.host",{"_index":1595,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.name",{"_index":1600,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.password",{"_index":1599,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.port",{"_index":1596,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.username",{"_index":1598,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('jwt.accesstokenexpirationtime')}s",{"_index":273,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt.accesstokensecret",{"_index":270,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt.refreshtokensecret",{"_index":1173,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('node_env",{"_index":712,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["configservice.get('typeorm.logging",{"_index":1605,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('typeorm.synchronize",{"_index":1603,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configurable",{"_index":2028,"title":{},"body":{"index.html":{}}}],["configure",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["connection",{"_index":1813,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('exception",{"_index":919,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["consolelogger",{"_index":686,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":693,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":1265,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoryid",{"_index":488,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["constructor(categoryrepository",{"_index":434,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(commandbus",{"_index":554,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["constructor(comment",{"_index":582,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["constructor(commentsrepository",{"_index":601,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["constructor(configservice",{"_index":1159,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["constructor(context",{"_index":691,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(databasefilesrepository",{"_index":776,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["constructor(fileid",{"_index":945,"title":{},"body":{"classes/FileNotFoundException.html":{},"classes/ProductNotFoundException.html":{}}}],["constructor(id",{"_index":838,"title":{},"body":{"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["constructor(localfilesrepository",{"_index":1248,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["constructor(logsrepository",{"_index":1310,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(ownerid",{"_index":1070,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["constructor(postid",{"_index":1107,"title":{},"body":{"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["constructor(postsrepository",{"_index":1410,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["constructor(product",{"_index":640,"title":{},"body":{"classes/CreateProductCommand.html":{}}}],["constructor(productid",{"_index":1085,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["constructor(productsrepository",{"_index":656,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["constructor(public",{"_index":840,"title":{},"body":{"classes/DeleteProductCommand.html":{},"classes/FindProductQuery.html":{}}}],["constructor(publicfilesrepository",{"_index":989,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(userid",{"_index":1680,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(usersrepository",{"_index":1812,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["consumer",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logsmiddleware).forroutes",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":496,"title":{},"body":{"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"controllers/DatabaseFilesController.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{}}}],["context",{"_index":617,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"injectables/ExcludeNullInterceptor.html":{},"entities/Log.html":{}}}],["controller",{"_index":39,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":1546,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('authentication",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('categories",{"_index":410,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('comments",{"_index":530,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('database",{"_index":752,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["controller('health",{"_index":1125,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('local",{"_index":1208,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["controller('posts",{"_index":1391,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('products",{"_index":1465,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":1755,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{},"index.html":{}}}],["country",{"_index":11,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["countryname",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":1895,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrs",{"_index":2011,"title":{},"body":{"index.html":{}}}],["cqrsmodule",{"_index":543,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ProductsModule.html":{}}}],["create",{"_index":369,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":413,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["create(category",{"_index":376,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["create(createcategorydto",{"_index":438,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["create(createproductdto",{"_index":1454,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["create(createuserdto",{"_index":1825,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcategorydto",{"_index":377,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":509,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["createcomment(comment",{"_index":511,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["createcommentcommand",{"_index":563,"title":{"classes/CreateCommentCommand.html":{}},"body":{"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcommentcommand(comment",{"_index":572,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentdto",{"_index":512,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommenthandler",{"_index":545,"title":{"classes/CreateCommentHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createdatecolumn",{"_index":1275,"title":{},"body":{"entities/Log.html":{}}}],["createduser",{"_index":315,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createlog",{"_index":1309,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlog(log",{"_index":1313,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlogdto",{"_index":614,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["createpost",{"_index":1363,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(post",{"_index":1369,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":623,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createproductcommand",{"_index":635,"title":{"classes/CreateProductCommand.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createproductcommand(createproductdto",{"_index":1499,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":641,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproducthandler",{"_index":653,"title":{"classes/CreateProductHandler.html":{}},"body":{"classes/CreateProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["createreadstream",{"_index":1025,"title":{},"body":{"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{}}}],["createreadstream(join(process.cwd",{"_index":1210,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["createuserdto",{"_index":667,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creationdate",{"_index":1273,"title":{},"body":{"entities/Log.html":{}}}],["credentials",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currentavatarid",{"_index":1874,"title":{},"body":{"injectables/UsersService.html":{}}}],["currenthashedrefreshtoken",{"_index":1637,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["custom",{"_index":1290,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["customlogger",{"_index":683,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":727,"title":{},"body":{"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"classes/PaginatedResultDto.html":{},"controllers/UsersController.html":{}}}],["data')@apibody({description",{"_index":1693,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":737,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/FilesService.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["database.config.ts",{"_index":2002,"title":{},"body":{"index.html":{}}}],["database/database",{"_index":1593,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["database/database.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgres",{"_index":307,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["database_host",{"_index":862,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_name",{"_index":863,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_password",{"_index":864,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_port",{"_index":865,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_user",{"_index":866,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["databaseconfig",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["databasefile",{"_index":723,"title":{"entities/DatabaseFile.html":{}},"body":{"entities/DatabaseFile.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["databasefilescontroller",{"_index":735,"title":{"controllers/DatabaseFilesController.html":{}},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"coverage.html":{}}}],["databasefilesmodule",{"_index":81,"title":{"modules/DatabaseFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databasefilesrepository",{"_index":778,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["databasefilesservice",{"_index":747,"title":{"injectables/DatabaseFilesService.html":{}},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["databaselogger",{"_index":795,"title":{"classes/DatabaseLogger.html":{}},"body":{"classes/DatabaseLogger.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{}}}],["databasemodule",{"_index":82,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":788,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{}}}],["date",{"_index":473,"title":{},"body":{"entities/Category.html":{},"entities/Log.html":{}}}],["debug",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":695,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debugenabled",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["debugmode",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":293,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":21,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":400,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":389,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["delete(':id')@httpcode(204",{"_index":1459,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete(':id')@useguards(jwttwofactorguard",{"_index":1373,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('avatar",{"_index":1789,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('avatar')@apiokresponse({description",{"_index":1712,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('files/:id",{"_index":1792,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('files/:id')@apiparam({name",{"_index":1717,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar",{"_index":1689,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteavatar(@req",{"_index":1790,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(request",{"_index":1711,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(userid",{"_index":1827,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":382,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["deletedat",{"_index":472,"title":{},"body":{"entities/Category.html":{}}}],["deletedatecolumn",{"_index":474,"title":{},"body":{"entities/Category.html":{}}}],["deletefilewithqueryrunner",{"_index":773,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["deletefilewithqueryrunner(fileid",{"_index":779,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["deletelocalfilewithqueryrunner",{"_index":1246,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["deletelocalfilewithqueryrunner(fileid",{"_index":1251,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["deleteobject",{"_index":1036,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepost",{"_index":1364,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param",{"_index":1401,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1414,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(undefined",{"_index":1372,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteprivatefile",{"_index":983,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteprivatefile(fileid",{"_index":993,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteprivatefile(request",{"_index":1716,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteprivatefile(userid",{"_index":1829,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteproductcommand",{"_index":836,"title":{"classes/DeleteProductCommand.html":{}},"body":{"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["deleteproductcommand(id",{"_index":1504,"title":{},"body":{"injectables/ProductsService.html":{}}}],["deleteproducthandler",{"_index":841,"title":{"classes/DeleteProductHandler.html":{}},"body":{"classes/DeleteProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["deletepublicfile",{"_index":984,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfile(fileid",{"_index":999,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteresponse",{"_index":465,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/PostsService.html":{}}}],["deleteresponse.affected",{"_index":467,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/PostsService.html":{}}}],["dependencies",{"_index":75,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":996,"title":{},"body":{"injectables/FilesService.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":1232,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["development",{"_index":2038,"title":{},"body":{"index.html":{}}}],["directly",{"_index":1674,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["disable",{"_index":2033,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1141,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1119,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskstorage",{"_index":1224,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["disposition",{"_index":759,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":1601,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["documentation",{"_index":1896,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":407,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["dto/file",{"_index":1750,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/get",{"_index":524,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["dto/local",{"_index":1257,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["dto/login.dto",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/two",{"_index":1544,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/update",{"_index":409,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{}}}],["e2e",{"_index":2045,"title":{},"body":{"index.html":{}}}],["each",{"_index":634,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["eager",{"_index":1640,"title":{},"body":{"entities/User.html":{}}}],["email",{"_index":288,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["enableimplicitconversion",{"_index":904,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["endpoints",{"_index":2025,"title":{},"body":{"index.html":{}}}],["engine",{"_index":362,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/category.entity",{"_index":431,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["entities/comment.entity",{"_index":529,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["entities/database",{"_index":768,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{}}}],["entities/local",{"_index":1244,"title":{},"body":{"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{}}}],["entities/log.entity",{"_index":1291,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LogsService.html":{}}}],["entities/post.entity",{"_index":1406,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/private",{"_index":978,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["entities/product.entity",{"_index":660,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{}}}],["entities/public",{"_index":980,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["entities/user.entity",{"_index":956,"title":{},"body":{"classes/FileResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":895,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["enumerations",{"_index":1962,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":2030,"title":{},"body":{"index.html":{}}}],["env.validation",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["environmentvariables",{"_index":857,"title":{"classes/EnvironmentVariables.html":{}},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{}}}],["error",{"_index":308,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["error(errors.tostring",{"_index":910,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["error(message",{"_index":697,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error?.code",{"_index":319,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["errors",{"_index":905,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["errors.length",{"_index":908,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["example",{"_index":1514,"title":{},"body":{"classes/RegisterDto.html":{},"index.html":{}}}],["examples",{"_index":2018,"title":{},"body":{"index.html":{}}}],["exceed",{"_index":1143,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":918,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exceptions/category",{"_index":452,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exceptions/file",{"_index":847,"title":{},"body":{"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/UpdateProductHandler.html":{}}}],["exceptions/post",{"_index":1422,"title":{},"body":{"injectables/PostsService.html":{}}}],["exceptions/user",{"_index":1855,"title":{},"body":{"injectables/UsersService.html":{}}}],["exceptionsloggerfilter",{"_index":149,"title":{"classes/ExceptionsLoggerFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":1666,"title":{},"body":{"entities/User.html":{}}}],["excludenullinterceptor",{"_index":150,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["execute",{"_index":600,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["execute(command",{"_index":604,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["execute(undefined",{"_index":1047,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["executioncontext",{"_index":926,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["exist",{"_index":997,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["exist.'})@apiunauthorizedresponse({description",{"_index":1722,"title":{},"body":{"controllers/UsersController.html":{}}}],["exists",{"_index":324,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{}}}],["expandvariables",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["expiresin",{"_index":272,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":35,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":252,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":751,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"classes/FileUploadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LogsMiddleware.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":959,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/UsersController.html":{}}}],["express/multer/interfaces/multer",{"_index":1222,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["expression",{"_index":1513,"title":{},"body":{"classes/RegisterDto.html":{}}}],["extends",{"_index":486,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{}}}],["extractjwt",{"_index":1165,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":1170,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":265,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"index.html":{}}}],["factor.guard",{"_index":1387,"title":{},"body":{"controllers/PostsController.html":{}}}],["factor.guard.ts",{"_index":1187,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":263,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["factor.strategy.ts",{"_index":1188,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:13",{"_index":1189,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:28",{"_index":1190,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor/dto/two",{"_index":1524,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["factor/jwt",{"_index":262,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["factor/two",{"_index":264,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["false",{"_index":296,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/EnvironmentVariables.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":2012,"title":{},"body":{"index.html":{}}}],["features/categories/categories.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["features/comments/comments.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["features/database",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["features/files/files.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["features/local",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["features/posts/posts.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["features/products/products.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["features/users/entities/user.entity",{"_index":1269,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["features/users/users.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["features/users/users.service",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["fetch",{"_index":1730,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetched",{"_index":1725,"title":{},"body":{"controllers/UsersController.html":{}}}],["field",{"_index":1675,"title":{},"body":{"entities/User.html":{}}}],["fieldname",{"_index":1215,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["file.buffer",{"_index":1772,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.dto",{"_index":1258,"title":{},"body":{"injectables/LocalFilesService.html":{},"injectables/UsersService.html":{}}}],["file.dto.ts",{"_index":1202,"title":{},"body":{"interfaces/LocalFileDto.html":{},"coverage.html":{}}}],["file.entity",{"_index":769,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["file.entity.ts",{"_index":726,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"coverage.html":{}}}],["file.entity.ts:10",{"_index":1439,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:12",{"_index":1199,"title":{},"body":{"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.entity.ts:13",{"_index":1441,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:14",{"_index":732,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["file.entity.ts:15",{"_index":1198,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:6",{"_index":734,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.entity.ts:7",{"_index":1438,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:9",{"_index":733,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.info.owner.id",{"_index":1887,"title":{},"body":{"injectables/UsersService.html":{}}}],["file.key",{"_index":1037,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.mimetype",{"_index":1212,"title":{},"body":{"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["file.mimetype.includes('image",{"_index":1779,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.originalname",{"_index":1773,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.owner",{"_index":1039,"title":{},"body":{"injectables/FilesService.html":{},"entities/User.html":{}}}],["file.owner.id",{"_index":1040,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.path",{"_index":1211,"title":{},"body":{"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["file.stream.pipe(response",{"_index":1767,"title":{},"body":{"controllers/UsersController.html":{}}}],["filedata",{"_index":1256,"title":{},"body":{"injectables/LocalFilesService.html":{},"injectables/UsersService.html":{}}}],["filefilter",{"_index":1216,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["fileid",{"_index":782,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"injectables/LocalFilesService.html":{},"classes/ProductNotFoundException.html":{},"injectables/UsersService.html":{}}}],["fileinfo",{"_index":1019,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinfo.key",{"_index":1024,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":1219,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["filename",{"_index":728,"title":{},"body":{"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["filename=\"${file.filename",{"_index":761,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["filenotfoundexception",{"_index":943,"title":{"classes/FileNotFoundException.html":{}},"body":{"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filenotfoundexception(fileid",{"_index":1026,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["fileresponsedto",{"_index":947,"title":{"classes/FileResponseDto.html":{}},"body":{"classes/FileResponseDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["fileresponsedto})@apinotfoundresponse({description",{"_index":1739,"title":{},"body":{"controllers/UsersController.html":{}}}],["files",{"_index":738,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"classes/FileUploadMultipleDto.html":{},"controllers/LocalFilesController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["files.controller",{"_index":770,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"modules/LocalFilesModule.html":{}}}],["files.controller.ts",{"_index":736,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"coverage.html":{}}}],["files.controller.ts:21",{"_index":742,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["files.controller.ts:22",{"_index":1204,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["files.interceptor",{"_index":1754,"title":{},"body":{"controllers/UsersController.html":{}}}],["files.interceptor.ts",{"_index":1214,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["files.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["files.module.ts",{"_index":767,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"modules/LocalFilesModule.html":{}}}],["files.service",{"_index":748,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"injectables/UsersService.html":{}}}],["files.service.ts",{"_index":772,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{}}}],["files.service.ts:13",{"_index":787,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:14",{"_index":1255,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:20",{"_index":1253,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:26",{"_index":781,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:32",{"_index":1252,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:36",{"_index":784,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:7",{"_index":777,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:8",{"_index":1249,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files/database",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["files/dto/local",{"_index":1201,"title":{},"body":{"interfaces/LocalFileDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["files/entities/database",{"_index":725,"title":{},"body":{"entities/DatabaseFile.html":{},"coverage.html":{}}}],["files/entities/local",{"_index":1196,"title":{},"body":{"entities/LocalFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["files/entities/private",{"_index":1668,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{}}}],["files/entities/public",{"_index":1753,"title":{},"body":{"controllers/UsersController.html":{}}}],["files/exceptions/file",{"_index":1853,"title":{},"body":{"injectables/UsersService.html":{}}}],["files/files.module",{"_index":1800,"title":{},"body":{"modules/UsersModule.html":{}}}],["files/files.service",{"_index":1854,"title":{},"body":{"injectables/UsersService.html":{}}}],["files/local",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filesdestination",{"_index":1230,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filesdestination}${options.path",{"_index":1233,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filesize",{"_index":1782,"title":{},"body":{"controllers/UsersController.html":{}}}],["filesmodule",{"_index":83,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":975,"title":{"injectables/FilesService.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["fileuploaddto",{"_index":957,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["fileuploaddto})@apicreatedresponse({description",{"_index":1694,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileuploadmultipledto",{"_index":965,"title":{"classes/FileUploadMultipleDto.html":{}},"body":{"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["finally",{"_index":1882,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":370,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["findall(ownerid",{"_index":1489,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findall(undefined",{"_index":1456,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findallproductshandler",{"_index":1042,"title":{"classes/FindAllProductsHandler.html":{}},"body":{"classes/FindAllProductsHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["findallproductsquery",{"_index":1048,"title":{"classes/FindAllProductsQuery.html":{}},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["findallproductsquery(ownerid",{"_index":1501,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findallwithdeleted",{"_index":371,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["findmanyoptions",{"_index":1056,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["findmanyoptions['where",{"_index":1060,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["findone",{"_index":372,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["findone(@param",{"_index":417,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["findone(@param('email",{"_index":1763,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@param('id",{"_index":1469,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findone(email",{"_index":1727,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":442,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findone(undefined",{"_index":384,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["findoneparams",{"_index":385,"title":{"classes/FindOneParams.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["findproducthandler",{"_index":1078,"title":{"classes/FindProductHandler.html":{}},"body":{"classes/FindProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["findproductquery",{"_index":1080,"title":{"classes/FindProductQuery.html":{}},"body":{"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["findproductquery(id",{"_index":1502,"title":{},"body":{"injectables/ProductsService.html":{}}}],["focus",{"_index":1996,"title":{},"body":{"index.html":{}}}],["format",{"_index":961,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{}}}],["found",{"_index":492,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":453,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{},"injectables/UsersService.html":{}}}],["found.exception.ts",{"_index":485,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:3",{"_index":489,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["framework",{"_index":1981,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1205,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["fuel",{"_index":364,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["function",{"_index":899,"title":{},"body":{"classes/EnvironmentVariables.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{}}}],["functions",{"_index":1969,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatepresignedurl",{"_index":985,"title":{},"body":{"injectables/FilesService.html":{}}}],["generatepresignedurl(key",{"_index":1001,"title":{},"body":{"injectables/FilesService.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":1564,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":1568,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["get('/with",{"_index":381,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["get(':email",{"_index":1762,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':email')@apiparam({name",{"_index":1728,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":386,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["get('files",{"_index":1758,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files')@apiokresponse({description",{"_index":1734,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id",{"_index":1764,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id')@apiparam({name",{"_index":1738,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('paragraphs/:paragraph",{"_index":1379,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('refresh",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@apiokresponse({description",{"_index":1724,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@healthcheck",{"_index":1117,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(key",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallposts",{"_index":1365,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallprivatefiles",{"_index":1690,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getallprivatefiles(@req",{"_index":1760,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(request",{"_index":1733,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(userid",{"_index":1831,"title":{},"body":{"injectables/UsersService.html":{}}}],["getallusers",{"_index":1805,"title":{},"body":{"injectables/UsersService.html":{}}}],["getauthenticateduser",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":1806,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":1834,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":1807,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":1836,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcomments",{"_index":510,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["getcomments(postid",{"_index":559,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getcomments(undefined",{"_index":514,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcommentsdto",{"_index":515,"title":{"classes/GetCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["getcommentshandler",{"_index":549,"title":{"classes/GetCommentsHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["getcommentsquery",{"_index":566,"title":{"classes/GetCommentsQuery.html":{}},"body":{"injectables/CommentsService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["getcommentsquery(postid",{"_index":570,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getcookiesforlogout",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":290,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":297,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getdatabasefilebyid",{"_index":739,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["getdatabasefilebyid(id",{"_index":740,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["getfilebyid",{"_index":774,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{}}}],["getfilebyid(fileid",{"_index":783,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{}}}],["gethello",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["getloglevels",{"_index":708,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(environment",{"_index":715,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["getloglevels(isproduction",{"_index":1974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getobject",{"_index":1021,"title":{},"body":{"injectables/FilesService.html":{}}}],["getormconfig",{"_index":1588,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["getormconfig(configservice",{"_index":1589,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["getpaginationprops",{"_index":1053,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getpaginationprops(paginationdto",{"_index":1059,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["getpostbyid",{"_index":1366,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(@param",{"_index":1394,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":1417,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid(undefined",{"_index":1376,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithparagraph",{"_index":1367,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostswithparagraph(@param",{"_index":1396,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithparagraph(paragraph",{"_index":1378,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getprivatefile",{"_index":986,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getprivatefile(fileid",{"_index":1005,"title":{},"body":{"injectables/FilesService.html":{}}}],["getprivatefile(request",{"_index":1737,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprivatefile(userid",{"_index":1838,"title":{},"body":{"injectables/UsersService.html":{}}}],["getproductdto",{"_index":1111,"title":{"classes/GetProductDto.html":{}},"body":{"classes/GetProductDto.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["getting",{"_index":1978,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":1808,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":1840,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":1721,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":2053,"title":{},"body":{"modules.html":{}}}],["handle",{"_index":940,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["hash",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":301,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["health",{"_index":1115,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":1152,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1120,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1121,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1113,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":84,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heap",{"_index":1134,"title":{},"body":{"controllers/HealthController.html":{}}}],["host",{"_index":915,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"classes/TypeOrmConfig.html":{}}}],["httpcode",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('login')@apibody({type",{"_index":168,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(204",{"_index":1472,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpexception",{"_index":303,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":304,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":325,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":329,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":1865,"title":{},"body":{"injectables/UsersService.html":{}}}],["icommandhandler",{"_index":599,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["id",{"_index":12,"title":{},"body":{"entities/Address.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"classes/ObjectWithIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id.dto",{"_index":595,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["id.dto.ts",{"_index":1322,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["id.dto.ts:5",{"_index":1323,"title":{},"body":{"classes/ObjectWithIdDto.html":{}}}],["identifier",{"_index":1897,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":762,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/UsersController.html":{}}}],["image/png",{"_index":1552,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["imagebuffer",{"_index":1819,"title":{},"body":{"injectables/UsersService.html":{}}}],["implementations/create",{"_index":608,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{}}}],["implementations/delete",{"_index":848,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["implementations/find",{"_index":1051,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{}}}],["implementations/get",{"_index":1100,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["implementations/update",{"_index":1626,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["implements",{"_index":598,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LogsMiddleware.html":{},"classes/UpdateProductHandler.html":{}}}],["import",{"_index":31,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"classes/TypeOrmConfig.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('post_authorid_index",{"_index":1356,"title":{},"body":{"entities/Post.html":{}}}],["index('post_authorid_index')@manytoone(undefined",{"_index":1337,"title":{},"body":{"entities/Post.html":{}}}],["industry",{"_index":1986,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":1007,"title":{},"body":{"injectables/FilesService.html":{}}}],["inherited",{"_index":1093,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["inject",{"_index":267,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":274,"title":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":450,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{},"injectables/UsersService.html":{}}}],["injectrepository(category",{"_index":454,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(comment",{"_index":610,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["injectrepository(databasefile",{"_index":789,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["injectrepository(localfile",{"_index":1259,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["injectrepository(log",{"_index":1316,"title":{},"body":{"injectables/LogsService.html":{}}}],["injectrepository(post",{"_index":1423,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(privatefile",{"_index":1018,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(product",{"_index":663,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["injectrepository(publicfile",{"_index":1017,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(user",{"_index":1856,"title":{},"body":{"injectables/UsersService.html":{}}}],["inline",{"_index":760,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["installation",{"_index":2034,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2036,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":924,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(...args",{"_index":1238,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["intercept(context",{"_index":925,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interceptor",{"_index":1229,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["interface",{"_index":352,"title":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":354,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["internal",{"_index":1016,"title":{},"body":{"injectables/FilesService.html":{}}}],["internalservererrorexception",{"_index":1852,"title":{},"body":{"injectables/UsersService.html":{}}}],["iqueryhandler",{"_index":1045,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["isboolean",{"_index":891,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isboolean()@isnotempty",{"_index":872,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isboolean()@isoptional",{"_index":887,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["iscodevalid",{"_index":1554,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["iscreatinglogs",{"_index":1320,"title":{},"body":{"injectables/LogsService.html":{}}}],["isemail",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isemail()@apiproperty({default",{"_index":1281,"title":{},"body":{"classes/LogInDto.html":{}}}],["isenum",{"_index":892,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isenum(environment",{"_index":898,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isenum(environment)@isnotempty",{"_index":874,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isglobal",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["islogging",{"_index":1604,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["isnotempty",{"_index":578,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EnvironmentVariables.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber",{"_index":893,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber()@isnotempty",{"_index":880,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isnumber()@isoptional",{"_index":883,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumberstring",{"_index":1076,"title":{},"body":{"classes/FindOneParams.html":{}}}],["isoptional",{"_index":633,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isoptional()@isstring()@isnotempty()@matches(/^\\+[1",{"_index":676,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1092,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{}}}],["ispasswordmatching",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isproduction",{"_index":1975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isrefreshtokenmatching",{"_index":1860,"title":{},"body":{"injectables/UsersService.html":{}}}],["issecondfactorauthenticated",{"_index":291,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{}}}],["isstring",{"_index":577,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":575,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EnvironmentVariables.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1612,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7)@apiproperty({default",{"_index":1284,"title":{},"body":{"classes/LogInDto.html":{}}}],["isstring({each",{"_index":629,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":1565,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":1570,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":1638,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["items",{"_index":969,"title":{},"body":{"classes/FileUploadMultipleDto.html":{}}}],["john",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":1206,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["joincolumn",{"_index":1665,"title":{},"body":{"entities/User.html":{}}}],["joincolumn({name",{"_index":1644,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":1354,"title":{},"body":{"entities/Post.html":{}}}],["json.stringify(parameters",{"_index":832,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["jsonb",{"_index":1448,"title":{},"body":{"entities/Product.html":{}}}],["jwt",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.accesstokenexpirationtime",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt.config.ts",{"_index":2003,"title":{},"body":{"index.html":{}}}],["jwt.refreshtokenexpirationtime",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt.strategy",{"_index":259,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwt_access_token_expiration_time",{"_index":867,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_expiration_time",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":868,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwtauthenticationguard",{"_index":197,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtfromrequest",{"_index":1169,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":253,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":266,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":200,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":245,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":246,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1185,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{},"index.html":{}}}],["jwttwofactorstrategy",{"_index":247,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":950,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"miscellaneous/variables.html":{}}}],["level",{"_index":618,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{}}}],["levels",{"_index":710,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["levels.ts",{"_index":1917,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":2060,"title":{},"body":{"properties.html":{}}}],["licensed",{"_index":2049,"title":{},"body":{"index.html":{}}}],["limit",{"_index":536,"title":{},"body":{"controllers/CommentsController.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetProductDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"controllers/ProductsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["limits",{"_index":1217,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["literal",{"_index":363,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["load",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/EnvironmentVariables.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["local.strategy",{"_index":260,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthenticationguard",{"_index":202,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localfile",{"_index":1194,"title":{"entities/LocalFile.html":{}},"body":{"entities/LocalFile.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["localfiledto",{"_index":1200,"title":{"interfaces/LocalFileDto.html":{}},"body":{"interfaces/LocalFileDto.html":{},"injectables/LocalFilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["localfilescontroller",{"_index":1203,"title":{"controllers/LocalFilesController.html":{}},"body":{"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"coverage.html":{}}}],["localfilesinterceptor",{"_index":1228,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["localfilesinterceptor(options",{"_index":1977,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localfilesinterceptoroptions",{"_index":1213,"title":{"interfaces/LocalFilesInterceptorOptions.html":{}},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["localfilesmodule",{"_index":85,"title":{"modules/LocalFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LocalFilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["localfilesrepository",{"_index":1250,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["localfilesservice",{"_index":1207,"title":{"injectables/LocalFilesService.html":{}},"body":{"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy",{"_index":248,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":688,"title":{"entities/Log.html":{}},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log(level",{"_index":807,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["log(message",{"_index":700,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":1315,"title":{},"body":{"injectables/LogsService.html":{}}}],["log.dto.ts",{"_index":616,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:11",{"_index":621,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:5",{"_index":620,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:8",{"_index":622,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["logged",{"_index":1708,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger",{"_index":798,"title":{},"body":{"classes/DatabaseLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"classes/TypeOrmConfig.html":{},"index.html":{}}}],["logger('http",{"_index":1297,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["logger.filter.ts",{"_index":912,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["logger.filter.ts:6",{"_index":917,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["logger.service",{"_index":707,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":685,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["logger.ts:16",{"_index":814,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:27",{"_index":701,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:32",{"_index":816,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:37",{"_index":699,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:47",{"_index":705,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:48",{"_index":810,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:5",{"_index":806,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:52",{"_index":819,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:56",{"_index":808,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:57",{"_index":696,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:67",{"_index":703,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:7",{"_index":812,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:75",{"_index":821,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:9",{"_index":694,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger/logger.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":86,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":1609,"title":{},"body":{"classes/TypeOrmConfig.html":{},"index.html":{}}}],["login",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":167,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":169,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["loglevel",{"_index":1976,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loglevels",{"_index":714,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":799,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logmigration(message",{"_index":809,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logout",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":172,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logquery",{"_index":800,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logquery(query",{"_index":811,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror",{"_index":801,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror(error",{"_index":813,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow",{"_index":802,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow(time",{"_index":815,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logs.service",{"_index":711,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{}}}],["logschemabuild",{"_index":803,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logschemabuild(message",{"_index":818,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logsmiddleware",{"_index":136,"title":{"injectables/LogsMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["logsrepository",{"_index":1312,"title":{},"body":{"injectables/LogsService.html":{}}}],["logsservice",{"_index":687,"title":{"injectables/LogsService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["maintaining",{"_index":1985,"title":{},"body":{"index.html":{}}}],["manytomany",{"_index":482,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytomany(undefined",{"_index":478,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytoone",{"_index":504,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["manytoone(undefined",{"_index":497,"title":{},"body":{"entities/Comment.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["map",{"_index":933,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["match",{"_index":1511,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches",{"_index":680,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":682,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":38,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.pow(1024",{"_index":1783,"title":{},"body":{"controllers/UsersController.html":{}}}],["max",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["mb",{"_index":1785,"title":{},"body":{"controllers/UsersController.html":{}}}],["memory",{"_index":1132,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1122,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":619,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{}}}],["metadata",{"_index":1951,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1301,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["methods",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["mimetype",{"_index":1197,"title":{},"body":{"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/UsersController.html":{}}}],["min",{"_index":1334,"title":{},"body":{"classes/PaginationDto.html":{}}}],["min(1",{"_index":1335,"title":{},"body":{"classes/PaginationDto.html":{}}}],["minlength",{"_index":679,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":681,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":1961,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2048,"title":{},"body":{"index.html":{}}}],["mixin",{"_index":1218,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["mixin(interceptor",{"_index":1240,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["mockedconfigservice",{"_index":1920,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":1922,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockeduser",{"_index":1907,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["module",{"_index":72,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":74,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1130,"title":{},"body":{"controllers/HealthController.html":{}}}],["multer",{"_index":1225,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions",{"_index":1221,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions['filefilter",{"_index":1226,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions['limits",{"_index":1227,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multiple.dto.ts",{"_index":967,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["multiple.dto.ts:5",{"_index":971,"title":{},"body":{"classes/FileUploadMultipleDto.html":{}}}],["name",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":1676,"title":{},"body":{"entities/User.html":{}}}],["need",{"_index":2026,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1980,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":931,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["nestjs/common",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductHandler.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/services/console",{"_index":706,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseFilesModule.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":544,"title":{},"body":{"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":254,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1622,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":256,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1220,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/LogInDto.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1124,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":430,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductHandler.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProductsModule.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestlogger",{"_index":822,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestlogger('sql",{"_index":805,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestmiddleware",{"_index":1299,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["new",{"_index":322,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newcomment",{"_index":611,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["newfile",{"_index":790,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{},"injectables/LocalFilesService.html":{}}}],["newlog",{"_index":1317,"title":{},"body":{"injectables/LogsService.html":{}}}],["newpost",{"_index":1431,"title":{},"body":{"injectables/PostsService.html":{}}}],["newproduct",{"_index":664,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["newuser",{"_index":1866,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":927,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/LogsMiddleware.html":{}}}],["nextfunction",{"_index":1295,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["notfoundexception",{"_index":487,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/DatabaseFilesService.html":{},"classes/FileNotFoundException.html":{},"injectables/LocalFilesService.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["notfoundexception('post",{"_index":1430,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":2035,"title":{},"body":{"index.html":{}}}],["null",{"_index":938,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["null.interceptor.ts",{"_index":923,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["null.interceptor.ts:13",{"_index":929,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nullable",{"_index":1349,"title":{},"body":{"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":24,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"interfaces/CarProperties.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"injectables/CommentsService.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/EnvironmentVariables.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UsersService.html":{}}}],["number(id",{"_index":1766,"title":{},"body":{"controllers/UsersController.html":{}}}],["number(paginationdto.limit",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(paginationdto.page",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numberofcylinders",{"_index":365,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["object",{"_index":1004,"title":{},"body":{"injectables/FilesService.html":{},"miscellaneous/variables.html":{}}}],["object.keys(paginationdto).length",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectwithiddto",{"_index":589,"title":{"classes/ObjectWithIdDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["observable",{"_index":930,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["off')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1539,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["oldproduct",{"_index":850,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["oldproduct.owner",{"_index":852,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["oldproduct.owner.id",{"_index":853,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["on')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1542,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["one",{"_index":403,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["onetomany",{"_index":1355,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1343,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetoone",{"_index":32,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":28,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["open",{"_index":2016,"title":{},"body":{"index.html":{}}}],["optional",{"_index":14,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":692,"title":{},"body":{"injectables/CustomLogger.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/functions.html":{}}}],["options.fieldname",{"_index":1237,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.filefilter",{"_index":1234,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.interface",{"_index":1223,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.limits",{"_index":1235,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["originalurl",{"_index":1302,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["otpauthurl",{"_index":1549,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":1575,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1997,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":638,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{}}}],["owner.files",{"_index":1440,"title":{},"body":{"entities/PrivateFile.html":{}}}],["owner.id",{"_index":854,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["owner.products",{"_index":1446,"title":{},"body":{"entities/Product.html":{}}}],["ownerid",{"_index":994,"title":{},"body":{"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["package",{"_index":1927,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":534,"title":{},"body":{"controllers/CommentsController.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetProductDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"controllers/ProductsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paginatedresultdto",{"_index":526,"title":{"classes/PaginatedResultDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/PaginatedResultDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["pagination",{"_index":1054,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paginationdto",{"_index":560,"title":{"classes/PaginationDto.html":{}},"body":{"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginationdto:15",{"_index":1094,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["paginationdto:9",{"_index":1095,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["paragraph",{"_index":1381,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["paragraphs",{"_index":626,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["param",{"_index":399,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":754,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/ProductsController.html":{}}}],["parameters",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params.dto",{"_index":404,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["params.dto.ts",{"_index":1075,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["params.dto.ts:5",{"_index":1077,"title":{},"body":{"classes/FindOneParams.html":{}}}],["parseintpipe",{"_index":743,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["parser",{"_index":1941,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1621,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":1624,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":1633,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":1167,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":255,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":1164,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1182,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1174,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["passthrough",{"_index":755,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["password",{"_index":317,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":398,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["patch(':id",{"_index":396,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["patch(':id')@useguards(jwttwofactorguard",{"_index":1384,"title":{},"body":{"controllers/PostsController.html":{}}}],["path",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/HealthController.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.interface",{"_index":311,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.interface.ts",{"_index":1522,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["payload.issecondfactorauthenticated",{"_index":1191,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":1177,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["pg",{"_index":1947,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["pipe(map((value",{"_index":941,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipeqrcodestream",{"_index":1566,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":1572,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["plaintextpassword",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["plaintoclass",{"_index":890,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["plaintoclass(environmentvariables",{"_index":903,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["port",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariables.html":{},"classes/TypeOrmConfig.html":{}}}],["post",{"_index":185,"title":{"entities/Post.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post(':id/restore",{"_index":392,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["post('authenticate",{"_index":1560,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('authenticate')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1532,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('avatar",{"_index":1776,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@apiconsumes('multipart/form",{"_index":1692,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/amazons3",{"_index":1768,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/amazons3')@apiconsumes('multipart/form",{"_index":1701,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/postgres",{"_index":1774,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/postgres')@apiconsumes('multipart/form",{"_index":1704,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('files",{"_index":1787,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('files')@apiconsumes('multipart/form",{"_index":1707,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('generate",{"_index":1547,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('generate')@useguards(jwtauthenticationguard",{"_index":1535,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('login",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('logout",{"_index":235,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('turn",{"_index":1538,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post()@useguards(jwttwofactorguard",{"_index":1370,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.author",{"_index":1660,"title":{},"body":{"entities/User.html":{}}}],["post.categories",{"_index":479,"title":{},"body":{"entities/Category.html":{}}}],["post.comments",{"_index":502,"title":{},"body":{"entities/Comment.html":{}}}],["post.dto",{"_index":1388,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":625,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":1615,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:13",{"_index":631,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":1617,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:5",{"_index":628,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:6",{"_index":1616,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:9",{"_index":632,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postgres",{"_index":1594,"title":{},"body":{"classes/TypeOrmConfig.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["postgreserrorcode",{"_index":306,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":320,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["postgresql",{"_index":2019,"title":{},"body":{"index.html":{}}}],["postid",{"_index":533,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["postnotfoundexception",{"_index":1358,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1426,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":459,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":1407,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1390,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/entities/post.entity",{"_index":481,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/User.html":{}}}],["postscontroller",{"_index":1361,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":87,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1412,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":1389,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practices",{"_index":1989,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":25,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1443,"title":{},"body":{"entities/Product.html":{}}}],["private",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["privatefile",{"_index":977,"title":{"entities/PrivateFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/PrivateFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["privatefilesrepository",{"_index":990,"title":{},"body":{"injectables/FilesService.html":{}}}],["privatefile})@apiunauthorizedresponse({description",{"_index":1709,"title":{},"body":{"controllers/UsersController.html":{}}}],["process",{"_index":1128,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.typeorm_logging",{"_index":1610,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["process.env.typeorm_synchronize",{"_index":1608,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["product",{"_index":639,"title":{"entities/Product.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["product.command",{"_index":661,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{}}}],["product.command.ts",{"_index":637,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{},"coverage.html":{}}}],["product.command.ts:3",{"_index":839,"title":{},"body":{"classes/DeleteProductCommand.html":{}}}],["product.command.ts:4",{"_index":642,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:6",{"_index":644,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:7",{"_index":643,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:8",{"_index":1619,"title":{},"body":{"classes/UpdateProductCommand.html":{}}}],["product.dto",{"_index":645,"title":{},"body":{"classes/CreateProductCommand.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":647,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":649,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:8",{"_index":648,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductDto.html":{}}}],["product.handler",{"_index":1479,"title":{},"body":{"modules/ProductsModule.html":{}}}],["product.handler.ts",{"_index":655,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["product.handler.ts:10",{"_index":657,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["product.handler.ts:12",{"_index":843,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["product.handler.ts:15",{"_index":659,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["product.handler.ts:17",{"_index":844,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["product.handler.ts:8",{"_index":1079,"title":{},"body":{"classes/FindProductHandler.html":{}}}],["product.owner",{"_index":1662,"title":{},"body":{"entities/User.html":{}}}],["product.query",{"_index":1081,"title":{},"body":{"classes/FindProductHandler.html":{},"injectables/ProductsService.html":{}}}],["product.query.ts",{"_index":1084,"title":{},"body":{"classes/FindProductQuery.html":{},"coverage.html":{}}}],["product.query.ts:1",{"_index":1086,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["product.query.ts:2",{"_index":1087,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["productid",{"_index":1083,"title":{},"body":{"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{}}}],["production",{"_index":716,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["productnotfoundexception",{"_index":846,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/DeleteProductHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["productnotfoundexception(id",{"_index":856,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["products",{"_index":1062,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"controllers/ProductsController.html":{},"entities/User.html":{}}}],["products.controller",{"_index":1478,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.handler",{"_index":1481,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.handler.ts",{"_index":1044,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"coverage.html":{}}}],["products.handler.ts:12",{"_index":1046,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["products.handler.ts:17",{"_index":1049,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["products.query",{"_index":1052,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"injectables/ProductsService.html":{}}}],["products.query.ts",{"_index":1069,"title":{},"body":{"classes/FindAllProductsQuery.html":{},"coverage.html":{}}}],["products.query.ts:3",{"_index":1071,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.query.ts:5",{"_index":1072,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.query.ts:6",{"_index":1073,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.service",{"_index":1464,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/entities/product.entity",{"_index":1669,"title":{},"body":{"entities/User.html":{}}}],["productscontroller",{"_index":1452,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productscount",{"_index":1063,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["productsmodule",{"_index":88,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsrepository",{"_index":658,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["productsservice",{"_index":1463,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["promise",{"_index":517,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"miscellaneous/variables.html":{}}}],["promise.all",{"_index":1889,"title":{},"body":{"injectables/UsersService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"properties.html":{}}}],["properties.interface",{"_index":651,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["properties.interface.ts",{"_index":356,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"coverage.html":{}}}],["props",{"_index":1055,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["props.ts",{"_index":1918,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":9,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"entities/DatabaseFile.html":{},"classes/DeleteProductCommand.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsQuery.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"index.html":{}}}],["publicationyear",{"_index":358,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["publicfile",{"_index":979,"title":{"entities/PublicFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["publicfilesrepository",{"_index":992,"title":{},"body":{"injectables/FilesService.html":{}}}],["publicfile})@apiunauthorizedresponse({description",{"_index":1697,"title":{},"body":{"controllers/UsersController.html":{}}}],["publicly",{"_index":1673,"title":{},"body":{"entities/User.html":{}}}],["qrcode",{"_index":1577,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["queries/handlers/find",{"_index":1480,"title":{},"body":{"modules/ProductsModule.html":{}}}],["queries/handlers/get",{"_index":550,"title":{},"body":{"modules/CommentsModule.html":{}}}],["queries/implementations/find",{"_index":1497,"title":{},"body":{"injectables/ProductsService.html":{}}}],["queries/implementations/get",{"_index":567,"title":{},"body":{"injectables/CommentsService.html":{}}}],["query",{"_index":518,"title":{},"body":{"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"controllers/ProductsController.html":{}}}],["querybus",{"_index":556,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["queryhandler",{"_index":1050,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["queryhandler(findallproductsquery",{"_index":1057,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["queryhandler(findproductquery",{"_index":1082,"title":{},"body":{"classes/FindProductHandler.html":{}}}],["queryhandler(getcommentsquery",{"_index":1101,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryrunner",{"_index":780,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"injectables/LocalFilesService.html":{},"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":1880,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.connect",{"_index":1871,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.create(databasefile",{"_index":791,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner.manager.delete",{"_index":793,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner.manager.delete(localfile",{"_index":1263,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["queryrunner.manager.findone(user",{"_index":1873,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.save(databasefile",{"_index":792,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner.manager.update(user",{"_index":1877,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.release",{"_index":1883,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1881,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.starttransaction",{"_index":1872,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner?.data?.iscreatinglogs",{"_index":823,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["readable",{"_index":749,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["readable.from(file.data",{"_index":757,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["readonly",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsQuery.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsMiddleware.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":901,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["recursively",{"_index":936,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["recursivelystripnullvalues",{"_index":935,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":942,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":1950,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":175,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":201,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":1157,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["register(@body",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(@res",{"_index":1548,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(registrationdata",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(response",{"_index":1534,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registeras",{"_index":1591,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["registeras('typeorm",{"_index":1607,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["registerdto",{"_index":179,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["regular",{"_index":1512,"title":{},"body":{"classes/RegisterDto.html":{}}}],["relations",{"_index":458,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":373,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(@param",{"_index":421,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["remove(@param('id",{"_index":1473,"title":{},"body":{"controllers/ProductsController.html":{}}}],["remove(id",{"_index":444,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(undefined",{"_index":388,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["removerefreshtoken",{"_index":1809,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":1842,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":435,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request.cookies?.refresh",{"_index":1175,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.res.setheader",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user.id",{"_index":1562,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request?.cookies?.authentication",{"_index":1183,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":1171,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":163,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["required",{"_index":1718,"title":{},"body":{"controllers/UsersController.html":{}}}],["res",{"_index":744,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":741,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsMiddleware.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["response.dto",{"_index":1752,"title":{},"body":{"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":949,"title":{},"body":{"classes/FileResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:12",{"_index":953,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:14",{"_index":954,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:6",{"_index":955,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:9",{"_index":952,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.on('finish",{"_index":1300,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["response.set",{"_index":758,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["response.setheader('content",{"_index":1551,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["restoredeleted",{"_index":374,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["restoredeleted(@param",{"_index":423,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["restoredeleted(id",{"_index":446,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["restoredeleted(undefined",{"_index":391,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["restoreresponse",{"_index":468,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["restoreresponse.affected",{"_index":470,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["result.dto",{"_index":528,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["result.dto.ts",{"_index":1325,"title":{},"body":{"classes/PaginatedResultDto.html":{},"coverage.html":{}}}],["result.dto.ts:11",{"_index":1328,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:14",{"_index":1330,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:5",{"_index":1327,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:8",{"_index":1329,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["results",{"_index":37,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1953,"title":{},"body":{"dependencies.html":{}}}],["rss",{"_index":1137,"title":{},"body":{"controllers/HealthController.html":{}}}],["run",{"_index":2039,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":932,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":934,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["s3",{"_index":1012,"title":{},"body":{"injectables/FilesService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["s3.getsignedurlpromise('getobject",{"_index":1027,"title":{},"body":{"injectables/FilesService.html":{}}}],["savelocalfiledata",{"_index":1247,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["savelocalfiledata(filedata",{"_index":1254,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["sdk",{"_index":1013,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["secret",{"_index":269,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["secretorkey",{"_index":1172,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["segment",{"_index":1999,"title":{},"body":{"index.html":{}}}],["select",{"_index":1428,"title":{},"body":{"injectables/PostsService.html":{}}}],["separated",{"_index":1998,"title":{},"body":{"index.html":{}}}],["serialization",{"_index":2009,"title":{},"body":{"index.html":{}}}],["set",{"_index":239,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setcurrentrefreshtoken",{"_index":1810,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":1844,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret",{"_index":1811,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret(secret",{"_index":1846,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":1984,"title":{},"body":{"index.html":{}}}],["sign",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":271,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["skip",{"_index":1065,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["skipmissingproperties",{"_index":907,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["skippeditems",{"_index":1058,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"miscellaneous/variables.html":{}}}],["soft",{"_index":2022,"title":{},"body":{"index.html":{}}}],["something",{"_index":326,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["space",{"_index":1146,"title":{},"body":{"controllers/HealthController.html":{}}}],["specific",{"_index":2024,"title":{},"body":{"index.html":{}}}],["specification",{"_index":2017,"title":{},"body":{"index.html":{}}}],["specify",{"_index":2032,"title":{},"body":{"index.html":{}}}],["src/.../config.service.ts",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.validation.ts",{"_index":1963,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":1971,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.service.ts",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../local",{"_index":1972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgres",{"_index":1964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../recursively",{"_index":1973,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.mock.ts",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:73",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:30",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:37",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:46",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:54",{"_index":170,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:78",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":250,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":284,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":299,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:41",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:54",{"_index":292,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:68",{"_index":298,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:83",{"_index":289,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:90",{"_index":302,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":1280,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:17",{"_index":1285,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:9",{"_index":1283,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":1506,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:13",{"_index":1507,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:17",{"_index":1508,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:22",{"_index":1509,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:32",{"_index":1516,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/jwt",{"_index":1153,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts",{"_index":1178,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts:10",{"_index":1179,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:25",{"_index":1181,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/local",{"_index":1192,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts",{"_index":1264,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts:15",{"_index":1268,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/local.strategy.ts:8",{"_index":1266,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/request",{"_index":1519,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/tests/user.mock.ts",{"_index":1905,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/token",{"_index":1521,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/two",{"_index":1186,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/config/typeorm.config.ts",{"_index":1586,"title":{},"body":{"classes/TypeOrmConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm.config.ts:9",{"_index":1590,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["src/database/database",{"_index":796,"title":{},"body":{"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":833,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgres",{"_index":1966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/env.validation.ts",{"_index":858,"title":{},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/env.validation.ts:22",{"_index":875,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:26",{"_index":873,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:30",{"_index":876,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:34",{"_index":886,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:38",{"_index":877,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:42",{"_index":881,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:46",{"_index":882,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:50",{"_index":879,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:54",{"_index":878,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:58",{"_index":889,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:62",{"_index":888,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:66",{"_index":884,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:70",{"_index":885,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/features/categories",{"_index":2023,"title":{},"body":{"index.html":{}}}],["src/features/categories/categories.controller.ts",{"_index":367,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/features/categories/categories.controller.ts:23",{"_index":378,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:28",{"_index":380,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:33",{"_index":383,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:38",{"_index":387,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:43",{"_index":397,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:48",{"_index":390,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:53",{"_index":393,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.module.ts",{"_index":427,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/features/categories/categories.service.ts",{"_index":433,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/features/categories/categories.service.ts:10",{"_index":436,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:16",{"_index":439,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:22",{"_index":440,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:28",{"_index":441,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:35",{"_index":443,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:48",{"_index":449,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:62",{"_index":445,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:69",{"_index":447,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/dto/create",{"_index":573,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/features/categories/dto/update",{"_index":1611,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/features/categories/entities/category.entity.ts",{"_index":471,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/features/categories/entities/category.entity.ts:13",{"_index":476,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:16",{"_index":477,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:19",{"_index":480,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:22",{"_index":475,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/exceptions/category",{"_index":484,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["src/features/comments",{"_index":2010,"title":{},"body":{"index.html":{}}}],["src/features/comments/commands/handlers/create",{"_index":596,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["src/features/comments/commands/implementations/create",{"_index":580,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["src/features/comments/comments.controller.ts",{"_index":507,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/features/comments/comments.controller.ts:27",{"_index":516,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/features/comments/comments.controller.ts:34",{"_index":513,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/features/comments/comments.module.ts",{"_index":542,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/features/comments/comments.service.ts",{"_index":553,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["src/features/comments/comments.service.ts:12",{"_index":557,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/comments.service.ts:15",{"_index":561,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/comments.service.ts:22",{"_index":558,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/dto/create",{"_index":586,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/features/comments/dto/get",{"_index":1088,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["src/features/comments/entities/comment.entity.ts",{"_index":494,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/features/comments/entities/comment.entity.ts:11",{"_index":500,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:14",{"_index":503,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:17",{"_index":499,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:8",{"_index":501,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/queries/handlers/get",{"_index":1096,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["src/features/comments/queries/implementations/get",{"_index":1105,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["src/features/database",{"_index":724,"title":{},"body":{"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"coverage.html":{},"index.html":{}}}],["src/features/files/entities/private",{"_index":1437,"title":{},"body":{"entities/PrivateFile.html":{},"coverage.html":{}}}],["src/features/files/entities/public",{"_index":1505,"title":{},"body":{"entities/PublicFile.html":{},"coverage.html":{}}}],["src/features/files/exceptions/file",{"_index":944,"title":{},"body":{"classes/FileNotFoundException.html":{},"coverage.html":{}}}],["src/features/files/files.module.ts",{"_index":976,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/features/files/files.service.ts",{"_index":982,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/features/files/files.service.ts:121",{"_index":1000,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:13",{"_index":991,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:139",{"_index":995,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:26",{"_index":1006,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:56",{"_index":1002,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:69",{"_index":1011,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:95",{"_index":1009,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/local",{"_index":1195,"title":{},"body":{"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/features/posts/dto/create",{"_index":624,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/features/posts/dto/update",{"_index":1614,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/features/posts/entities/post.entity.ts",{"_index":1336,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/features/posts/entities/post.entity.ts:18",{"_index":1347,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:21",{"_index":1351,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:24",{"_index":1346,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:27",{"_index":1350,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:30",{"_index":1342,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:34",{"_index":1338,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:38",{"_index":1340,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:41",{"_index":1345,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/exceptions/post",{"_index":1359,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/features/posts/posts.controller.ts",{"_index":1362,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/features/posts/posts.controller.ts:26",{"_index":1375,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:31",{"_index":1377,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:36",{"_index":1380,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:42",{"_index":1371,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:51",{"_index":1385,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:60",{"_index":1374,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.module.ts",{"_index":1405,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/features/posts/posts.service.ts",{"_index":1409,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/features/posts/posts.service.ts:11",{"_index":1411,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:16",{"_index":1416,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:22",{"_index":1418,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:35",{"_index":1419,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:46",{"_index":1413,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:55",{"_index":1421,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:69",{"_index":1415,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/products",{"_index":2015,"title":{},"body":{"index.html":{}}}],["src/features/products/commands/handlers/create",{"_index":654,"title":{},"body":{"classes/CreateProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/handlers/delete",{"_index":842,"title":{},"body":{"classes/DeleteProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/handlers/update",{"_index":1625,"title":{},"body":{"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/create",{"_index":636,"title":{},"body":{"classes/CreateProductCommand.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/delete",{"_index":837,"title":{},"body":{"classes/DeleteProductCommand.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/update",{"_index":1618,"title":{},"body":{"classes/UpdateProductCommand.html":{},"coverage.html":{}}}],["src/features/products/dto/create",{"_index":646,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/features/products/dto/get",{"_index":1112,"title":{},"body":{"classes/GetProductDto.html":{},"coverage.html":{}}}],["src/features/products/dto/update",{"_index":1620,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/features/products/entities/product.entity.ts",{"_index":1442,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/features/products/entities/product.entity.ts:12",{"_index":1445,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:18",{"_index":1449,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:21",{"_index":1447,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:9",{"_index":1444,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/exceptions/file",{"_index":1450,"title":{},"body":{"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/features/products/products.controller.ts",{"_index":1453,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/features/products/products.controller.ts:32",{"_index":1455,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:41",{"_index":1457,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:48",{"_index":1458,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:53",{"_index":1462,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:64",{"_index":1460,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.module.ts",{"_index":1477,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/features/products/products.service.ts",{"_index":1486,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/features/products/products.service.ts:16",{"_index":1487,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:19",{"_index":1488,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:28",{"_index":1490,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:37",{"_index":1491,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:41",{"_index":1493,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:47",{"_index":1492,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/queries/handlers/find",{"_index":1043,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"coverage.html":{}}}],["src/features/products/queries/implementations/find",{"_index":1068,"title":{},"body":{"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"coverage.html":{}}}],["src/features/products/types/book",{"_index":355,"title":{},"body":{"interfaces/BookProperties.html":{},"coverage.html":{}}}],["src/features/products/types/car",{"_index":360,"title":{},"body":{"interfaces/CarProperties.html":{},"coverage.html":{}}}],["src/features/users/dto/create",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/features/users/dto/file",{"_index":948,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["src/features/users/dto/update",{"_index":1631,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/features/users/entities/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/features/users/entities/address.entity.ts:10",{"_index":27,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:13",{"_index":22,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:16",{"_index":23,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:19",{"_index":30,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:7",{"_index":26,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/user.entity.ts",{"_index":1634,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/features/users/entities/user.entity.ts:19",{"_index":1653,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:22",{"_index":1651,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:25",{"_index":1656,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:28",{"_index":1659,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:35",{"_index":1643,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:39",{"_index":1658,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:43",{"_index":1649,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:46",{"_index":1661,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:67",{"_index":1646,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:71",{"_index":1647,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:74",{"_index":1652,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:77",{"_index":1663,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:81",{"_index":1664,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:84",{"_index":1655,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/exceptions/user",{"_index":1679,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/features/users/users.controller.ts",{"_index":1683,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["src/features/users/users.controller.ts:122",{"_index":1702,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:146",{"_index":1705,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:187",{"_index":1699,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:211",{"_index":1710,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:228",{"_index":1715,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:247",{"_index":1723,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:47",{"_index":1726,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:59",{"_index":1736,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:77",{"_index":1732,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:97",{"_index":1740,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.module.ts",{"_index":1798,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/features/users/users.service.ts",{"_index":1802,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/features/users/users.service.ts:104",{"_index":1826,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:111",{"_index":1822,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:129",{"_index":1820,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:174",{"_index":1817,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:181",{"_index":1828,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:21",{"_index":1814,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:211",{"_index":1839,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:219",{"_index":1832,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:240",{"_index":1824,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:244",{"_index":1830,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:30",{"_index":1845,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:37",{"_index":1841,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:48",{"_index":1843,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:54",{"_index":1847,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:60",{"_index":1851,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:66",{"_index":1849,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:72",{"_index":1833,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:77",{"_index":1837,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/features/users/users.service.ts:89",{"_index":1835,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/health/health.controller.ts",{"_index":1114,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:21",{"_index":1118,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1150,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/logger/custom",{"_index":684,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/dto/create",{"_index":615,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/logger/entities/log.entity.ts",{"_index":1272,"title":{},"body":{"entities/Log.html":{},"coverage.html":{}}}],["src/logger/entities/log.entity.ts:11",{"_index":1277,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:14",{"_index":1274,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:17",{"_index":1279,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:20",{"_index":1278,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:23",{"_index":1276,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/logger.module.ts",{"_index":1289,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logs.service.ts",{"_index":1308,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logger/logs.service.ts:14",{"_index":1314,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logger/logs.service.ts:8",{"_index":1311,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":1914,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/find",{"_index":1074,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["src/utils/dto/object",{"_index":1321,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["src/utils/dto/paginated",{"_index":1324,"title":{},"body":{"classes/PaginatedResultDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.dto.ts",{"_index":1331,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.dto.ts:15",{"_index":1332,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/utils/dto/pagination.dto.ts:9",{"_index":1333,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/utils/exceptions",{"_index":911,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["src/utils/exclude",{"_index":922,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/get",{"_index":1916,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logs.middleware.ts",{"_index":1293,"title":{},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["src/utils/logs.middleware.ts:6",{"_index":1298,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/logs.middleware.ts:8",{"_index":1296,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/mocks/config.service.ts",{"_index":1919,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mocks/jwt.service.ts",{"_index":1921,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/recursively",{"_index":1923,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stack",{"_index":698,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staging",{"_index":896,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["standard",{"_index":1987,"title":{},"body":{"index.html":{}}}],["start",{"_index":1991,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2041,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2042,"title":{},"body":{"index.html":{}}}],["started",{"_index":1979,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1983,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1898,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1587,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["statuscode",{"_index":1303,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["statusmessage",{"_index":1304,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["storage",{"_index":1142,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["store",{"_index":1672,"title":{},"body":{"entities/User.html":{}}}],["storing",{"_index":1677,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["strategy",{"_index":1166,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":750,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["streamablefile",{"_index":745,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["streamablefile(stream",{"_index":763,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["street",{"_index":13,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["streetname",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":18,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/FindProductQuery.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stringifyparameters",{"_index":804,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stringifyparameters(parameters",{"_index":820,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["string})@apiokresponse({description",{"_index":1719,"title":{},"body":{"controllers/UsersController.html":{}}}],["strip",{"_index":937,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["successfully",{"_index":1696,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully!'})@apinotfoundresponse({description",{"_index":1720,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully!'})@apiunauthorizedresponse({description",{"_index":1713,"title":{},"body":{"controllers/UsersController.html":{}}}],["super",{"_index":1168,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`category",{"_index":491,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["super(`file",{"_index":946,"title":{},"body":{"classes/FileNotFoundException.html":{}}}],["super(`post",{"_index":1360,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["super(`product",{"_index":1451,"title":{},"body":{"classes/ProductNotFoundException.html":{}}}],["super(`user",{"_index":1681,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(context",{"_index":713,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.catch(exception",{"_index":921,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["super.debug.apply(this",{"_index":722,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":720,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":718,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.warn.apply(this",{"_index":721,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":2020,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supportemail",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["svg",{"_index":2051,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1956,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":1602,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["t",{"_index":1326,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["table",{"_index":1926,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1925,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1066,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["terminusmodule",{"_index":1151,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":897,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covlicense",{"_index":2047,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2046,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":1282,"title":{},"body":{"classes/LogInDto.html":{}}}],["tests",{"_index":2044,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":1271,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":240,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken",{"_index":1561,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":221,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.categoriesservice.create(category",{"_index":414,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findall",{"_index":415,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findallwithdeleted",{"_index":416,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findone(+id",{"_index":418,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.remove(+id",{"_index":422,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.restoredeleted(+id",{"_index":424,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.update(+id",{"_index":420,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryrepository.create(createcategorydto",{"_index":455,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.find",{"_index":457,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":461,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.restore(id",{"_index":469,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(category",{"_index":456,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.softdelete(id",{"_index":466,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.update(id",{"_index":463,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.commandbus.execute",{"_index":1498,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.commandbus.execute(new",{"_index":571,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["this.commentsrepository.create",{"_index":612,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsrepository.findandcount",{"_index":1104,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["this.commentsrepository.save(newcomment",{"_index":613,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsservice.createcomment(comment",{"_index":539,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.getcomments(postid",{"_index":538,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.configservice.get('app.debugmode",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.env",{"_index":63,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.filedestination",{"_index":1581,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.configservice.get('app.port",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.supportemail",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.url",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('aws.publicbucketname",{"_index":1023,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('jwt.accesstokenexpirationtime')}s",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.accesstokensecret",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.refreshtokenexpirationtime')}s",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.refreshtokensecret",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.connection.createqueryrunner",{"_index":1870,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databasefilesrepository.findone",{"_index":794,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["this.databasefilesservice.deletefilewithqueryrunner",{"_index":1879,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databasefilesservice.getfilebyid(id",{"_index":756,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["this.databasefilesservice.uploaddatabasefilewithqueryrunner",{"_index":1876,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":1147,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.fileinterceptor",{"_index":1236,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["this.fileinterceptor.intercept(...args",{"_index":1239,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["this.filesservice.deleteprivatefile(fileid",{"_index":1894,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.generatepresignedurl(file.key",{"_index":1891,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.getprivatefile(fileid",{"_index":1886,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.uploadprivatefile(imagebuffer",{"_index":1893,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.uploadpublicfile",{"_index":1869,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(userid",{"_index":1859,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.healthcheckservice.check",{"_index":1126,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.sign(payload",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.localfilesrepository.create(filedata",{"_index":1260,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesrepository.findone",{"_index":1262,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesrepository.save(newfile",{"_index":1261,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesservice.deletelocalfilewithqueryrunner",{"_index":1885,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.localfilesservice.getfilebyid(id",{"_index":1209,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["this.localfilesservice.savelocalfiledata(filedata",{"_index":1884,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.debug(message",{"_index":830,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error",{"_index":826,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(message",{"_index":1306,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.log",{"_index":824,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.log(message",{"_index":829,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logger.warn",{"_index":828,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.warn(message",{"_index":831,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1318,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1319,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":717,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":719,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":1133,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":1139,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.postsrepository.create",{"_index":1432,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1436,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":1424,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":1425,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.query",{"_index":1427,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":1433,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1434,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(post",{"_index":1399,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(number(id",{"_index":1402,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallposts",{"_index":1393,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(number(id",{"_index":1395,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostswithparagraph(paragraph",{"_index":1397,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(number(id",{"_index":1400,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.privatefilesrepository.create",{"_index":1033,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.delete(fileid",{"_index":1041,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.findone",{"_index":1020,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.save(newfile",{"_index":1034,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.productsrepository.create",{"_index":665,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["this.productsrepository.delete(id",{"_index":855,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["this.productsrepository.findandcount",{"_index":1064,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["this.productsrepository.findone",{"_index":851,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["this.productsrepository.save(newproduct",{"_index":666,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["this.productsrepository.update(id",{"_index":1628,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["this.productsservice.create(createproductdto",{"_index":1467,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findall(ownerid",{"_index":1468,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findone(id",{"_index":1470,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.remove(id",{"_index":1474,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.update(id",{"_index":1471,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.publicfilesrepository.create",{"_index":1029,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.delete(fileid",{"_index":1038,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.findone",{"_index":1035,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.save(newfile",{"_index":1032,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.querybus.execute",{"_index":1500,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.querybus.execute(new",{"_index":569,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["this.stringifyparameters",{"_index":827,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stringifyparameters(parameters",{"_index":825,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret",{"_index":1550,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":1555,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream",{"_index":1553,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":1127,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":1184,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":1176,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1867,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":1862,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1863,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1868,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":1858,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.addavatar(request.user.id",{"_index":1786,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addavatarinpgsql",{"_index":1775,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addavatarusingamazons3",{"_index":1771,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addprivatefile",{"_index":1788,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":316,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.deleteavatar(request.user.id",{"_index":1791,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteprivatefile(request.user.id",{"_index":1793,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallprivatefiles(request.user.id",{"_index":1761,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":1757,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getprivatefile",{"_index":1765,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":1582,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.usersservice.turnofftwofactorauthentication(request.user.id",{"_index":1559,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":1558,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":331,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thresholdpercent",{"_index":1148,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":2029,"title":{},"body":{"index.html":{}}}],["throw",{"_index":321,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"injectables/LocalFilesService.html":{},"injectables/PostsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateProductHandler.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":920,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["time",{"_index":817,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["title",{"_index":627,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{}}}],["tofilestream",{"_index":1576,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":1585,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["token",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/TwoFactorAuthenticationService.html":{},"index.html":{}}}],["token.strategy",{"_index":258,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":1158,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":1161,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":1163,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokenpayload",{"_index":310,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["totalcount",{"_index":1067,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/PaginatedResultDto.html":{}}}],["transformer",{"_index":592,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"injectables/CategoriesService.html":{},"classes/CreatePostDto.html":{},"controllers/DatabaseFilesController.html":{},"classes/EnvironmentVariables.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"entities/Product.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["true})@exclude",{"_index":1648,"title":{},"body":{"entities/User.html":{}}}],["true})@isoptional",{"_index":630,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@joincolumn",{"_index":1642,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":314,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/UsersService.html":{}}}],["turnofftwofactorauthentication",{"_index":1530,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["turnofftwofactorauthentication(request",{"_index":1537,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnofftwofactorauthentication(userid",{"_index":1848,"title":{},"body":{"injectables/UsersService.html":{}}}],["turnontwofactorauthentication",{"_index":1531,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["turnontwofactorauthentication(request",{"_index":1541,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(userid",{"_index":1850,"title":{},"body":{"injectables/UsersService.html":{}}}],["two",{"_index":261,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"index.html":{}}}],["twofactorauthenticationcode",{"_index":1526,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":1523,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":251,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":1639,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["twofactorauthenticationservice",{"_index":249,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":16,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isoptional",{"_index":1090,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["typeorm",{"_index":33,"title":{},"body":{"entities/Address.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/LocalFile.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeorm.config.ts",{"_index":2004,"title":{},"body":{"index.html":{}}}],["typeorm_logging",{"_index":869,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["typeorm_logging=true",{"_index":2031,"title":{},"body":{"index.html":{}}}],["typeorm_synchronize",{"_index":870,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["typeormconfig",{"_index":119,"title":{"classes/TypeOrmConfig.html":{}},"body":{"modules/AppModule.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{}}}],["typeormconfig.getormconfig(configservice",{"_index":1606,"title":{},"body":{"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["typeormhealthindicator",{"_index":1123,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":797,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["typeormmodule",{"_index":429,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":432,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":552,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([databasefile",{"_index":771,"title":{},"body":{"modules/DatabaseFilesModule.html":{}}}],["typeormmodule.forfeature([localfile",{"_index":1245,"title":{},"body":{"modules/LocalFilesModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":1292,"title":{},"body":{"modules/LoggerModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1408,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1485,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":981,"title":{},"body":{"modules/FilesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1801,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(typeormmoduleoptions",{"_index":835,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":1592,"title":{},"body":{"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["typeormmoduleoptions",{"_index":834,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1623,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/book",{"_index":650,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["types/car",{"_index":652,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["typescript",{"_index":1982,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1957,"title":{},"body":{"dependencies.html":{}}}],["uint8array",{"_index":729,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["unauthorized",{"_index":1759,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized.'})@useguards(jwtauthenticationguard",{"_index":1714,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized.'})@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":1698,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":845,"title":{},"body":{"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateProductHandler.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('wrong",{"_index":1556,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["undefined",{"_index":970,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["undefined})@apiunauthorizedresponse({description",{"_index":1735,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":1670,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":1967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":2043,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":171,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":2061,"title":{},"body":{"properties.html":{}}}],["update",{"_index":375,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["update(@param",{"_index":419,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["update(id",{"_index":448,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["update(undefined",{"_index":394,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategorydto",{"_index":395,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedcategory",{"_index":464,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":1435,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatedproduct",{"_index":1629,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["updatepost",{"_index":1368,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(id",{"_index":1420,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(undefined",{"_index":1382,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":1383,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateproductcommand",{"_index":1495,"title":{"classes/UpdateProductCommand.html":{}},"body":{"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["updateproductcommand(id",{"_index":1503,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto",{"_index":1461,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproducthandler",{"_index":1482,"title":{"classes/UpdateProductHandler.html":{}},"body":{"modules/ProductsModule.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1630,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["upload",{"_index":966,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["upload.dto",{"_index":1751,"title":{},"body":{"controllers/UsersController.html":{}}}],["upload.dto.ts",{"_index":958,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:6",{"_index":963,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploaddatabasefilewithqueryrunner",{"_index":775,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["uploaddatabasefilewithqueryrunner(databuffer",{"_index":785,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["uploaded",{"_index":998,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":1742,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadprivatefile",{"_index":987,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadprivatefile(databuffer",{"_index":1008,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile",{"_index":988,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile(databuffer",{"_index":1010,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult",{"_index":1028,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.key",{"_index":1030,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.location",{"_index":1031,"title":{},"body":{"injectables/FilesService.html":{}}}],["url",{"_index":951,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"entities/PublicFile.html":{},"injectables/UsersService.html":{}}}],["use",{"_index":1129,"title":{},"body":{"controllers/HealthController.html":{},"injectables/LogsMiddleware.html":{},"entities/User.html":{},"index.html":{}}}],["use(request",{"_index":1294,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["useclass",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1140,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":268,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('logout')@httpcode(200",{"_index":173,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwttwofactorguard",{"_index":1398,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(localauthenticationguard",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":746,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":753,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1770,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":15,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.address",{"_index":29,"title":{},"body":{"entities/Address.html":{}}}],["user.avatarid",{"_index":1875,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":1861,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":1632,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:16",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":675,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":678,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1580,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user.entity",{"_index":34,"title":{},"body":{"entities/Address.html":{}}}],["user.id",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.interface",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["user.interface.ts",{"_index":1520,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.password",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.twofactorauthenticationsecret",{"_index":1584,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user@email.com",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":295,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{},"classes/UserNotFoundException.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":1597,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["usernamefield",{"_index":1270,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernotfoundexception",{"_index":1678,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usernotfoundexception(id",{"_index":1864,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernotfoundexception(userid",{"_index":1892,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":1684,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1799,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1743,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.services.ts",{"_index":2021,"title":{},"body":{"index.html":{}}}],["users/entities/user.entity",{"_index":505,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{}}}],["userscontroller",{"_index":1682,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1160,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["usersmodule",{"_index":89,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1815,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":191,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithfiles",{"_index":1888,"title":{},"body":{"injectables/UsersService.html":{}}}],["userwithfiles.files.map(async",{"_index":1890,"title":{},"body":{"injectables/UsersService.html":{}}}],["user})@apinotfoundresponse({description",{"_index":1731,"title":{},"body":{"controllers/UsersController.html":{}}}],["utils/dto/find",{"_index":402,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["utils/dto/object",{"_index":594,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["utils/dto/paginated",{"_index":527,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["utils/dto/pagination.dto",{"_index":562,"title":{},"body":{"injectables/CommentsService.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"injectables/ProductsService.html":{}}}],["utils/get",{"_index":709,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["utils/logs.middleware",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":1015,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["v4",{"_index":1014,"title":{},"body":{"injectables/FilesService.html":{}}}],["valid",{"_index":1729,"title":{},"body":{"controllers/UsersController.html":{}}}],["validate",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validate(config",{"_index":900,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["validate(email",{"_index":1267,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1180,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(request",{"_index":1162,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validatedconfig",{"_index":902,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validatenested",{"_index":593,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/PaginatedResultDto.html":{}}}],["validatenested()@type(undefined",{"_index":590,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["validatesync",{"_index":894,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validatesync(validatedconfig",{"_index":906,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validation",{"_index":2008,"title":{},"body":{"index.html":{}}}],["validationpipe",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":579,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/RegisterDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["value",{"_index":294,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":939,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["values.ts",{"_index":1924,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["variable",{"_index":1906,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":54,"title":{"miscellaneous/variables.html":{}},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["verbose",{"_index":689,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":702,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verifypassword",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":300,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/FilesService.html":{},"properties.html":{}}}],["version_neutral",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["void",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/LogsMiddleware.html":{}}}],["warn",{"_index":690,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["warn(message",{"_index":704,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["watch",{"_index":2040,"title":{},"body":{"index.html":{}}}],["went",{"_index":327,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["where.owner",{"_index":1061,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["where.post",{"_index":1102,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["withdeleted",{"_index":460,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["without",{"_index":1993,"title":{},"body":{"index.html":{}}}],["worrying",{"_index":1994,"title":{},"body":{"index.html":{}}}],["wrong",{"_index":328,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["yes",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["zoom",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                city\n                            \n                            \n                                    Public\n                                country\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                street\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Address {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public street: string;\n\n  @Column()\n  public city: string;\n\n  @Column()\n  public country: string;\n\n  @OneToOne(() => User, (user: User) => user.address)\n  public user?: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, VERSION_NEUTRAL } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller({\n  version: VERSION_NEUTRAL,\n})\nexport class AppController {\n  constructor(private configService: ConfigService) {}\n\n  @Get()\n  getHello(): string {\n    // * config variables\n    const port = this.configService.get('app.port');\n    const appUrl = this.configService.get('app.url');\n    const supportEmail = this.configService.get('app.supportEmail');\n    const appEnv = this.configService.get('app.env');\n    const debugMode = this.configService.get('app.debugMode');\n\n    const debugEnabled = debugMode ? 'yes' : 'no';\n\n    return (\n      '' +\n      (appUrl +\n        ':' +\n        port +\n        ' | ' +\n        supportEmail +\n        ' >> ' +\n        appEnv +\n        ' environment in debug mode: ' +\n        debugEnabled) +\n      ''\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\nAppModule -->\n\nDatabaseFilesModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nAppModule -->\n\nLocalFilesModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            DatabaseFilesModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LocalFilesModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  MiddlewareConsumer,\n  Module,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { DatabaseModule } from './database/database.module';\nimport { validate } from './env.validation';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { UsersModule } from './features/users/users.module';\nimport { PostsModule } from './features/posts/posts.module';\nimport { CategoriesModule } from './features/categories/categories.module';\nimport { FilesModule } from './features/files/files.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport typeormConfig from './config/typeorm.config';\nimport awsConfig from './config/aws.config';\nimport jwtConfig from './config/jwt.config';\nimport { APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\nimport { CommentsModule } from './features/comments/comments.module';\nimport { ProductsModule } from './features/products/products.module';\nimport { DatabaseFilesModule } from './features/database-files/database-files.module';\nimport { LocalFilesModule } from './features/local-files/local-files.module';\nimport { LoggerModule } from './logger/logger.module';\nimport { LogsMiddleware } from './utils/logs.middleware';\nimport { HealthModule } from './health/health.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      cache: true,\n      expandVariables: true,\n      validate,\n      load: [appConfig, databaseConfig, typeormConfig, awsConfig, jwtConfig],\n    }),\n    DatabaseModule,\n    AuthenticationModule,\n    UsersModule,\n    PostsModule,\n    CategoriesModule,\n    FilesModule,\n    CommentsModule,\n    ProductsModule,\n    DatabaseFilesModule,\n    LocalFilesModule,\n    LoggerModule,\n    HealthModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_PIPE,\n      useClass: ValidationPipe,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    },\n    // {\n    //   provide: APP_FILTER,\n    //   useClass: ExceptionsLoggerFilter,\n    // },\n    // {\n    //   provide: APP_INTERCEPTOR,\n    //   useClass: ExcludeNullInterceptor,\n    // },\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogsMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('login')@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('logout')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { UsersService } from '../features/users/users.service';\nimport { AuthenticationService } from './authentication.service';\nimport { LogInDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthenticationGuard } from './jwt-authentication.guard';\nimport { JwtRefreshGuard } from './jwt-refresh.guard';\nimport { LocalAuthenticationGuard } from './local-authentication.guard';\nimport { RequestWithUser } from './request-with-user.interface';\n\n@Controller('authentication')\n@ApiTags('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    return user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    return this.authenticationService.register(registrationData);\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('login')\n  @ApiBody({ type: LogInDto })\n  async login(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return;\n    }\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('logout')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from '../features/users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { JwtRefreshTokenStrategy } from './jwt-refresh-token.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtTwoFactorStrategy } from './two-factor/jwt-two-factor.strategy';\nimport { TwoFactorAuthenticationController } from './two-factor/two-factor-authentication.controller';\nimport { TwoFactorAuthenticationService } from './two-factor/two-factor-authentication.service';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (ConfigService: ConfigService) => ({\n        secret: ConfigService.get('jwt.accessTokenSecret'),\n        signOptions: {\n          expiresIn: `${ConfigService.get('jwt.accessTokenExpirationTime')}s`,\n        },\n      }),\n    }),\n  ],\n  providers: [\n    AuthenticationService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshTokenStrategy,\n    TwoFactorAuthenticationService,\n    JwtTwoFactorStrategy,\n  ],\n  controllers: [AuthenticationController, TwoFactorAuthenticationController],\n  exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../features/users/users.service';\nimport * as bcrypt from 'bcrypt';\nimport { PostgresErrorCode } from '../database/postgres-error-codes.enum';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      return createdUser;\n    } catch (error: any) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtAccessToken(\n    userId: number,\n    isSecondFactorAuthenticated = false,\n  ) {\n    const payload: TokenPayload = { userId, isSecondFactorAuthenticated };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('jwt.accessTokenSecret'),\n      expiresIn: `${this.configService.get('jwt.accessTokenExpirationTime')}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'jwt.accessTokenExpirationTime',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('jwt.refreshTokenSecret'),\n      expiresIn: `${this.configService.get('jwt.refreshTokenExpirationTime')}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'jwt.refreshTokenExpirationTime',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookProperties.html":{"url":"interfaces/BookProperties.html","title":"interface - BookProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/types/book-properties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authors\n                                        \n                                \n                                \n                                        \n                                            publicationYear\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicationYear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicationYear:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookProperties {\n  authors: string[];\n  publicationYear: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarProperties.html":{"url":"interfaces/CarProperties.html","title":"interface - CarProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/types/car-properties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brand\n                                        \n                                \n                                \n                                        \n                                            engine\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brand\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brand:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        engine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        engine:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CarProperties {\n  brand: string;\n  engine: {\n    fuel: string;\n    numberOfCylinders: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllWithDeleted\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                restoreDeleted\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(category: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllWithDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllWithDeleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/with-deleted')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restoreDeleted\n                        \n                    \n                \n            \n            \n                \nrestoreDeleted(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/restore')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(undefined: FindOneParams, category: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport { CategoriesService } from './categories.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('categories')\n@ApiTags('categories')\n@ApiExtraModels(FindOneParams)\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  @Post()\n  create(@Body() category: CreateCategoryDto) {\n    return this.categoriesService.create(category);\n  }\n\n  @Get()\n  findAll() {\n    return this.categoriesService.findAll();\n  }\n\n  @Get('/with-deleted')\n  findAllWithDeleted() {\n    return this.categoriesService.findAllWithDeleted();\n  }\n\n  @Get(':id')\n  findOne(@Param() { id }: FindOneParams) {\n    return this.categoriesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param() { id }: FindOneParams, @Body() category: UpdateCategoryDto) {\n    return this.categoriesService.update(+id, category);\n  }\n\n  @Delete(':id')\n  remove(@Param() { id }: FindOneParams) {\n    return this.categoriesService.remove(+id);\n  }\n\n  @Post(':id/restore')\n  restoreDeleted(@Param() { id }: FindOneParams) {\n    return this.categoriesService.restoreDeleted(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CategoriesController } from './categories.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from './entities/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllWithDeleted\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                restoreDeleted\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/categories/categories.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllWithDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllWithDeleted()\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        restoreDeleted\n                        \n                    \n                \n            \n            \n                \n                    \n                    restoreDeleted(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, category: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\nimport { CategoryNotFoundException } from './exceptions/category-not-found.exception';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto) {\n    const category = await this.categoryRepository.create(createCategoryDto);\n    await this.categoryRepository.save(category);\n    return category;\n  }\n\n  findAll() {\n    return this.categoryRepository.find({\n      relations: ['posts'],\n    });\n  }\n\n  findAllWithDeleted() {\n    return this.categoryRepository.find({\n      relations: ['posts'],\n      withDeleted: true,\n    });\n  }\n\n  async findOne(id: number) {\n    const category = await this.categoryRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['posts'],\n    });\n    if (category) {\n      return category;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async update(id: number, category: UpdateCategoryDto) {\n    await this.categoryRepository.update(id, category);\n    const updatedCategory = await this.categoryRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['posts'],\n    });\n    if (updatedCategory) {\n      return updatedCategory;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.categoryRepository.softDelete(id);\n    if (!deleteResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n\n  async restoreDeleted(id: number) {\n    const restoreResponse = await this.categoryRepository.restore(id);\n    if (!restoreResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deletedAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.categories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from '../../posts/entities/post.entity';\nimport {\n  Column,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Category {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories)\n  public posts: Post[];\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/exceptions/category-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/categories/exceptions/category-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class CategoryNotFoundException extends NotFoundException {\n  constructor(categoryId: number) {\n    super(`Category with id ${categoryId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from '../../posts/entities/post.entity';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class Comment {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => Post, (post: Post) => post.comments)\n  public post: Post;\n\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/comments/comments.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(undefined: GetCommentsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/comments/comments.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { CommentsService } from './comments.service';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { GetCommentsDto } from './dto/get-comments.dto';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { Comment } from './entities/comment.entity';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\n\n@Controller('comments')\n@ApiTags('comments')\n@ApiExtraModels(PaginatedResultDto)\n@UseGuards(JwtAuthenticationGuard)\nexport class CommentsController {\n  constructor(private readonly commentsService: CommentsService) {}\n\n  @Get()\n  async getComments(\n    @Query() { postId, page = 1, limit = 20 }: GetCommentsDto,\n  ): Promise> {\n    return this.commentsService.getComments(postId, { page, limit });\n  }\n\n  @Post()\n  async createComment(\n    @Body() comment: CreateCommentDto,\n    @Req() request: RequestWithUser,\n  ) {\n    const user = request.user;\n    return this.commentsService.createComment(comment, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\n\nCommentsService\n\nCommentsService\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CreateCommentHandler } from './commands/handlers/create-comment.handler';\nimport { CommentsController } from './comments.controller';\nimport { CommentsService } from './comments.service';\nimport { Comment } from './entities/comment.entity';\nimport { GetCommentsHandler } from './queries/handlers/get-comments.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment]), CqrsModule],\n  controllers: [CommentsController],\n  providers: [CommentsService, CreateCommentHandler, GetCommentsHandler],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/comments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commandBus: CommandBus, queryBus: QueryBus)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/comments.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commandBus\n                                                  \n                                                        \n                                                                    CommandBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBus\n                                                  \n                                                        \n                                                                    QueryBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, author: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/comments.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(postId: number, paginationDto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/comments.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paginationDto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { PaginationDto } from '../../utils/dto/pagination.dto';\nimport { User } from '../users/entities/user.entity';\nimport { CreateCommentCommand } from './commands/implementations/create-comment.command';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { GetCommentsQuery } from './queries/implementations/get-comments.query';\nimport { Comment } from './entities/comment.entity';\n\n@Injectable()\nexport class CommentsService {\n  constructor(private commandBus: CommandBus, private queryBus: QueryBus) {}\n\n  async getComments(\n    postId: number,\n    paginationDto: PaginationDto,\n  ): Promise> {\n    return this.queryBus.execute(new GetCommentsQuery(postId, paginationDto));\n  }\n\n  async createComment(comment: CreateCommentDto, author: User) {\n    return this.commandBus.execute(new CreateCommentCommand(comment, author));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/create-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentCommand.html":{"url":"classes/CreateCommentCommand.html","title":"class - CreateCommentCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/commands/implementations/create-comment.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                author\n                            \n                            \n                                    Public\n                                    Readonly\n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(comment: CreateCommentDto, author: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        comment\n                                                  \n                                                        \n                                                                        CreateCommentDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        author\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateCommentDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { CreateCommentDto } from '../../dto/create-comment.dto';\n\nexport class CreateCommentCommand {\n  constructor(\n    public readonly comment: CreateCommentDto,\n    public readonly author: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/create-comment.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ObjectWithIdDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/create-comment.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { ObjectWithIdDto } from '../../../utils/dto/object-with-id.dto';\nexport class CreateCommentDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithIdDto)\n  post: ObjectWithIdDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentHandler.html":{"url":"classes/CreateCommentHandler.html","title":"class - CreateCommentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/commands/handlers/create-comment.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/commands/handlers/create-comment.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateCommentCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/commands/handlers/create-comment.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateCommentCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCommentCommand } from '../implementations/create-comment.command';\nimport { Comment } from '../../entities/comment.entity';\n\n@CommandHandler(CreateCommentCommand)\nexport class CreateCommentHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Comment) private commentsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateCommentCommand): Promise {\n    const { comment, author } = command;\n    const newComment = await this.commentsRepository.create({\n      ...comment,\n      author,\n    });\n    await this.commentsRepository.save(newComment);\n    return newComment;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/dto/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                level\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class CreateLogDto {\n  @IsString()\n  context: string;\n\n  @IsString()\n  message: string;\n\n  @IsString()\n  level: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\nexport class CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString({ each: true })\n  @IsOptional()\n  paragraphs: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductCommand.html":{"url":"classes/CreateProductCommand.html","title":"class - CreateProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/create-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                product\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(product: CreateProductDto, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        product\n                                                  \n                                                        \n                                                                        CreateProductDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateProductDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { CreateProductDto } from '../../dto/create-product.dto';\n\nexport class CreateProductCommand {\n  constructor(\n    public readonly product: CreateProductDto,\n    public readonly owner: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/create-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/create-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { BookProperties } from '../types/book-properties.interface';\nimport { CarProperties } from '../types/car-properties.interface';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsOptional()\n  properties?: CarProperties | BookProperties;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductHandler.html":{"url":"classes/CreateProductHandler.html","title":"class - CreateProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/create-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/create-product.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/create-product.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { CreateProductCommand } from '../implementations/create-product.command';\n\n@CommandHandler(CreateProductCommand)\nexport class CreateProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateProductCommand): Promise {\n    const { product, owner } = command;\n    const newProduct = await this.productsRepository.create({\n      ...product,\n      owner,\n    });\n    await this.productsRepository.save(newProduct);\n    return newProduct;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n  IsOptional,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/custom-logger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, context?: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogsService\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/custom-logger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from '@nestjs/common';\nimport { ConsoleLoggerOptions } from '@nestjs/common/services/console-logger.service';\nimport { ConfigService } from '@nestjs/config';\nimport { getLogLevels } from '../utils/get-log-levels';\nimport { LogsService } from './logs.service';\n\n@Injectable()\nexport class CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogsService;\n\n  constructor(\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogsService,\n  ) {\n    const environment = configService.get('NODE_ENV');\n\n    super(context, {\n      ...options,\n      logLevels: getLogLevels(environment === 'production'),\n    });\n\n    this.logsService = logsService;\n  }\n\n  log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'log',\n    });\n  }\n\n  error(message: string, context?: string, stack?: string) {\n    super.error.apply(this, [message, context, stack]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DatabaseFile.html":{"url":"entities/DatabaseFile.html","title":"entity - DatabaseFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DatabaseFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/entities/database-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                filename\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Uint8Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'bytea'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class DatabaseFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public filename: string;\n\n  @Column({\n    type: 'bytea',\n  })\n  public data: Uint8Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DatabaseFilesController.html":{"url":"controllers/DatabaseFilesController.html","title":"controller - DatabaseFilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DatabaseFilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/database-files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                database-files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDatabaseFileById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatabaseFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatabaseFileById(id: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/database-files/database-files.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Res,\n  StreamableFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { DatabaseFilesService } from './database-files.service';\nimport { Readable } from 'stream';\nimport { Response } from 'express';\n\n@Controller('database-files')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class DatabaseFilesController {\n  constructor(private readonly databaseFilesService: DatabaseFilesService) {}\n\n  @Get(':id')\n  async getDatabaseFileById(\n    @Param('id', ParseIntPipe) id: number,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const file = await this.databaseFilesService.getFileById(id);\n\n    const stream = Readable.from(file.data);\n\n    response.set({\n      'Content-Disposition': `inline; filename=\"${file.filename}\"`,\n      'Content-Type': 'image',\n    });\n\n    return new StreamableFile(stream);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseFilesModule.html":{"url":"modules/DatabaseFilesModule.html","title":"module - DatabaseFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DatabaseFilesModule\n\n\n\ncluster_DatabaseFilesModule_providers\n\n\n\ncluster_DatabaseFilesModule_exports\n\n\n\n\nDatabaseFilesService \n\nDatabaseFilesService \n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\nDatabaseFilesService  -->\n\nDatabaseFilesModule->DatabaseFilesService \n\n\n\n\n\nDatabaseFilesService\n\nDatabaseFilesService\n\nDatabaseFilesModule -->\n\nDatabaseFilesService->DatabaseFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/database-files/database-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseFilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DatabaseFilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseFilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DatabaseFilesService } from './database-files.service';\nimport { DatabaseFile } from './entities/database-file.entity';\nimport { DatabaseFilesController } from './database-files.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DatabaseFile]), ConfigModule],\n  providers: [DatabaseFilesService],\n  exports: [DatabaseFilesService],\n  controllers: [DatabaseFilesController],\n})\nexport class DatabaseFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseFilesService.html":{"url":"injectables/DatabaseFilesService.html","title":"injectable - DatabaseFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/database-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFileWithQueryRunner\n                            \n                            \n                                    Async\n                                getFileById\n                            \n                            \n                                    Async\n                                uploadDatabaseFileWithQueryRunner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseFilesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/database-files/database-files.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileById(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadDatabaseFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadDatabaseFileWithQueryRunner(dataBuffer: Buffer, filename: string, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { DatabaseFile } from './entities/database-file.entity';\n\n@Injectable()\nexport class DatabaseFilesService {\n  constructor(\n    @InjectRepository(DatabaseFile)\n    private databaseFilesRepository: Repository,\n  ) {}\n\n  async uploadDatabaseFileWithQueryRunner(\n    dataBuffer: Buffer,\n    filename: string,\n    queryRunner: QueryRunner,\n  ) {\n    const newFile = await queryRunner.manager.create(DatabaseFile, {\n      filename,\n      data: dataBuffer,\n    });\n    await queryRunner.manager.save(DatabaseFile, newFile);\n    return newFile;\n  }\n\n  async deleteFileWithQueryRunner(fileId: number, queryRunner: QueryRunner) {\n    const deleteResponse = await queryRunner.manager.delete(\n      DatabaseFile,\n      fileId,\n    );\n    if (!deleteResponse.affected) {\n      throw new NotFoundException();\n    }\n  }\n\n  async getFileById(fileId: number) {\n    const file = await this.databaseFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n    });\n    if (!file) {\n      throw new NotFoundException();\n    }\n    return file;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLogger.html":{"url":"classes/DatabaseLogger.html","title":"class - DatabaseLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database-logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger('SQL')\n                    \n                \n                    \n                        \n                                Defined in src/database/database-logger.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from 'typeorm';\nimport { Logger as NestLogger } from '@nestjs/common';\n\nexport class DatabaseLogger implements TypeOrmLogger {\n  private readonly logger = new NestLogger('SQL');\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)}`,\n    );\n  }\n\n  logQueryError(\n    error: string,\n    query: string,\n    parameters?: unknown[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${error}`,\n    );\n  }\n\n  logQuerySlow(\n    time: number,\n    query: string,\n    parameters?: unknown[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.warn(\n      `Time: ${time} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${query}`,\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.log(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.log(message);\n  }\n\n  log(\n    level: 'log' | 'info' | 'warn',\n    message: string,\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    if (level === 'log') {\n      return this.logger.log(message);\n    }\n    if (level === 'info') {\n      return this.logger.debug(message);\n    }\n    if (level === 'warn') {\n      return this.logger.warn(message);\n    }\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return '';\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeormModuleOptions } from '../config/typeorm.config';\n\n@Module({\n  imports: [TypeOrmModule.forRootAsync(typeormModuleOptions)],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteProductCommand.html":{"url":"classes/DeleteProductCommand.html","title":"class - DeleteProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/delete-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\n\nexport class DeleteProductCommand {\n  constructor(public readonly id: string, public readonly owner: User) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteProductHandler.html":{"url":"classes/DeleteProductHandler.html","title":"class - DeleteProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/delete-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/delete-product.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: DeleteProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/delete-product.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                DeleteProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { ProductNotFoundException } from '../../exceptions/file-not-found.exception';\nimport { DeleteProductCommand } from '../implementations/delete-product.command';\n\n@CommandHandler(DeleteProductCommand)\nexport class DeleteProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: DeleteProductCommand): Promise {\n    const { id, owner } = command;\n    const oldProduct = await this.productsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['owner'],\n    });\n    if (oldProduct) {\n      if (oldProduct.owner && oldProduct.owner.id === owner.id) {\n        const deleteResponse = await this.productsRepository.delete(id);\n        if (!deleteResponse.affected) {\n          throw new ProductNotFoundException(id);\n        }\n        return;\n      } else {\n        throw new UnauthorizedException();\n      }\n    }\n    throw new ProductNotFoundException(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariables.html":{"url":"classes/EnvironmentVariables.html","title":"class - EnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/env.validation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                APP_DEBUG\n                            \n                            \n                                APP_ENV\n                            \n                            \n                                APP_URL\n                            \n                            \n                                DATABASE_HOST\n                            \n                            \n                                DATABASE_NAME\n                            \n                            \n                                DATABASE_PASSWORD\n                            \n                            \n                                DATABASE_PORT\n                            \n                            \n                                DATABASE_USER\n                            \n                            \n                                JWT_ACCESS_TOKEN_EXPIRATION_TIME\n                            \n                            \n                                JWT_REFRESH_TOKEN_EXPIRATION_TIME\n                            \n                            \n                                PORT\n                            \n                            \n                                TYPEORM_LOGGING\n                            \n                            \n                                TYPEORM_SYNCHRONIZE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        APP_DEBUG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_ACCESS_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_REFRESH_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPEORM_LOGGING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPEORM_SYNCHRONIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:58\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { plainToClass } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  validateSync,\n} from 'class-validator';\n\nenum Environment {\n  Local = 'local',\n  Production = 'production',\n  Staging = 'staging',\n  Test = 'test',\n}\n\nclass EnvironmentVariables {\n  @IsEnum(Environment)\n  @IsNotEmpty()\n  APP_ENV: Environment;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  APP_DEBUG: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  APP_URL: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  PORT: number;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_HOST: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  DATABASE_PORT: number;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_USER: string;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_PASSWORD: string;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_NAME: string;\n\n  @IsBoolean()\n  @IsOptional()\n  TYPEORM_SYNCHRONIZE: boolean;\n\n  @IsBoolean()\n  @IsOptional()\n  TYPEORM_LOGGING: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  JWT_ACCESS_TOKEN_EXPIRATION_TIME: number;\n\n  @IsNumber()\n  @IsOptional()\n  JWT_REFRESH_TOKEN_EXPIRATION_TIME: number;\n}\n\nexport function validate(config: Record) {\n  const validatedConfig = plainToClass(EnvironmentVariables, config, {\n    enableImplicitConversion: true,\n  });\n  const errors = validateSync(validatedConfig, {\n    skipMissingProperties: false,\n  });\n\n  if (errors.length > 0) {\n    throw new Error(errors.toString());\n  }\n  return validatedConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsLoggerFilter.html":{"url":"classes/ExceptionsLoggerFilter.html","title":"class - ExceptionsLoggerFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsLoggerFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptions-logger.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exceptions-logger.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\n@Catch()\nexport class ExceptionsLoggerFilter extends BaseExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    console.log('Exception thrown', exception);\n    super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exclude-null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exclude-null.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { recursivelyStripNullValues } from './recursively-strip-null-values';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map((value) => recursivelyStripNullValues(value)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileNotFoundException.html":{"url":"classes/FileNotFoundException.html","title":"class - FileNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/exceptions/file-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/files/exceptions/file-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class FileNotFoundException extends NotFoundException {\n  constructor(fileId: number) {\n    super(`File with id ${fileId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto.html":{"url":"classes/FileResponseDto.html","title":"class - FileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber } from 'class-validator';\nimport { User } from '../entities/user.entity';\n\nexport class FileResponseDto {\n  @IsString()\n  public url: string;\n\n  @IsNumber()\n  public id: number;\n\n  @IsString()\n  public key: string;\n\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-upload.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Express } from 'express';\n\nexport class FileUploadDto {\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadMultipleDto.html":{"url":"classes/FileUploadMultipleDto.html","title":"class - FileUploadMultipleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadMultipleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-upload-multiple.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                files\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-upload-multiple.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class FileUploadMultipleDto {\n  @ApiProperty({ type: 'array', items: { type: 'string', format: 'binary' } })\n  files: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PrivateFile } from './entities/private-file.entity';\nimport { PublicFile } from './entities/public-file.entity';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PublicFile, PrivateFile])],\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePrivateFile\n                            \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Public\n                                    Async\n                                generatePresignedUrl\n                            \n                            \n                                    Public\n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                uploadPrivateFile\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFilesRepository: Repository, privateFilesRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/features/files/files.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        privateFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePrivateFile(fileId: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of the user who uploaded the file. A user with this id should exist on the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePresignedUrl(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        AWS object key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise with a url\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise with the file and its information\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPrivateFile(dataBuffer: Buffer, ownerId: number, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file buffer of the uploaded content\n\n                                    \n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of the user who uploaded the file. A user with this id should exist on the database\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A file name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the public version of the uploaded file\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file buffer of the uploaded content\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A file name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the public version of the uploaded file\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { PublicFile } from './entities/public-file.entity';\nimport { PrivateFile } from './entities/private-file.entity';\nimport { S3 } from 'aws-sdk';\nimport { v4 as uuid } from 'uuid';\nimport { FileNotFoundException } from './exceptions/file-not-found.exception';\nimport internal from 'stream';\n\n@Injectable()\nexport class FilesService {\n  constructor(\n    @InjectRepository(PublicFile)\n    private publicFilesRepository: Repository,\n    @InjectRepository(PrivateFile)\n    private privateFilesRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   * @returns A promise with the file and its information\n   */\n  public async getPrivateFile(fileId: number): Promise {\n    const s3 = new S3();\n    const fileInfo = await this.privateFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n      relations: ['owner'],\n    });\n    if (fileInfo) {\n      const stream = await s3\n        .getObject({\n          Bucket: this.configService.get('aws.publicBucketName'),\n          Key: fileInfo.key,\n        })\n        .createReadStream();\n      return {\n        stream,\n        info: fileInfo,\n      };\n    }\n    throw new FileNotFoundException(fileId);\n  }\n\n  /**\n   * @param key AWS object key\n   * @returns A promise with a url\n   */\n  public async generatePresignedUrl(key: string): Promise {\n    const s3 = new S3();\n    return s3.getSignedUrlPromise('getObject', {\n      Bucket: this.configService.get('aws.publicBucketName'),\n      Key: key,\n    });\n  }\n\n  /**\n   * @param dataBuffer The file buffer of the uploaded content\n   * @param filename A file name\n   * @returns A promise with the public version of the uploaded file\n   */\n  async uploadPublicFile(\n    dataBuffer: Buffer,\n    filename: string,\n  ): Promise {\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${filename}`,\n      })\n      .promise();\n    const newFile = this.publicFilesRepository.create({\n      key: uploadResult.Key,\n      url: uploadResult.Location,\n    });\n    await this.publicFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  /**\n   * @param dataBuffer The file buffer of the uploaded content\n   * @param ownerId An id of the user who uploaded the file. A user with this id should exist on the database\n   * @param filename A file name\n   * @returns A promise with the public version of the uploaded file\n   */\n  async uploadPrivateFile(\n    dataBuffer: Buffer,\n    ownerId: number,\n    filename: string,\n  ): Promise {\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${filename}`,\n      })\n      .promise();\n    const newFile = this.privateFilesRepository.create({\n      key: uploadResult.Key,\n      owner: {\n        id: ownerId,\n      },\n    });\n    await this.privateFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   */\n  async deletePublicFile(fileId: number): Promise {\n    const s3 = new S3();\n    const file = await this.publicFilesRepository.findOne({\n      where: { id: fileId },\n    });\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Key: file.key,\n      })\n      .promise();\n    await this.publicFilesRepository.delete(fileId);\n  }\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   * @param ownerId An id of the user who uploaded the file. A user with this id should exist on the database\n   */\n  async deletePrivateFile(fileId: number, ownerId: number): Promise {\n    const s3 = new S3();\n    const file = await this.privateFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n      relations: ['owner'],\n    });\n    if (file) {\n      if (file.owner && file.owner.id === ownerId) {\n        await s3\n          .deleteObject({\n            Bucket: this.configService.get('aws.publicBucketName'),\n            Key: file.key,\n          })\n          .promise();\n        await this.privateFilesRepository.delete(fileId);\n      } else {\n        throw new UnauthorizedException();\n      }\n    } else {\n      throw new FileNotFoundException(fileId);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllProductsHandler.html":{"url":"classes/FindAllProductsHandler.html","title":"class - FindAllProductsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllProductsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/handlers/find-all-products.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/handlers/find-all-products.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(undefined: FindAllProductsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/queries/handlers/find-all-products.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindAllProductsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../../../utils/dto/paginated-result.dto';\nimport { Product } from '../../entities/product.entity';\nimport { FindAllProductsQuery } from '../implementations/find-all-products.query';\nimport { getPaginationProps } from '../../../../utils/get-pagination-props';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, Repository } from 'typeorm';\n\n@QueryHandler(FindAllProductsQuery)\nexport class FindAllProductsHandler\n  implements IQueryHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute({\n    ownerId,\n    paginationDto,\n  }: FindAllProductsQuery): Promise> {\n    const { page, limit, skippedItems } = getPaginationProps(paginationDto);\n\n    const where: FindManyOptions['where'] = {};\n    if (ownerId) {\n      where.owner = {\n        id: ownerId,\n      };\n    }\n\n    const [products, productsCount] =\n      await this.productsRepository.findAndCount({\n        where,\n        relations: ['owner'],\n        skip: skippedItems,\n        take: limit,\n      });\n\n    return {\n      totalCount: productsCount,\n      page: page,\n      limit: limit,\n      data: products,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllProductsQuery.html":{"url":"classes/FindAllProductsQuery.html","title":"class - FindAllProductsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllProductsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/implementations/find-all-products.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ownerId\n                            \n                            \n                                    Public\n                                    Readonly\n                                paginationDto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ownerId: number, paginationDto: PaginationDto)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ownerId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationDto\n                                                  \n                                                        \n                                                                        PaginationDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        paginationDto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationDto } from '../../../../utils/dto/pagination.dto';\n\nexport class FindAllProductsQuery {\n  constructor(\n    public readonly ownerId: number,\n    public readonly paginationDto: PaginationDto,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/find-one-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/find-one-params.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nexport class FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductHandler.html":{"url":"classes/FindProductHandler.html","title":"class - FindProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/handlers/find-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/handlers/find-product.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute(undefined: FindProductQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/queries/handlers/find-product.handler.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { Product } from '../../entities/product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindProductQuery } from '../implementations/find-product.query';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(FindProductQuery)\nexport class FindProductHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n  execute({ productId }: FindProductQuery): Promise {\n    return this.productsRepository.findOne({\n      where: {\n        id: productId,\n      },\n      relations: ['owner'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductQuery.html":{"url":"classes/FindProductQuery.html","title":"class - FindProductQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/implementations/find-product.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                productId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productId: string)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/implementations/find-product.query.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-product.query.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class FindProductQuery {\n  constructor(public readonly productId: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsDto.html":{"url":"classes/GetCommentsDto.html","title":"class - GetCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/dto/get-comments.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                postId\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/get-comments.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional } from 'class-validator';\nimport { PaginationDto } from '../../../utils/dto/pagination.dto';\n\nexport class GetCommentsDto extends PaginationDto {\n  @Type(() => Number)\n  @IsOptional()\n  postId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsHandler.html":{"url":"classes/GetCommentsHandler.html","title":"class - GetCommentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/queries/handlers/get-comments.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/queries/handlers/get-comments.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(undefined: GetCommentsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/queries/handlers/get-comments.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetCommentsQuery } from '../implementations/get-comments.query';\nimport { Comment } from '../../entities/comment.entity';\nimport { FindManyOptions, Repository } from 'typeorm';\nimport { PaginatedResultDto } from '../../../../utils/dto/paginated-result.dto';\nimport { getPaginationProps } from '../../../../utils/get-pagination-props';\n\n@QueryHandler(GetCommentsQuery)\nexport class GetCommentsHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Comment) private commentsRepository: Repository,\n  ) {}\n\n  async execute({\n    postId,\n    paginationDto,\n  }: GetCommentsQuery): Promise> {\n    const { page, limit, skippedItems } = getPaginationProps(paginationDto);\n\n    const where: FindManyOptions['where'] = {};\n    if (postId) {\n      where.post = {\n        id: postId,\n      };\n    }\n\n    const [comments, commentsCount] =\n      await this.commentsRepository.findAndCount({\n        where,\n        relations: ['author'],\n        skip: skippedItems,\n        take: limit,\n      });\n\n    return {\n      totalCount: commentsCount,\n      page: page,\n      limit: limit,\n      data: comments,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsQuery.html":{"url":"classes/GetCommentsQuery.html","title":"class - GetCommentsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/queries/implementations/get-comments.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                paginationDto\n                            \n                            \n                                    Public\n                                    Readonly\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number, paginationDto: PaginationDto)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationDto\n                                                  \n                                                        \n                                                                        PaginationDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        paginationDto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationDto } from '../../../../utils/dto/pagination.dto';\n\nexport class GetCommentsQuery {\n  constructor(\n    public readonly postId: number,\n    public readonly paginationDto: PaginationDto,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductDto.html":{"url":"classes/GetProductDto.html","title":"class - GetProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/get-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                ownerId\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/get-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional } from 'class-validator';\nimport { PaginationDto } from '../../../utils/dto/pagination.dto';\n\nexport class GetProductDto extends PaginationDto {\n  @Type(() => Number)\n  @IsOptional()\n  ownerId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  DiskHealthIndicator,\n  HealthCheck,\n  HealthCheckService,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n    private memoryHealthIndicator: MemoryHealthIndicator,\n    private diskHealthIndicator: DiskHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.healthCheckService.check([\n      () => this.typeOrmHealthIndicator.pingCheck('database'),\n      // the process should not use more than 300MB memory\n      () =>\n        this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n      // The process should not have more than 300MB RSS memory allocated\n      () =>\n        this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n      // the used disk storage should not exceed the 50% of the available space\n      () =>\n        this.diskHealthIndicator.checkStorage('disk health', {\n          thresholdPercent: 0.5,\n          path: '/',\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from '../features/users/users.service';\nimport { Request } from 'express';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.refreshTokenSecret'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from '../features/users/users.service';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.accessTokenSecret'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/two-factor/jwt-two-factor.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/jwt-two-factor.strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../features/users/users.service';\nimport { TokenPayload } from '../token-payload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.accessTokenSecret'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.userId);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isSecondFactorAuthenticated) {\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LocalFile.html":{"url":"entities/LocalFile.html","title":"entity - LocalFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LocalFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/entities/local-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filename\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                mimetype\n                            \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class LocalFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  path: string;\n\n  @Column()\n  mimetype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalFileDto.html":{"url":"interfaces/LocalFileDto.html","title":"interface - LocalFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/dto/local-file.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LocalFileDto {\n  filename: string;\n  path: string;\n  mimetype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LocalFilesController.html":{"url":"controllers/LocalFilesController.html","title":"controller - LocalFilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LocalFilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                local-files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDatabaseFileById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatabaseFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatabaseFileById(id: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/local-files/local-files.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Res,\n  StreamableFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { createReadStream } from 'fs';\nimport { join } from 'path';\nimport { Response } from 'express';\nimport { LocalFilesService } from './local-files.service';\n\n@Controller('local-files')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class LocalFilesController {\n  constructor(private readonly localFilesService: LocalFilesService) {}\n\n  @Get(':id')\n  async getDatabaseFileById(\n    @Param('id', ParseIntPipe) id: number,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const file = await this.localFilesService.getFileById(id);\n\n    const stream = createReadStream(join(process.cwd(), file.path));\n\n    response.set({\n      'Content-Disposition': `inline; filename=\"${file.filename}\"`,\n      'Content-Type': file.mimetype,\n    });\n\n    return new StreamableFile(stream);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalFilesInterceptorOptions.html":{"url":"interfaces/LocalFilesInterceptorOptions.html","title":"interface - LocalFilesInterceptorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalFilesInterceptorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fieldName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fileFilter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limits\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileFilter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileFilter:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limits:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, mixin, NestInterceptor, Type } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { diskStorage } from 'multer';\n\ninterface LocalFilesInterceptorOptions {\n  fieldName: string;\n  path?: string;\n  fileFilter?: MulterOptions['fileFilter'];\n  limits?: MulterOptions['limits'];\n}\n\nexport function LocalFilesInterceptor(\n  options: LocalFilesInterceptorOptions,\n): Type {\n  @Injectable()\n  class Interceptor implements NestInterceptor {\n    fileInterceptor: NestInterceptor;\n\n    constructor(configService: ConfigService) {\n      const filesDestination = configService.get('app.fileDestination');\n\n      const destination = `${filesDestination}${options.path}`;\n\n      const multerOptions: MulterOptions = {\n        storage: diskStorage({\n          destination,\n        }),\n        fileFilter: options.fileFilter,\n        limits: options.limits,\n      };\n\n      this.fileInterceptor = new (FileInterceptor(\n        options.fieldName,\n        multerOptions,\n      ))();\n    }\n\n    intercept(...args: Parameters) {\n      return this.fileInterceptor.intercept(...args);\n    }\n  }\n\n  return mixin(Interceptor);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LocalFilesModule.html":{"url":"modules/LocalFilesModule.html","title":"module - LocalFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    LocalFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LocalFilesModule\n\n\n\ncluster_LocalFilesModule_providers\n\n\n\ncluster_LocalFilesModule_exports\n\n\n\n\nLocalFilesService \n\nLocalFilesService \n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nLocalFilesService  -->\n\nLocalFilesModule->LocalFilesService \n\n\n\n\n\nLocalFilesService\n\nLocalFilesService\n\nLocalFilesModule -->\n\nLocalFilesService->LocalFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/local-files/local-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalFilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LocalFilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LocalFilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LocalFile } from './entities/local-file.entity';\nimport { LocalFilesController } from './local-files.controller';\nimport { LocalFilesService } from './local-files.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LocalFile]), ConfigModule],\n  controllers: [LocalFilesController],\n  providers: [LocalFilesService],\n  exports: [LocalFilesService],\n})\nexport class LocalFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalFilesService.html":{"url":"injectables/LocalFilesService.html","title":"injectable - LocalFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteLocalFileWithQueryRunner\n                            \n                            \n                                    Async\n                                getFileById\n                            \n                            \n                                    Async\n                                saveLocalFileData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(localFilesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/local-files/local-files.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        localFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteLocalFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLocalFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileById(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveLocalFileData\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLocalFileData(fileData: LocalFileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileData\n                                    \n                                                LocalFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { LocalFileDto } from './dto/local-file.dto';\nimport { LocalFile } from './entities/local-file.entity';\n\n@Injectable()\nexport class LocalFilesService {\n  constructor(\n    @InjectRepository(LocalFile)\n    private localFilesRepository: Repository,\n  ) {}\n\n  async saveLocalFileData(fileData: LocalFileDto) {\n    const newFile = await this.localFilesRepository.create(fileData);\n    await this.localFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  async getFileById(fileId: number) {\n    const file = await this.localFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n    });\n    if (!file) {\n      throw new NotFoundException();\n    }\n    return file;\n  }\n\n  async deleteLocalFileWithQueryRunner(\n    fileId: number,\n    queryRunner: QueryRunner,\n  ) {\n    await queryRunner.manager.delete(LocalFile, fileId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { User } from '../features/users/entities/user.entity';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Log.html":{"url":"entities/Log.html","title":"entity - Log","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/entities/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                creationDate\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Log {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  creationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({default: 'test@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)@ApiProperty({default: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  @ApiProperty({\n    default: 'test@example.com',\n  })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  @ApiProperty({\n    default: 'password',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CustomLogger } from './custom-logger';\nimport { Log } from './entities/log.entity';\nimport { LogsService } from './logs.service';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([Log])],\n  providers: [CustomLogger, LogsService],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsMiddleware.html":{"url":"injectables/LogsMiddleware.html","title":"injectable - LogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logs.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/logs.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/utils/logs.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LogsMiddleware implements NestMiddleware {\n  private readonly logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction) {\n    response.on('finish', () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(message);\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(message);\n      }\n\n      return this.logger.log(message);\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logs.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateLogDto } from './dto/create-log.dto';\nimport { Log } from './entities/log.entity';\n\n@Injectable()\nexport class LogsService {\n  constructor(\n    @InjectRepository(Log)\n    private logsRepository: Repository,\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = await this.logsRepository.create(log);\n    await this.logsRepository.save(newLog, {\n      data: {\n        isCreatingLogs: true,\n      },\n    });\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObjectWithIdDto.html":{"url":"classes/ObjectWithIdDto.html","title":"class - ObjectWithIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObjectWithIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/object-with-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/object-with-id.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nexport class ObjectWithIdDto {\n  @IsNumber()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedResultDto.html":{"url":"classes/PaginatedResultDto.html","title":"class - PaginatedResultDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedResultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/paginated-result.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                            \n                                totalCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, ValidateNested } from 'class-validator';\n\nexport class PaginatedResultDto {\n  @ValidateNested()\n  data: T[];\n\n  @IsNumber()\n  page: number;\n\n  @IsNumber()\n  limit: number;\n\n  @IsNumber()\n  totalCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsNumber, IsOptional, Min } from 'class-validator';\n\nexport class PaginationDto {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                paragraphs\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('post_authorId_index')@ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, category => category.posts)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Category } from '../../categories/entities/category.entity';\nimport { User } from '../../users/entities/user.entity';\nimport { Comment } from '../../comments/entities/comment.entity';\nimport {\n  Column,\n  Entity,\n  Index,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public title: string;\n\n  @Column()\n  public content: string;\n\n  @Column('text', { array: true, nullable: true })\n  public paragraphs?: string[];\n\n  @Column({ nullable: true })\n  public category?: string;\n\n  @Index('post_authorId_index')\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n\n  @ManyToMany(() => Category, (category: Category) => category.posts)\n  @JoinTable()\n  public categories: Category[];\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.post)\n  public comments: Comment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/exceptions/post-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/posts/exceptions/post-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class PostNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Post with id ${postId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                getAllPosts\n                            \n                            \n                                getPostById\n                            \n                            \n                                getPostsWithParagraph\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \ngetAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostsWithParagraph\n                        \n                    \n                \n            \n            \n                \ngetPostsWithParagraph(paragraph: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('paragraphs/:paragraph')\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraph\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(undefined: FindOneParams, post: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtTwoFactorGuard } from '../../authentication/two-factor/jwt-two-factor.guard';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { PostsService } from './posts.service';\n\n@Controller('posts')\n@ApiTags('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get()\n  getAllPosts() {\n    return this.postsService.getAllPosts();\n  }\n\n  @Get(':id')\n  getPostById(@Param() { id }: FindOneParams) {\n    return this.postsService.getPostById(Number(id));\n  }\n\n  @Get('paragraphs/:paragraph')\n  getPostsWithParagraph(@Param() paragraph: string) {\n    return this.postsService.getPostsWithParagraph(paragraph);\n  }\n\n  @Post()\n  @UseGuards(JwtTwoFactorGuard)\n  async createPost(\n    @Body() post: CreatePostDto,\n    @Req() request: RequestWithUser,\n  ) {\n    return this.postsService.createPost(post, request.user);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtTwoFactorGuard)\n  async updatePost(\n    @Param() { id }: FindOneParams,\n    @Body() post: UpdatePostDto,\n  ) {\n    return this.postsService.updatePost(Number(id), post);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtTwoFactorGuard)\n  async deletePost(@Param() { id }: FindOneParams) {\n    return this.postsService.deletePost(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './entities/post.entity';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './posts.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post])],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostsWithParagraph\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/posts/posts.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts()\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithParagraph\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithParagraph(paragraph: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraph\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, post: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { Post } from './entities/post.entity';\nimport { PostNotFoundException } from './exceptions/post-not-found.exception';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post) private postsRepository: Repository,\n  ) {}\n\n  async getAllPosts() {\n    return this.postsRepository.find({\n      relations: ['author'],\n    });\n  }\n\n  async getPostById(id: number) {\n    const post = await this.postsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['author'],\n    });\n    if (post) {\n      return post;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async getPostsWithParagraph(paragraph: string) {\n    const posts = await this.postsRepository.query(\n      'SELECT * FROM post WHERE $1 = ANY(paragraphs)',\n      [paragraph],\n    );\n    if (posts) {\n      return posts;\n    }\n    throw new NotFoundException('Post with the paragraph is not found!');\n  }\n\n  async createPost(post: CreatePostDto, user: User) {\n    const newPost = await this.postsRepository.create({\n      ...post,\n      author: user,\n    });\n    await this.postsRepository.save(newPost);\n    return newPost;\n  }\n\n  async updatePost(id: number, post: UpdatePostDto) {\n    await this.postsRepository.update(id, post);\n    const updatedPost = await this.postsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['author'],\n    });\n    if (updatedPost) {\n      return updatedPost;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async deletePost(id: number) {\n    const deleteResponse = await this.postsRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new PostNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PrivateFile.html":{"url":"entities/PrivateFile.html","title":"entity - PrivateFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PrivateFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/entities/private-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.files)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class PrivateFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public key: string;\n\n  @ManyToOne(() => User, (owner: User) => owner.files)\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                owner\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.products)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../users/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BookProperties } from '../types/book-properties.interface';\nimport { CarProperties } from '../types/car-properties.interface';\n\n@Entity()\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @Column()\n  public name: string;\n\n  @Column({\n    type: 'jsonb',\n    nullable: true,\n  })\n  public properties?: CarProperties | BookProperties;\n\n  @ManyToOne(() => User, (owner: User) => owner.products)\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/exceptions/file-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileId: string)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/exceptions/file-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class ProductNotFoundException extends NotFoundException {\n  constructor(fileId: string) {\n    super(`Product with id ${fileId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: GetProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n  Query,\n  HttpCode,\n} from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { GetProductDto } from './dto/get-product.dto';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { Product } from './entities/product.entity';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\n\n@Controller('products')\n@ApiTags('products')\n@ApiExtraModels(PaginatedResultDto)\n@UseGuards(JwtAuthenticationGuard)\nexport class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @Post()\n  async create(\n    @Body() createProductDto: CreateProductDto,\n    @Req() request: RequestWithUser,\n  ): Promise {\n    const user = request.user;\n    return this.productsService.create(createProductDto, user);\n  }\n\n  @Get()\n  async findAll(\n    @Query() { ownerId, page = 1, limit = 20 }: GetProductDto,\n  ): Promise> {\n    return this.productsService.findAll(ownerId, { page, limit });\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise {\n    return this.productsService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n    @Req() request: RequestWithUser,\n  ) {\n    const user = request.user;\n    return this.productsService.update(id, updateProductDto, user);\n  }\n\n  @Delete(':id')\n  @HttpCode(204)\n  remove(@Param('id') id: string, @Req() request: RequestWithUser) {\n    const user = request.user;\n    return this.productsService.remove(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService\n\nProductsService\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { ProductsController } from './products.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './entities/product.entity';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { CreateProductHandler } from './commands/handlers/create-product.handler';\nimport { FindAllProductsHandler } from './queries/handlers/find-all-products.handler';\nimport { FindProductHandler } from './queries/handlers/find-product.handler';\nimport { UpdateProductHandler } from './commands/handlers/update-product.handler';\nimport { DeleteProductHandler } from './commands/handlers/delete-product.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), CqrsModule],\n  controllers: [ProductsController],\n  providers: [\n    ProductsService,\n    CreateProductHandler,\n    FindAllProductsHandler,\n    FindProductHandler,\n    UpdateProductHandler,\n    DeleteProductHandler,\n  ],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commandBus: CommandBus, queryBus: QueryBus)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/products.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commandBus\n                                                  \n                                                        \n                                                                    CommandBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBus\n                                                  \n                                                        \n                                                                    QueryBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(ownerId: number, paginationDto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paginationDto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { PaginationDto } from '../../utils/dto/pagination.dto';\nimport { User } from '../users/entities/user.entity';\nimport { CreateProductCommand } from './commands/implementations/create-product.command';\nimport { DeleteProductCommand } from './commands/implementations/delete-product.command';\nimport { UpdateProductCommand } from './commands/implementations/update-product.command';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { FindAllProductsQuery } from './queries/implementations/find-all-products.query';\nimport { FindProductQuery } from './queries/implementations/find-product.query';\n\n@Injectable()\nexport class ProductsService {\n  constructor(private commandBus: CommandBus, private queryBus: QueryBus) {}\n\n  async create(\n    createProductDto: CreateProductDto,\n    owner: User,\n  ): Promise {\n    return this.commandBus.execute(\n      new CreateProductCommand(createProductDto, owner),\n    );\n  }\n\n  async findAll(\n    ownerId: number,\n    paginationDto: PaginationDto,\n  ): Promise> {\n    return this.queryBus.execute(\n      new FindAllProductsQuery(ownerId, paginationDto),\n    );\n  }\n\n  async findOne(id: string): Promise {\n    return this.queryBus.execute(new FindProductQuery(id));\n  }\n\n  async update(id: string, updateProductDto: UpdateProductDto, owner: User) {\n    return this.commandBus.execute(\n      new UpdateProductCommand(id, updateProductDto, owner),\n    );\n  }\n\n  remove(id: string, owner: User) {\n    return this.commandBus.execute(new DeleteProductCommand(id, owner));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PublicFile.html":{"url":"entities/PublicFile.html","title":"entity - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/entities/public-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class PublicFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public url: string;\n\n  @Column()\n  public key: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Has to match a regular expression: /^\\+[1-9]\\d{1,14}$/', example: '+123123123123'})@IsOptional()@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n  IsOptional,\n} from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @ApiProperty({\n    description: 'Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/',\n    example: '+123123123123',\n  })\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/request-with-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '../features/users/entities/user.entity';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n  isSecondFactorAuthenticated?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TwoFactorAuthenticationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthenticationCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/two-factor-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOffTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOffTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOffTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-off')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Res,\n  UseGuards,\n  Req,\n  Body,\n  UnauthorizedException,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { UsersService } from '../../features/users/users.service';\nimport { AuthenticationService } from '../authentication.service';\nimport { JwtAuthenticationGuard } from '../jwt-authentication.guard';\nimport { RequestWithUser } from '../request-with-user.interface';\nimport { TwoFactorAuthenticationCodeDto } from './dto/two-factor-authentication-code.dto';\nimport { TwoFactorAuthenticationService } from './two-factor-authentication.service';\n\n@Controller('2fa')\n@ApiTags('authentication-2fa')\nexport class TwoFactorAuthenticationController {\n  constructor(\n    private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly authenticationService: AuthenticationService,\n  ) {}\n\n  @Post('generate')\n  @UseGuards(JwtAuthenticationGuard)\n  async register(@Res() response: Response, @Req() request: RequestWithUser) {\n    const { otpauthUrl } =\n      await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(\n        request.user,\n      );\n\n    response.setHeader('content-type', 'image/png');\n\n    return this.twoFactorAuthenticationService.pipeQrCodeStream(\n      response,\n      otpauthUrl,\n    );\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOnTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('turn-off')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOffTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOffTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('authenticate')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async authenticate(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(\n        request.user.id,\n        true,\n      );\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/two-factor-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/two-factor/two-factor-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { authenticator } from 'otplib';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\nimport { User } from '../../features/users/entities/user.entity';\nimport { UsersService } from '../../features/users/users.service';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async generateTwoFactorAuthenticationSecret(user: User) {\n    const secret = authenticator.generateSecret();\n\n    const otpauthUrl = authenticator.keyuri(\n      user.email,\n      this.configService.get('app.fileDestination'),\n      secret,\n    );\n\n    await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n    return {\n      secret,\n      otpauthUrl,\n    };\n  }\n\n  public isTwoFactorAuthenticationCodeValid(\n    twoFactorAuthenticationCode: string,\n    user: User,\n  ) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret,\n    });\n  }\n\n  public async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    return toFileStream(stream, otpauthUrl);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmConfig.html":{"url":"classes/TypeOrmConfig.html","title":"class - TypeOrmConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/typeorm.config.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getOrmConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getOrmConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrmConfig(configService: ConfigService)\n                \n            \n\n\n            \n                \n                    Defined in src/config/typeorm.config.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configService\n                                    \n                                            ConfigService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService, registerAs } from '@nestjs/config';\nimport {\n  TypeOrmModuleAsyncOptions,\n  TypeOrmModuleOptions,\n} from '@nestjs/typeorm';\nimport { DatabaseLogger } from '../database/database-logger';\n\nclass TypeOrmConfig {\n  static getOrmConfig(configService: ConfigService): TypeOrmModuleOptions {\n    const options: TypeOrmModuleOptions = {\n      type: 'postgres',\n      host: configService.get('database.host'),\n      port: configService.get('database.port'),\n      username: configService.get('database.username'),\n      password: configService.get('database.password'),\n      database: configService.get('database.name'),\n      entities: ['dist/**/*.entity{.ts,.js}'],\n      synchronize: configService.get('typeorm.synchronize'),\n    };\n\n    const isLogging = configService.get('typeorm.logging') || false;\n    if (!isLogging) {\n      return options;\n    }\n\n    return {\n      ...options,\n      logger: new DatabaseLogger(),\n    };\n  }\n}\n\nexport const typeormModuleOptions: TypeOrmModuleAsyncOptions = {\n  imports: [ConfigModule],\n  useFactory: async (\n    configService: ConfigService,\n  ): Promise => TypeOrmConfig.getOrmConfig(configService),\n  inject: [ConfigService],\n};\n\nexport default registerAs('typeorm', () => ({\n  synchronize: process.env.TYPEORM_SYNCHRONIZE === 'false' ? false : true,\n  logging: process.env.TYPEORM_LOGGING === 'true' ? true : false,\n}));\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/update-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/update-category.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsOptional, IsString, IsNotEmpty } from 'class-validator';\n\nexport class UpdateCategoryDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsOptional, IsString, IsNotEmpty } from 'class-validator';\n\nexport class UpdatePostDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductCommand.html":{"url":"classes/UpdateProductCommand.html","title":"class - UpdateProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/update-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                product\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, product: UpdateProductDto, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        product\n                                                  \n                                                        \n                                                                        UpdateProductDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UpdateProductDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { UpdateProductDto } from '../../dto/update-product.dto';\n\nexport class UpdateProductCommand {\n  constructor(\n    public readonly id: string,\n    public readonly product: UpdateProductDto,\n    public readonly owner: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/update-product.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateProductDto } from './create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductHandler.html":{"url":"classes/UpdateProductHandler.html","title":"class - UpdateProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/update-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/update-product.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: UpdateProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/update-product.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                UpdateProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { ProductNotFoundException } from '../../exceptions/file-not-found.exception';\nimport { UpdateProductCommand } from '../implementations/update-product.command';\n\n@CommandHandler(UpdateProductCommand)\nexport class UpdateProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: UpdateProductCommand): Promise {\n    const { id, product, owner } = command;\n    const oldProduct = await this.productsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['owner'],\n    });\n    if (oldProduct) {\n      if (oldProduct.owner && oldProduct.owner.id === owner.id) {\n        await this.productsRepository.update(id, product);\n        const updatedProduct = await this.productsRepository.findOne({\n          where: {\n            id,\n          },\n          relations: ['owner'],\n        });\n        if (updatedProduct) {\n          return updatedProduct;\n        }\n      } else {\n        throw new UnauthorizedException();\n      }\n    }\n    throw new ProductNotFoundException(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                address\n                            \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                avatarId\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                files\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                    Public\n                                    Optional\n                                products\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LocalFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'avatarId'})@OneToOne(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatarId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivateFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { Address } from './address.entity';\nimport { Post } from '../../posts/entities/post.entity';\nimport { PrivateFile } from '../../files/entities/private-file.entity';\nimport { Product } from '../../products/entities/product.entity';\nimport { LocalFile } from 'src/features/local-files/entities/local-file.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  public id?: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @OneToOne(() => Address, {\n    eager: true,\n    cascade: true,\n  })\n  @JoinColumn()\n  public address?: Address;\n\n  @Column()\n  @Exclude()\n  public password: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts?: Post[];\n\n  // use Amazon S3 to store avatar publicly\n  // @OneToOne(() => PublicFile, {\n  //   eager: true,\n  //   nullable: true,\n  // })\n  // @JoinColumn()\n  // public avatar?: PublicFile;\n\n  // store file directly to postgres database\n  // @JoinColumn({ name: 'avatarId' })\n  // @OneToOne(() => DatabaseFile, {\n  //   nullable: true,\n  // })\n  // public avatar?: DatabaseFile;\n\n  @JoinColumn({ name: 'avatarId' })\n  @OneToOne(() => LocalFile, {\n    nullable: true,\n  })\n  public avatar?: LocalFile;\n\n  // this field is necessary only for storing files to postgres database\n  @Column({ nullable: true })\n  public avatarId?: number;\n\n  @OneToMany(() => PrivateFile, (file: PrivateFile) => file.owner)\n  public files?: PrivateFile[];\n\n  @OneToMany(() => Product, (product: Product) => product.owner)\n  public products?: Product[];\n\n  @Column({ nullable: true })\n  @Exclude()\n  public twoFactorAuthenticationSecret?: string;\n\n  @Column({ default: false })\n  public isTwoFactorAuthenticationEnabled: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/exceptions/user-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/users/exceptions/user-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class UserNotFoundException extends NotFoundException {\n  constructor(userId: number) {\n    super(`User with id ${userId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAvatar\n                            \n                            \n                                addAvatarOnAmazonS3\n                            \n                            \n                                addAvatarOnPostgres\n                            \n                            \n                                addPrivateFile\n                            \n                            \n                                deleteAvatar\n                            \n                            \n                                deletePrivateFile\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatar\n                        \n                    \n                \n            \n            \n                \naddAvatar(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatarOnAmazonS3\n                        \n                    \n                \n            \n            \n                \naddAvatarOnAmazonS3(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar/amazonS3')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatarOnPostgres\n                        \n                    \n                \n            \n            \n                \naddAvatarOnPostgres(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar/postgres')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \naddPrivateFile(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('files')@ApiConsumes('multipart/form-data')@ApiBody({description: 'Upload a new private file for the logged in user', type: FileUploadDto})@ApiCreatedResponse({description: 'A private file for this user has been uploaded successfully!', type: PrivateFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \ndeleteAvatar(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('avatar')@ApiOkResponse({description: 'Avatar for this user has been deleted successfully!'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePrivateFile\n                        \n                    \n                \n            \n            \n                \ndeletePrivateFile(request: RequestWithUser, undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('files/:id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a product that exists in the database', type: String})@ApiOkResponse({description: 'A private file of the user has been deleted successfully!'})@ApiNotFoundResponse({description: 'A file with given id does not exist.'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:247\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'All the users have been fetched successfully!', type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':email')@ApiParam({name: 'email', required: true, description: 'Should be a valid email for the user to fetch', type: String})@ApiOkResponse({description: 'A user with the email has been fetched successfully!', type: User})@ApiNotFoundResponse({description: 'A user with given email does not exist.'})\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files')@ApiOkResponse({description: 'All the private files of the user have been fetched successfully!', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(request: RequestWithUser, undefined: FindOneParams, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a file that exists in the database', type: String})@ApiOkResponse({description: 'A private file of the user has been fetched successfully!', type: FileResponseDto})@ApiNotFoundResponse({description: 'A file with given id does not exist.'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Req,\n  Res,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { UsersService } from './users.service';\nimport { Express, Response } from 'express';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport {\n  ApiBody,\n  ApiConsumes,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { FileUploadDto } from './dto/file-upload.dto';\nimport { User } from './entities/user.entity';\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { PublicFile } from '../files/entities/public-file.entity';\nimport { PrivateFile } from '../files/entities/private-file.entity';\nimport { LocalFilesInterceptor } from '../local-files/local-files.interceptor';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @ApiOkResponse({\n    description: 'All the users have been fetched successfully!',\n    type: [User],\n  })\n  findAll() {\n    return this.usersService.getAllUsers();\n  }\n\n  @Get('files')\n  @ApiOkResponse({\n    description:\n      'All the private files of the user have been fetched successfully!',\n    type: [FileResponseDto],\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllPrivateFiles(@Req() request: RequestWithUser) {\n    return this.usersService.getAllPrivateFiles(request.user.id);\n  }\n\n  @Get(':email')\n  @ApiParam({\n    name: 'email',\n    required: true,\n    description: 'Should be a valid email for the user to fetch',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A user with the email has been fetched successfully!',\n    type: User,\n  })\n  @ApiNotFoundResponse({\n    description: 'A user with given email does not exist.',\n  })\n  findOne(@Param('email') email: string) {\n    return this.usersService.getByEmail(email);\n  }\n\n  @Get('files/:id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a file that exists in the database',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A private file of the user has been fetched successfully!',\n    type: FileResponseDto,\n  })\n  @ApiNotFoundResponse({\n    description: 'A file with given id does not exist.',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  async getPrivateFile(\n    @Req() request: RequestWithUser,\n    @Param() { id }: FindOneParams,\n    @Res() response: Response,\n  ) {\n    const file = await this.usersService.getPrivateFile(\n      request.user.id,\n      Number(id),\n    );\n    file.stream.pipe(response);\n  }\n\n  @Post('avatar/amazonS3')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addAvatarOnAmazonS3(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatarUsingAmazonS3(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Post('avatar/postgres')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addAvatarOnPostgres(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatarInPGsql(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Post('avatar')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(\n    LocalFilesInterceptor({\n      fieldName: 'file',\n      path: '/avatars',\n      fileFilter: (request, file, callback) => {\n        if (!file.mimetype.includes('image')) {\n          return callback(\n            new BadRequestException('Provide a valid image'),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n      limits: {\n        fileSize: Math.pow(1024, 2), // 1 MB\n      },\n    }),\n  )\n  addAvatar(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatar(request.user.id, {\n      path: file.path,\n      filename: file.originalname,\n      mimetype: file.mimetype,\n    });\n  }\n\n  @Post('files')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Upload a new private file for the logged in user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'A private file for this user has been uploaded successfully!',\n    type: PrivateFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addPrivateFile(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addPrivateFile(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Delete('avatar')\n  @ApiOkResponse({\n    description: 'Avatar for this user has been deleted successfully!',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  deleteAvatar(@Req() request: RequestWithUser) {\n    return this.usersService.deleteAvatar(request.user.id);\n  }\n\n  @Delete('files/:id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a product that exists in the database',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A private file of the user has been deleted successfully!',\n  })\n  @ApiNotFoundResponse({\n    description: 'A file with given id does not exist.',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  deletePrivateFile(\n    @Req() request: RequestWithUser,\n    @Param() { id }: FindOneParams,\n  ) {\n    return this.usersService.deletePrivateFile(request.user.id, Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseFilesModule->UsersModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nUsersModule -->\n\nLocalFilesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseFilesModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            LocalFilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { FilesModule } from '../files/files.module';\nimport { DatabaseFilesModule } from '../database-files/database-files.module';\nimport { LocalFilesModule } from '../local-files/local-files.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    FilesModule,\n    DatabaseFilesModule,\n    LocalFilesModule,\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addAvatarInPGsql\n                            \n                            \n                                    Async\n                                addAvatarUsingAmazonS3\n                            \n                            \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                deletePrivateFile\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                setTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOffTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, filesService: FilesService, databaseFilesService: DatabaseFilesService, localFilesService: LocalFilesService, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/features/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        databaseFilesService\n                                                  \n                                                        \n                                                                        DatabaseFilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        localFilesService\n                                                  \n                                                        \n                                                                        LocalFilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: number, fileData: LocalFileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileData\n                                    \n                                                LocalFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatarInPGsql\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatarInPGsql(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatarUsingAmazonS3\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatarUsingAmazonS3(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePrivateFile(userId: number, fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(userId: number, fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTwoFactorAuthenticationSecret(secret: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOffTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOffTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Connection, Repository } from 'typeorm';\nimport { FileNotFoundException } from '../files/exceptions/file-not-found.exception';\nimport { FilesService } from '../files/files.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { User } from './entities/user.entity';\nimport { UserNotFoundException } from './exceptions/user-not-found.exception';\nimport * as bcrypt from 'bcrypt';\nimport { DatabaseFilesService } from '../database-files/database-files.service';\nimport { LocalFileDto } from '../local-files/dto/local-file.dto';\nimport { LocalFilesService } from '../local-files/local-files.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) private usersRepository: Repository,\n    private readonly filesService: FilesService,\n    private readonly databaseFilesService: DatabaseFilesService,\n    private readonly localFilesService: LocalFilesService,\n    private connection: Connection,\n  ) {}\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken,\n    );\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n\n  async setTwoFactorAuthenticationSecret(secret: string, userId: number) {\n    return this.usersRepository.update(userId, {\n      twoFactorAuthenticationSecret: secret,\n    });\n  }\n\n  async turnOnTwoFactorAuthentication(userId: number) {\n    return this.usersRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: true,\n    });\n  }\n\n  async turnOffTwoFactorAuthentication(userId: number) {\n    return this.usersRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: false,\n    });\n  }\n\n  async getAllUsers() {\n    const users = await this.usersRepository.find();\n    return users;\n  }\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOne({\n      where: {\n        id,\n      },\n    });\n    if (user) {\n      return user;\n    }\n    throw new UserNotFoundException(id);\n  }\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOne({\n      where: {\n        email,\n      },\n    });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const newUser = await this.usersRepository.create(createUserDto);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  // Upload files to Amazon S3\n  async addAvatarUsingAmazonS3(\n    userId: number,\n    imageBuffer: Buffer,\n    filename: string,\n  ) {\n    const avatar = await this.filesService.uploadPublicFile(\n      imageBuffer,\n      filename,\n    );\n    const user = await this.getById(userId);\n    await this.usersRepository.update(userId, {\n      ...user,\n      avatar,\n    });\n    return avatar;\n  }\n\n  // Upload files to Postgres database directly\n  async addAvatarInPGsql(\n    userId: number,\n    imageBuffer: Buffer,\n    filename: string,\n  ) {\n    const queryRunner = this.connection.createQueryRunner();\n\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n\n    try {\n      const user = await queryRunner.manager.findOne(User, {\n        where: {\n          id: userId,\n        },\n      });\n      const currentAvatarId = user.avatarId;\n      const avatar =\n        await this.databaseFilesService.uploadDatabaseFileWithQueryRunner(\n          imageBuffer,\n          filename,\n          queryRunner,\n        );\n\n      await queryRunner.manager.update(User, userId, {\n        avatarId: avatar.id,\n      });\n\n      if (currentAvatarId) {\n        await this.databaseFilesService.deleteFileWithQueryRunner(\n          currentAvatarId,\n          queryRunner,\n        );\n      }\n\n      await queryRunner.commitTransaction();\n      return avatar;\n    } catch {\n      await queryRunner.rollbackTransaction();\n      throw new InternalServerErrorException();\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  async addAvatar(userId: number, fileData: LocalFileDto) {\n    const avatar = await this.localFilesService.saveLocalFileData(fileData);\n    await this.usersRepository.update(userId, {\n      avatarId: avatar.id,\n    });\n  }\n\n  async deleteAvatar(userId: number) {\n    const queryRunner = this.connection.createQueryRunner();\n\n    const user = await this.getById(userId);\n    const fileId = user.avatarId;\n    if (fileId) {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n\n      try {\n        await queryRunner.manager.update(User, userId, {\n          ...user,\n          avatarId: null,\n        });\n        await this.localFilesService.deleteLocalFileWithQueryRunner(\n          fileId,\n          queryRunner,\n        );\n        await queryRunner.commitTransaction();\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n        throw new InternalServerErrorException();\n      } finally {\n        await queryRunner.release();\n      }\n    } else {\n      throw new FileNotFoundException(fileId);\n    }\n  }\n\n  async getPrivateFile(userId: number, fileId: number) {\n    const file = await this.filesService.getPrivateFile(fileId);\n    if (file.info.owner.id === userId) {\n      return file;\n    }\n    throw new UnauthorizedException();\n  }\n\n  async getAllPrivateFiles(userId: number) {\n    const userWithFiles = await this.usersRepository.findOne({\n      where: {\n        id: userId,\n      },\n      relations: ['files'],\n    });\n    if (userWithFiles) {\n      return Promise.all(\n        userWithFiles.files.map(async (file) => {\n          const url = await this.filesService.generatePresignedUrl(file.key);\n          return {\n            ...file,\n            url,\n          };\n        }),\n      );\n    }\n    throw new UserNotFoundException(userId);\n  }\n\n  async addPrivateFile(userId: number, imageBuffer: Buffer, filename: string) {\n    return this.filesService.uploadPrivateFile(imageBuffer, userId, filename);\n  }\n\n  async deletePrivateFile(userId: number, fileId: number) {\n    await this.filesService.deletePrivateFile(fileId, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/local-authentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/request-with-user.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/tests/user.mock.ts\n            \n            variable\n            mockedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/token-payload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/two-factor-authentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/two-factor-authentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            class\n            TypeOrmConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeormModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database-logger.ts\n            \n            class\n            DatabaseLogger\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/env.validation.ts\n            \n            class\n            EnvironmentVariables\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/env.validation.ts\n            \n            function\n            validate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/features/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/categories/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/categories/exceptions/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/comments/commands/handlers/create-comment.handler.ts\n            \n            class\n            CreateCommentHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/commands/implementations/create-comment.command.ts\n            \n            class\n            CreateCommentCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/dto/get-comments.dto.ts\n            \n            class\n            GetCommentsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/comments/queries/handlers/get-comments.handler.ts\n            \n            class\n            GetCommentsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/queries/implementations/get-comments.query.ts\n            \n            class\n            GetCommentsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/database-files/database-files.controller.ts\n            \n            controller\n            DatabaseFilesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/database-files/database-files.service.ts\n            \n            injectable\n            DatabaseFilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/database-files/entities/database-file.entity.ts\n            \n            entity\n            DatabaseFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/files/entities/private-file.entity.ts\n            \n            entity\n            PrivateFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/files/entities/public-file.entity.ts\n            \n            entity\n            PublicFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/files/exceptions/file-not-found.exception.ts\n            \n            class\n            FileNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/local-files/dto/local-file.dto.ts\n            \n            interface\n            LocalFileDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/local-files/entities/local-file.entity.ts\n            \n            entity\n            LocalFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.controller.ts\n            \n            controller\n            LocalFilesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.interceptor.ts\n            \n            interface\n            LocalFilesInterceptorOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.interceptor.ts\n            \n            function\n            LocalFilesInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.service.ts\n            \n            injectable\n            LocalFilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/posts/exceptions/post-not-found.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/create-product.handler.ts\n            \n            class\n            CreateProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/delete-product.handler.ts\n            \n            class\n            DeleteProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/update-product.handler.ts\n            \n            class\n            UpdateProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/create-product.command.ts\n            \n            class\n            CreateProductCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/delete-product.command.ts\n            \n            class\n            DeleteProductCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/update-product.command.ts\n            \n            class\n            UpdateProductCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/products/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/dto/get-product.dto.ts\n            \n            class\n            GetProductDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/products/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/products/exceptions/file-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/features/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/products/queries/handlers/find-all-products.handler.ts\n            \n            class\n            FindAllProductsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/queries/handlers/find-product.handler.ts\n            \n            class\n            FindProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/queries/implementations/find-all-products.query.ts\n            \n            class\n            FindAllProductsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/queries/implementations/find-product.query.ts\n            \n            class\n            FindProductQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/types/book-properties.interface.ts\n            \n            interface\n            BookProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/types/car-properties.interface.ts\n            \n            interface\n            CarProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-upload-multiple.dto.ts\n            \n            class\n            FileUploadMultipleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/features/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/dto/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/entities/log.entity.ts\n            \n            entity\n            Log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/dto/find-one-params.dto.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/dto/object-with-id.dto.ts\n            \n            class\n            ObjectWithIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/dto/paginated-result.dto.ts\n            \n            class\n            PaginatedResultDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/exceptions-logger.filter.ts\n            \n            class\n            ExceptionsLoggerFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/exclude-null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/get-log-levels.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-pagination-props.ts\n            \n            variable\n            getPaginationProps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logs.middleware.ts\n            \n            injectable\n            LogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/mocks/config.service.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mocks/jwt.service.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/recursively-strip-null-values.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.4\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.4.4\n        \n            @nestjs/cqrs : ^8.0.4\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : ^1.0.1\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.4\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/terminus : ^8.0.6\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            aws-sdk : ^2.1128.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            qrcode : ^1.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.5.5\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.3.6\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Environment   (src/.../env.validation.ts)\n                        \n                        \n                            PostgresErrorCode   (src/.../postgres-error-codes.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/env.validation.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Local\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n    src/database/postgres-error-codes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../get-log-levels.ts)\n                        \n                        \n                            LocalFilesInterceptor   (src/.../local-files.interceptor.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../recursively-strip-null-values.ts)\n                        \n                        \n                            validate   (src/.../env.validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/get-log-levels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/features/local-files/local-files.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LocalFilesInterceptor\n                        \n                    \n                \n            \n            \n                \nLocalFilesInterceptor(options: LocalFilesInterceptorOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                LocalFilesInterceptorOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/recursively-strip-null-values.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recursivelyStripNullValues\n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/env.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(config: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nNest framework TypeScript starter repository with custom setup maintaining industry standard best practices. Just clone and start building without worrying about anything. Focus on the product not the setup.\nOverview\n\nconfig/ setup - separated segment for each config\napp.config.ts\naws.config.ts\ndatabase.config.ts\njwt.config.ts\ntypeorm.config.ts\n\n\nauthentication module - JWT token based cookie authentication out of the box\ndatabase module - Typeorm\nAPI validation and serialization\ncustom pagination (page, limit) - check the src/features/comments module\nCQRS - check the src/features/comments module\nOut of the box file upload feature module to Amazon S3 (both private and public)\nCQRS + pagination - a complete module => src/features/products\nSwagger Open API specification setup out of the box - check the src/features/users/users.controller.ts for examples\nPostgreSQL database file storing support - check the avatar upload of users.services.ts and src/features/database-files\nSoft Delete example - check the src/features/categories module\nTwo factor authentication setup out of the box - use JwtTwoFactorGuard when some specific endpoints need 2FA\nLogging with built-in logger and TypeORM is configurable through .env - TYPEORM_LOGGING=true - specify false to disable database logging\nHealth module\n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LocalFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_DatabaseFilesModule\n\n\n\ncluster_DatabaseFilesModule_exports\n\n\n\ncluster_DatabaseFilesModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_LocalFilesModule\n\n\n\ncluster_LocalFilesModule_exports\n\n\n\ncluster_LocalFilesModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseFilesModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseFilesModule->AppModule\n\n\n\n\n\nDatabaseFilesService \n\nDatabaseFilesService \n\nDatabaseFilesService  -->\n\nDatabaseFilesModule->DatabaseFilesService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nUsersModule -->\n\nLocalFilesModule->UsersModule\n\n\n\nAppModule -->\n\nLocalFilesModule->AppModule\n\n\n\n\n\nLocalFilesService \n\nLocalFilesService \n\nLocalFilesService  -->\n\nLocalFilesModule->LocalFilesService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nDatabaseFilesService\n\nDatabaseFilesService\n\nDatabaseFilesModule -->\n\nDatabaseFilesService->DatabaseFilesModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nLocalFilesService\n\nLocalFilesService\n\nLocalFilesModule -->\n\nLocalFilesService->LocalFilesModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    45 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getPaginationProps   (src/.../get-pagination-props.ts)\n                        \n                        \n                            mockedConfigService   (src/.../config.service.ts)\n                        \n                        \n                            mockedJwtService   (src/.../jwt.service.ts)\n                        \n                        \n                            mockedUser   (src/.../user.mock.ts)\n                        \n                        \n                            typeormModuleOptions   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/get-pagination-props.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getPaginationProps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (paginationDto: PaginationDto) => {\n  if (Object.keys(paginationDto).length === 0) {\n    return {\n      page: 1,\n      limit: 20,\n      skippedItems: 0,\n    };\n  }\n\n  const page = Number(paginationDto.page);\n  const limit = Number(paginationDto.limit);\n  const skippedItems = (page - 1) * limit;\n\n  return {\n    page,\n    limit: limit > 20 ? 20 : limit,\n    skippedItems,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get(key: string) {\n    switch (key) {\n      case 'JWT_EXPIRATION_TIME':\n        return '3600';\n    }\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedJwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  sign: () => '',\n}\n                    \n                \n\n\n        \n    \n\n    src/authentication/tests/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: 1,\n  email: 'user@email.com',\n  name: 'John',\n  password: 'hash',\n  address: {\n    id: 1,\n    street: 'streetName',\n    city: 'cityName',\n    country: 'countryName',\n  },\n  isTwoFactorAuthenticationEnabled: false,\n}\n                    \n                \n\n\n        \n    \n\n    src/config/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeormModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleAsyncOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  imports: [ConfigModule],\n  useFactory: async (\n    configService: ConfigService,\n  ): Promise => TypeOrmConfig.getOrmConfig(configService),\n  inject: [ConfigService],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
