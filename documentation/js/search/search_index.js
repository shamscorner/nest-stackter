var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,1.788,1,3.087]],["body/entities/Address.html",[0,2.526,1,4.361,2,2.455,3,0.084,4,0.084,5,0.067,6,4.236,7,0.304,8,1.225,9,3.547,10,6.483,11,6.483,12,1.904,13,6.483,14,0.938,15,2.695,16,0.469,17,0.008,18,1.697,19,1.748,20,4.734,21,0.628,22,4.776,23,4.776,24,1.681,25,4.017,26,4.776,27,4.776,28,4.236,29,6.453,30,4.776,31,0.182,32,5.724,33,1.666,34,4.776,35,0.084,36,0.201,37,0.005,38,0.005]],["title/controllers/AppController.html",[39,1.492,40,3.458]],["body/controllers/AppController.html",[3,0.086,4,0.086,5,0.069,7,0.312,17,0.008,18,1.324,19,1.049,21,0.377,31,0.185,35,0.086,36,0.206,37,0.005,38,0.005,39,2.148,40,4.976,41,1.639,42,4.354,43,1.52,44,7.916,45,4.908,46,1.113,47,6.573,48,0.729,49,3.584,50,1.969,51,3.989,52,2.523,53,3.716,54,3.989,55,2.551,56,4.976,57,4.908,58,6.573,59,4.908,60,6.573,61,4.908,62,6.573,63,4.908,64,6.573,65,4.908,66,6.573,67,3.989,68,1.229,69,3.716,70,4.354,71,4.354]],["title/modules/AppModule.html",[72,1.316,73,3.458]],["body/modules/AppModule.html",[3,0.045,4,0.045,5,0.037,14,0.378,16,0.149,17,0.008,21,0.199,31,0.257,35,0.045,36,0.109,37,0.003,38,0.003,40,3.875,41,1.375,43,0.6,46,0.589,48,0.386,50,1.042,72,1.187,73,7.009,74,1.042,75,1.782,76,2.303,77,2.303,78,4.567,79,4.817,80,4.817,81,4.817,82,4.567,83,4.817,84,4.567,85,4.353,86,4.817,87,4.567,88,4.817,89,4.817,90,4.567,91,4.817,92,4.817,93,4.817,94,4.166,95,1.881,96,1.186,97,1.154,98,2.597,99,1.737,100,2.597,101,4.118,102,5.825,103,2.597,104,0.474,105,0.402,106,2.597,107,1.755,108,2.539,109,4.118,110,1.479,111,2.597,112,2.597,113,2.653,114,2.597,115,2.303,116,2.303,117,2.597,118,2.597,119,2.597,120,4.118,121,2.597,122,4.118,123,2.597,124,3.118,125,2.303,126,4.118,127,2.597,128,4.118,129,2.597,130,4.118,131,2.597,132,4.118,133,2.597,134,5.118,135,4.118,136,2.11,137,2.597,138,2.597,139,2.597,140,1.755,141,3.653,142,2.303,143,1.537,144,2.597,145,1.966,146,2.597,147,2.597,148,2.11,149,2.597,150,2.11,151,3.347,152,1.851,153,2.597,154,1.672,155,2.303,156,2.597,157,1.851,158,2.597,159,2.597,160,2.597,161,2.597,162,2.475,163,2.597,164,2.597,165,2.597,166,2.597,167,1.22,168,5.825,169,5.825,170,2.597,171,1.966,172,1.966,173,2.597]],["title/controllers/AuthenticationController.html",[39,1.492,174,3.458]],["body/controllers/AuthenticationController.html",[3,0.053,4,0.053,5,0.043,7,0.194,14,0.997,15,2.171,16,0.414,17,0.008,19,1.465,21,0.527,31,0.232,35,0.053,36,0.128,37,0.004,38,0.004,39,0.999,41,1.02,43,1.081,46,1.555,48,0.454,55,2.171,68,1.716,104,1.25,105,1.062,151,2.484,154,1.969,174,3.54,175,2.711,176,1.523,177,1.969,178,3.54,179,2.292,180,4.676,181,4.676,182,3.16,183,3.8,184,2.711,185,4.829,186,3.057,187,3.057,188,4.045,189,3.057,190,3.057,191,4.3,192,3.057,193,1.788,194,3.057,195,3.057,196,3.057,197,3.057,198,3.057,199,3.057,200,2.711,201,4.299,202,4.676,203,3.057,204,4.148,205,1.68,206,2.314,207,1.323,208,1.884,209,1.741,210,4.148,211,1.68,212,1.396,213,3.658,214,2.484,215,2.92,216,1.969,217,3.361,218,2.065,219,3.057,220,2.711,221,1.68,222,2.882,223,3.012,224,2.314,225,3.057,226,2.314,227,1.809,228,1.969,229,3.057,230,2.314,231,0.75,232,1.67,233,1.778,234,3.012,235,3.057,236,3.16,237,3.057,238,3.057,239,3.057,240,4.816,241,3.057,242,3.8,243,4.098,244,3.057,245,2.322,246,3.057,247,3.057,248,4.148,249,3.057,250,3.057,251,3.057,252,2.711,253,3.8,254,1.523,255,2.484,256,2.711,257,2.711,258,2.484,259,2.711,260,3.057,261,3.057,262,3.057,263,3.057,264,3.057,265,3.057]],["title/modules/AuthenticationModule.html",[72,1.316,78,3.087]],["body/modules/AuthenticationModule.html",[3,0.064,4,0.064,5,0.052,17,0.008,31,0.25,35,0.064,36,0.155,37,0.004,38,0.004,41,1.793,48,0.547,49,3.374,50,1.476,72,1.548,74,1.476,75,2.325,78,6.218,84,5.236,94,4.776,95,2.454,96,1.681,97,1.635,99,2.676,110,3.615,116,3.264,151,2.99,154,2.37,155,3.264,167,2.523,174,4.804,179,1.06,182,2.487,217,5.155,218,3.63,222,2.268,266,3.264,267,3.264,268,3.264,269,3.68,270,5.522,271,5.522,272,5.522,273,5.522,274,5.236,275,3.68,276,4.804,277,3.312,278,3.264,279,2.622,280,5.372,281,2.096,282,4.765,283,3.68,284,3.68,285,3.68,286,4.494,287,2.622,288,3.68,289,4.067,290,3.312,291,3.68,292,2.99,293,2.99,294,2.786,295,2.99,296,3.68,297,2.99,298,3.68]],["title/injectables/AuthenticationService.html",[217,2.704,299,0.939]],["body/injectables/AuthenticationService.html",[3,0.044,4,0.044,5,0.035,7,0.159,9,3.175,14,0.968,15,1.501,16,0.381,17,0.008,18,1.653,21,0.537,24,1.733,31,0.204,35,0.044,36,0.105,37,0.003,38,0.003,43,0.926,46,1.509,48,0.372,49,3.378,50,1.005,55,2.246,68,1.562,104,1.214,105,1.031,177,1.614,179,2.155,182,1.694,183,3.254,193,1.531,200,3.552,201,3.858,204,3.552,215,3.421,216,1.614,217,2.37,220,2.223,231,0.983,232,1.957,233,1.565,243,3.22,245,2.278,254,3.11,279,1.786,294,3.031,297,3.254,299,0.823,300,0.894,301,2.223,302,4.004,303,5.71,304,5,305,4.004,306,5,307,2.037,308,6.196,309,2.506,310,4.004,311,6.655,312,2.506,313,1.881,314,2.506,315,2.506,316,5.065,317,2.506,318,1.614,319,1.694,320,4.218,321,2.579,322,4.004,323,2.506,324,2.506,325,2.506,326,6.655,327,2.506,328,6.242,329,2.506,330,3.552,331,2.223,332,2.506,333,3.22,334,2.506,335,3.22,336,1.786,337,2.506,338,2.506,339,3.031,340,4.004,341,2.506,342,1.545,343,2.854,344,2.506,345,2.506,346,2.935,347,2.235,348,2.223,349,2.223,350,5,351,2.506,352,2.506,353,5,354,2.506,355,1.898,356,2.506,357,2.506,358,4.004,359,4.004,360,2.854,361,3.552,362,2.506,363,2.506,364,2.506,365,5.71,366,3.678,367,5.71,368,4.004,369,2.506,370,2.506,371,2.506,372,2.506,373,2.506,374,4.004,375,4.004,376,2.506]],["title/controllers/AuthorizationController.html",[39,1.492,377,3.458]],["body/controllers/AuthorizationController.html",[3,0.077,4,0.077,5,0.062,7,0.279,14,0.886,16,0.349,17,0.008,19,1.302,21,0.468,24,2.14,31,0.237,35,0.077,36,0.184,37,0.005,38,0.005,39,1.435,41,1.466,43,1.409,46,1.382,48,0.652,52,2.258,68,1.525,104,1.111,105,0.944,108,2.707,176,2.189,205,3.846,206,3.325,209,2.502,211,2.414,212,2.006,233,1.375,320,5.365,377,4.613,378,3.896,379,3.896,380,6.207,381,6.207,382,4.392,383,6.122,384,4.392,385,4.392,386,4.392,387,6.122,388,4.392,389,4.392,390,2.707,391,5.298,392,3.325,393,2.707,394,4.728,395,3.896,396,3.606,397,3.896,398,3.896,399,2.968,400,3.896,401,3.325,402,4.392,403,4.392,404,4.392,405,2.829,406,4.392,407,4.392,408,5.406,409,5.406,410,4.392,411,4.392,412,4.392]],["title/modules/AuthorizationModule.html",[72,1.316,79,3.256]],["body/modules/AuthorizationModule.html",[3,0.101,4,0.101,5,0.081,15,1.724,17,0.008,31,0.244,35,0.101,36,0.241,37,0.006,38,0.006,41,2.431,48,0.853,72,2.098,74,2.303,75,3.151,79,6.318,95,3.326,96,2.623,97,2.552,99,2.422,167,3.42,377,6.053,394,5.991,395,5.094,413,5.094,414,5.094,415,5.743,416,3.156,417,2.049,418,5.743,419,5.743,420,5.094]],["title/injectables/AuthorizationService.html",[299,0.939,394,3.087]],["body/injectables/AuthorizationService.html",[3,0.081,4,0.081,5,0.065,7,0.294,12,1.872,14,1.045,15,1.388,16,0.412,17,0.008,21,0.552,24,2.174,31,0.235,33,1.613,35,0.081,36,0.194,37,0.005,38,0.005,43,1.46,46,1.431,48,0.687,104,1.311,105,1.113,179,2.405,231,1.549,232,1.36,245,2.303,299,1.297,300,1.649,380,6.376,381,5.599,383,6.197,387,6.197,394,4.265,396,3.735,397,4.1,398,4.1,417,1.649,421,4.1,422,4.623,423,3.735,424,4.623,425,6.312,426,4.623,427,4.623,428,6.312,429,4.623,430,2.303,431,3.499,432,4.623,433,6.312]],["title/interfaces/BookProperties.html",[434,2.209,435,3.256]],["body/interfaces/BookProperties.html",[3,0.113,4,0.113,5,0.091,7,0.41,8,1.484,16,0.448,17,0.007,18,1.837,35,0.113,37,0.006,38,0.006,434,3.115,435,5.573,436,3.971,437,5.714,438,5.235,439,8.756,440,8.756]],["title/interfaces/CarProperties.html",[434,2.209,441,3.256]],["body/interfaces/CarProperties.html",[3,0.11,4,0.11,5,0.088,7,0.399,8,1.459,16,0.497,17,0.007,18,1.747,24,1.631,35,0.11,37,0.006,38,0.006,434,3.029,436,3.861,438,5.09,441,5.478,442,5.556,443,8.673,444,8.673,445,7.687,446,6.264,447,6.264]],["title/controllers/CategoriesController.html",[39,1.492,448,3.458]],["body/controllers/CategoriesController.html",[3,0.057,4,0.057,5,0.046,7,0.209,12,1.719,14,1.029,16,0.405,17,0.008,19,1.648,21,0.593,31,0.233,35,0.057,36,0.138,37,0.004,38,0.004,39,1.073,41,1.096,43,1.142,46,1.749,48,0.488,52,1.688,68,1.93,104,1.29,105,1.096,108,2.024,176,1.636,205,2.714,207,2.137,209,1.871,211,1.805,212,1.5,233,1.028,390,2.024,392,2.486,393,2.024,396,1.944,399,2.219,401,2.486,405,2.115,448,3.738,449,2.913,450,2.913,451,3.337,452,4.704,453,5.854,454,3.519,455,3.738,456,4.38,457,3.738,458,3.284,459,4.704,460,3.284,461,3.284,462,4.788,463,3.284,464,4.938,465,4.38,466,3.284,467,3.284,468,5.814,469,3.519,470,3.284,471,3.284,472,3.284,473,3.284,474,3.284,475,3.284,476,3.284,477,3.284,478,4.704,479,3.284,480,3.284,481,2.34,482,2.669,483,2.486,484,2.913,485,2.115,486,2.669,487,2.913,488,3.284,489,2.669,490,2.34,491,2.669,492,4.01,493,2.913,494,1.805,495,4.38,496,3.284,497,3.284,498,3.284,499,3.284,500,6.6,501,3.284,502,3.284,503,3.284,504,3.284,505,3.284,506,3.284,507,2.669,508,3.284,509,3.284,510,3.284,511,2.669,512,3.284,513,3.284,514,3.284,515,3.284,516,3.284,517,3.284,518,3.284]],["title/modules/CategoriesModule.html",[72,1.316,80,3.256]],["body/modules/CategoriesModule.html",[3,0.101,4,0.101,5,0.081,17,0.008,31,0.244,35,0.101,36,0.241,37,0.006,38,0.006,41,2.431,48,0.853,72,2.098,74,2.303,75,3.151,80,6.318,95,3.326,96,2.623,97,2.552,99,2.422,167,3.42,416,3.156,417,2.049,448,6.053,462,3.699,492,5.991,493,5.094,519,5.094,520,5.094,521,5.743,522,5.743,523,5.094,524,5.743]],["title/injectables/CategoriesService.html",[299,0.939,492,3.087]],["body/injectables/CategoriesService.html",[3,0.055,4,0.055,5,0.044,7,0.199,12,1.899,14,1.06,16,0.418,17,0.008,21,0.6,24,2.192,31,0.213,33,1.089,35,0.055,36,0.131,37,0.004,38,0.004,43,1.099,46,1.719,48,0.464,55,2.078,68,1.733,104,1.33,105,1.129,162,1.51,179,2.502,193,2.2,231,1.166,232,0.918,245,2.766,299,0.977,300,1.114,346,3.307,347,2.518,396,1.848,417,1.114,423,3.11,430,1.556,451,3.212,452,4.584,453,5.706,454,3.387,455,3.598,456,4.216,457,3.598,459,4.933,462,5.258,478,4.584,492,3.212,494,1.716,495,4.216,523,2.77,525,2.77,526,3.123,527,3.123,528,4.753,529,4.753,530,3.123,531,3.123,532,3.123,533,3.863,534,3.123,535,3.863,536,3.123,537,4.753,538,3.123,539,3.863,540,3.123,541,2.364,542,3.123,543,2.225,544,3.123,545,3.123,546,3.123,547,4.753,548,3.965,549,4.584,550,3.123,551,4.753,552,6.433,553,3.123,554,5.755,555,2.364,556,3.123,557,2.364,558,3.123,559,3.123,560,3.123]],["title/entities/Category.html",[0,1.788,462,2.942]],["body/entities/Category.html",[0,2.617,2,2.587,3,0.088,4,0.088,5,0.071,7,0.32,8,1.269,9,3.517,12,1.955,16,0.458,17,0.008,18,1.346,19,1.709,20,4.124,21,0.614,24,1.741,25,4.124,31,0.188,33,1.756,35,0.088,36,0.211,37,0.005,38,0.005,105,1.162,207,3.778,462,4.305,549,5.348,561,4.464,562,7.505,563,5.06,564,7.505,565,5.033,566,5.033,567,5.033,568,4.464,569,6.684,570,5.033,571,4.09,572,5.929]],["title/classes/CategoryNotFoundException.html",[36,0.192,541,3.458]],["body/classes/CategoryNotFoundException.html",[3,0.109,4,0.109,5,0.087,12,1.619,14,0.904,16,0.356,17,0.007,21,0.477,24,2.159,31,0.175,35,0.109,36,0.261,37,0.006,38,0.006,48,0.923,104,1.133,105,0.963,231,1.525,541,5.791,573,1.355,574,6.786,575,4.199,576,3.145,577,5.109,578,7.65,579,4.429,580,7.65,581,6.215,582,4.199]],["title/entities/Comment.html",[0,1.788,583,2.602]],["body/entities/Comment.html",[0,2.547,2,2.485,3,0.085,4,0.085,5,0.068,7,0.308,8,1.235,9,3.495,12,1.915,15,2.465,16,0.451,17,0.008,18,1.311,19,1.681,20,4.041,21,0.604,24,1.695,25,4.041,31,0.207,33,1.686,35,0.085,36,0.203,37,0.005,38,0.005,207,3.893,571,3.928,583,3.706,584,4.288,585,5.061,586,4.189,587,5.287,588,5.771,589,4.834,590,4.834,591,4.834,592,6.506,593,4.834,594,5.567,595,2.567]],["title/controllers/CommentsController.html",[39,1.492,596,3.458]],["body/controllers/CommentsController.html",[3,0.073,4,0.073,5,0.059,7,0.265,14,0.855,15,1.765,16,0.337,17,0.008,19,1.257,21,0.452,31,0.243,35,0.073,36,0.175,37,0.005,38,0.005,39,1.363,41,1.393,43,1.36,46,1.333,48,0.62,52,2.145,55,1.253,68,1.472,104,1.072,105,0.911,176,2.079,179,2.329,185,4.21,188,3.392,193,1.595,205,3.231,207,2.946,208,3.624,209,2.377,211,2.293,212,1.906,221,2.293,223,2.688,228,2.688,233,1.307,234,2.688,236,2.82,482,3.391,494,2.293,583,3.878,596,4.451,597,3.702,598,3.391,599,6.039,600,6.039,601,3.702,602,4.994,603,4.173,604,4.173,605,5.595,606,4.173,607,2.843,608,4.778,609,2.974,610,2.974,611,4.6,612,3.702,613,3.391,614,3.702,615,4.173,616,2.47,617,2.82,618,2.82,619,2.974,620,4.173,621,4.173,622,3.702,623,2.82,624,3.349,625,2.82,626,3.349,627,3.391,628,4.173,629,4.173]],["title/modules/CommentsModule.html",[72,1.316,81,3.256]],["body/modules/CommentsModule.html",[3,0.094,4,0.094,5,0.075,17,0.008,31,0.253,35,0.094,36,0.225,37,0.006,38,0.006,41,2.324,48,0.795,72,2.006,74,2.148,75,3.013,81,6.203,95,3.18,96,2.446,97,2.38,99,2.258,167,3.27,416,2.943,417,1.91,583,3.051,596,5.857,611,5.881,612,4.75,619,3.817,630,4.75,631,4.75,632,5.355,633,6.176,634,2.844,635,5.271,636,4.75,637,5.355,638,5.355,639,5.271,640,5.355,641,5.355,642,5.355]],["title/injectables/CommentsService.html",[299,0.939,611,3.087]],["body/injectables/CommentsService.html",[3,0.075,4,0.075,5,0.06,7,0.273,14,1.004,15,2.245,16,0.396,17,0.008,21,0.531,24,1.799,31,0.244,35,0.075,36,0.18,37,0.005,38,0.005,43,1.385,46,1.358,48,0.637,52,2.203,68,1.499,104,1.259,105,1.07,179,2.349,193,1.638,231,1.052,232,1.261,299,1.231,300,1.529,494,2.355,583,3.413,585,4.609,595,2.276,599,5.314,600,6.126,601,5.314,602,5.053,607,2.897,611,4.048,613,3.483,616,2.536,617,2.896,618,2.896,619,3.054,623,4.048,634,2.276,643,3.802,644,3.802,645,7.232,646,7.423,647,4.286,648,4.286,649,4.286,650,4.534,651,4.286,652,2.896,653,3.054,654,3.802,655,3.802,656,3.054,657,4.286,658,3.802,659,3.802,660,4.286,661,3.802,662,4.286]],["title/classes/ConfirmEmailDto.html",[36,0.192,663,3.458]],["body/classes/ConfirmEmailDto.html",[3,0.11,4,0.11,5,0.088,7,0.4,8,1.463,16,0.36,17,0.007,18,1.552,19,1.344,21,0.483,31,0.177,35,0.11,36,0.324,37,0.006,38,0.006,254,4.152,573,1.371,663,5.834,664,4.235,665,6.835,666,5.578,667,3.456,668,6.289,669,3.619,670,3.619,671,2.348]],["title/classes/CreateCategoryDto.html",[36,0.192,459,3.256]],["body/classes/CreateCategoryDto.html",[3,0.111,4,0.111,5,0.089,7,0.403,8,1.47,16,0.363,17,0.007,18,1.56,19,1.355,21,0.487,31,0.179,35,0.111,36,0.325,37,0.006,38,0.006,105,1.295,459,5.518,573,1.382,667,3.483,669,3.637,670,3.637,671,2.367,672,6.869,673,5.151,674,5.623]],["title/classes/CreateCommentCommand.html",[36,0.192,653,3.256]],["body/classes/CreateCommentCommand.html",[3,0.095,4,0.095,5,0.077,7,0.347,8,1.336,9,3.343,14,0.792,15,2.563,16,0.447,17,0.008,21,0.599,31,0.198,35,0.095,36,0.229,37,0.006,38,0.006,104,0.993,105,0.844,231,1.727,233,2.738,494,2.993,573,1.187,583,4.697,585,5.262,595,2.893,602,5.769,613,4.426,653,5.017,675,7.313,676,4.832,677,5.447,678,5.447,679,5.447,680,5.447]],["title/classes/CreateCommentDto.html",[36,0.192,602,3.087]],["body/classes/CreateCommentDto.html",[3,0.099,4,0.099,5,0.08,7,0.36,8,1.37,16,0.479,17,0.008,18,1.454,19,1.542,21,0.554,31,0.224,35,0.099,36,0.334,37,0.006,38,0.006,207,3.437,573,1.234,586,4.525,602,4.876,667,3.111,669,3.389,670,3.389,671,2.114,681,7.046,682,5.021,683,5.661,684,6.332,685,5.661,686,5.661,687,3.646,688,6.4,689,5.661,690,5.661]],["title/classes/CreateCommentHandler.html",[36,0.192,635,3.458]],["body/classes/CreateCommentHandler.html",[3,0.086,4,0.086,5,0.069,7,0.311,14,0.954,16,0.376,17,0.008,21,0.504,31,0.232,33,1.707,35,0.086,36,0.206,37,0.005,38,0.005,43,1.517,46,1.11,55,1.97,68,1.225,104,1.196,105,1.016,179,2.132,231,1.61,232,1.439,245,2.394,417,1.746,423,3.823,430,2.438,573,1.067,583,4.215,585,4.043,607,3.172,619,3.487,634,2.599,635,4.966,653,5.634,655,4.34,691,6.564,692,4.34,693,3.605,694,5.602,695,4.225,696,4.34,697,4.893,698,5.819,699,4.966,700,4.893,701,4.675,702,3.704,703,4.34,704,4.893,705,4.34,706,6.56,707,4.893,708,4.893]],["title/classes/CreateLogDto.html",[36,0.192,709,3.458]],["body/classes/CreateLogDto.html",[3,0.101,4,0.101,5,0.081,7,0.365,8,1.382,16,0.458,17,0.008,18,1.786,19,1.709,21,0.614,31,0.162,35,0.101,36,0.306,37,0.006,38,0.006,573,1.252,669,4.23,671,2.144,709,5.513,710,7.459,711,5.094,712,6.053,713,6.053,714,5.699,715,5.743,716,5.743,717,5.743]],["title/classes/CreatePostDto.html",[36,0.192,718,3.256]],["body/classes/CreatePostDto.html",[3,0.097,4,0.097,5,0.078,7,0.354,8,1.354,16,0.451,17,0.008,18,1.771,19,1.684,21,0.605,31,0.157,35,0.097,36,0.3,37,0.006,38,0.006,162,2.689,573,1.212,586,4.487,667,3.921,669,3.903,670,3.7,671,2.077,718,5.085,719,7.371,720,4.52,721,6.987,722,6.401,723,5.562,724,5.562,725,5.562,726,5.562,727,5.562,728,4.064,729,4.52]],["title/classes/CreateProductCommand.html",[36,0.192,730,3.256]],["body/classes/CreateProductCommand.html",[3,0.095,4,0.095,5,0.077,7,0.347,8,1.336,9,3.343,14,0.792,15,2.563,16,0.447,17,0.008,21,0.599,31,0.198,35,0.095,36,0.229,37,0.006,38,0.006,104,0.993,105,0.844,231,1.727,233,2.738,494,2.993,573,1.187,595,2.893,730,5.017,731,7.313,732,4.124,733,4.389,734,3.873,735,5.447,736,5.499,737,4.426,738,4.832,739,4.832,740,3.882]],["title/classes/CreateProductDto.html",[36,0.192,736,2.942]],["body/classes/CreateProductDto.html",[3,0.098,4,0.098,5,0.079,7,0.356,8,1.634,14,1.042,16,0.411,17,0.008,18,1.444,19,1.532,21,0.551,31,0.223,35,0.098,36,0.301,37,0.006,38,0.006,105,1.224,435,5.632,441,5.632,573,1.221,667,3.078,669,3.366,670,3.366,671,2.092,728,4.502,736,4.616,741,7.01,742,4.24,743,4.968,744,5.601,745,4.968,746,6.357,747,4.968]],["title/classes/CreateProductHandler.html",[36,0.192,748,3.458]],["body/classes/CreateProductHandler.html",[3,0.086,4,0.086,5,0.069,7,0.311,14,0.954,16,0.376,17,0.008,21,0.504,31,0.232,33,1.707,35,0.086,36,0.206,37,0.005,38,0.005,43,1.517,46,1.11,55,1.97,68,1.225,104,1.196,105,1.016,179,2.132,231,1.61,232,1.439,245,2.394,417,1.746,423,3.823,430,2.438,573,1.067,607,3.172,634,2.599,693,3.605,694,5.602,695,4.225,699,4.966,701,4.675,702,3.704,703,4.34,730,5.634,733,3.372,734,3.476,748,4.966,749,6.564,750,3.487,751,3.487,752,4.893,753,4.675,754,4.893,755,3.016,756,3.704,757,4.893,758,3.487,759,6.56,760,4.893,761,4.893]],["title/classes/CreateUserDto.html",[36,0.192,762,3.458]],["body/classes/CreateUserDto.html",[3,0.091,4,0.091,5,0.073,7,0.331,8,1.296,14,0.993,16,0.464,17,0.007,18,1.798,19,1.731,21,0.622,31,0.146,35,0.091,36,0.287,37,0.005,38,0.005,105,1.181,313,3.581,342,4.7,573,1.133,667,2.856,669,3.804,670,3.804,671,1.941,728,3.89,762,5.169,763,7.46,764,4.224,765,6.196,766,5.772,767,5.198,768,5.198,769,4.61,770,5.198,771,5.198,772,6.056,773,5.198,774,4.224,775,4.61,776,4.224,777,4.61]],["title/injectables/CustomLogger.html",[299,0.939,778,3.256]],["body/injectables/CustomLogger.html",[3,0.053,4,0.053,5,0.042,7,0.192,8,0.88,14,1.047,16,0.429,17,0.008,18,1.884,21,0.576,31,0.192,35,0.053,36,0.127,37,0.004,38,0.004,43,1.072,46,1.547,48,0.449,49,3.624,50,1.212,55,0.907,67,5.849,69,2.287,70,4.112,104,1.313,105,1.115,107,4.609,231,1.137,232,1.659,233,1.766,299,0.952,300,1.078,333,4.636,576,1.906,712,6.942,713,5.164,714,6.15,778,3.303,779,6.859,780,2.455,781,5.639,782,5.714,783,3.898,784,4.635,785,4.112,786,3.022,787,4.507,788,6.324,789,4.635,790,4.635,791,3.022,792,4.635,793,6.324,794,3.022,795,4.635,796,3.022,797,4.635,798,3.022,799,4.635,800,3.022,801,3.022,802,3.022,803,2.455,804,2.455,805,3.022,806,2.68,807,3.022,808,3.022,809,3.022,810,3.022,811,2.287,812,3.022,813,3.022,814,6.821,815,3.022,816,3.022,817,4.635]],["title/entities/DatabaseFile.html",[0,1.788,818,3.087]],["body/entities/DatabaseFile.html",[0,2.732,2,2.762,3,0.094,4,0.094,5,0.076,7,0.342,8,1.324,9,3.474,12,2.018,16,0.47,17,0.007,18,1.406,19,1.656,20,4.507,21,0.595,24,1.817,25,4.258,31,0.151,33,1.874,35,0.094,36,0.226,37,0.006,38,0.006,818,4.715,819,5.542,820,7.276,821,3.829,822,4.991,823,5.236,824,6.978,825,4.367,826,6.978,827,5.373,828,4.367,829,4.367]],["title/controllers/DatabaseFilesController.html",[39,1.492,830,3.458]],["body/controllers/DatabaseFilesController.html",[3,0.084,4,0.084,5,0.091,7,0.305,12,1.684,14,0.697,16,0.371,17,0.008,19,1.024,21,0.368,24,1.907,31,0.221,35,0.084,36,0.201,37,0.005,38,0.005,39,1.565,41,1.599,43,1.495,46,1.086,48,0.711,52,2.462,55,1.942,68,1.199,104,0.874,105,0.742,108,2.952,140,4.369,162,2.316,176,2.387,179,2.109,193,1.831,233,1.5,245,1.748,347,1.875,390,2.952,391,4.895,393,2.952,405,3.085,469,4.608,586,3.684,819,4.369,830,4.895,831,3.892,832,3.986,833,4.369,834,6.493,835,4.249,836,5.826,837,4.79,838,4.895,839,3.892,840,4.946,841,3.414,842,4.79,843,4.895,844,2.387,845,4.79,846,3.892,847,3.892,848,4.79,849,4.79,850,3.892,851,3.892,852,3.892,853,4.249,854,4.249,855,4.249]],["title/modules/DatabaseFilesModule.html",[72,1.316,82,3.087]],["body/modules/DatabaseFilesModule.html",[3,0.093,4,0.093,5,0.075,17,0.008,31,0.245,35,0.093,36,0.223,37,0.006,38,0.006,41,2.314,48,0.79,50,2.134,72,1.997,74,2.134,75,3,82,5.979,95,3.166,96,2.429,97,2.364,99,2.243,110,3.949,140,3.594,167,3.256,277,4.273,416,2.923,417,1.898,818,3.594,819,3.594,830,5.838,832,4.273,840,6.268,841,3.791,856,4.719,857,4.719,858,4.719,859,4.719,860,4.719,861,3.279,862,4.719,863,5.319]],["title/injectables/DatabaseFilesService.html",[299,0.939,840,3.087]],["body/injectables/DatabaseFilesService.html",[3,0.067,4,0.067,5,0.1,7,0.243,12,0.995,14,1.033,16,0.407,17,0.008,18,1.306,21,0.546,24,2.045,31,0.2,33,1.333,35,0.067,36,0.161,37,0.004,38,0.004,43,1.277,46,1.47,48,0.568,55,1.947,68,1.382,104,1.295,105,1.1,140,5.09,179,2.433,193,2.111,231,1.355,232,1.124,245,2.592,299,1.135,300,1.363,346,2.839,347,2.162,417,1.363,423,3.434,430,1.904,555,2.893,557,2.893,577,3.996,818,3.731,819,5.09,822,2.461,823,4.799,840,3.731,860,3.39,861,2.356,864,3.105,865,5.522,866,4.898,867,6.483,868,3.822,869,3.822,870,5.522,871,5.522,872,7.196,873,3.822,874,5.061,875,4.898,876,3.822,877,3.822,878,5.751,879,3.822,880,5.751,881,3.822,882,5.269,883,3.822,884,3.822,885,3.822,886,3.822]],["title/classes/DatabaseLogger.html",[36,0.192,887,3.458]],["body/classes/DatabaseLogger.html",[3,0.115,4,0.049,5,0.039,7,0.176,8,0.823,14,1.056,16,0.416,17,0.008,18,1.784,21,0.578,24,1.391,31,0.122,33,0.968,35,0.049,36,0.117,37,0.003,38,0.003,43,1.003,46,1.647,48,0.412,67,6.109,68,1.934,104,1.623,105,1.125,107,4.43,193,2.309,232,2.044,233,1.672,318,1.786,319,1.874,333,3.441,339,2.1,343,1.977,347,1.698,573,0.605,608,6.423,693,2.384,713,4.963,714,4.672,780,2.254,783,4.477,785,5.359,872,7.326,887,3.284,888,6.854,889,5.342,890,4.672,891,4.338,892,4.338,893,5.342,894,5.342,895,4.338,896,4.338,897,4.338,898,2.774,899,2.774,900,2.774,901,4.338,902,2.774,903,4.338,904,2.774,905,2.774,906,2.774,907,2.774,908,2.774,909,6.041,910,4.338,911,2.774,912,4.338,913,2.774,914,2.774,915,6.041,916,2.774,917,2.774,918,2.774,919,4.338,920,2.774,921,4.738,922,2.774,923,2.46,924,2.774]],["title/modules/DatabaseModule.html",[72,1.316,83,3.256]],["body/modules/DatabaseModule.html",[3,0.115,4,0.115,5,0.092,17,0.008,31,0.239,35,0.115,36,0.275,37,0.006,38,0.006,48,0.973,72,2.276,74,2.626,83,5.628,99,2.761,125,5.808,416,3.598,417,2.336,925,6.548,926,4.957,927,6.548]],["title/classes/DeleteProductCommand.html",[36,0.192,928,3.256]],["body/classes/DeleteProductCommand.html",[3,0.098,4,0.098,5,0.079,7,0.356,8,1.36,9,3.292,12,2.17,14,0.814,15,2.586,16,0.453,17,0.007,18,1.678,21,0.607,31,0.158,35,0.098,36,0.235,37,0.006,38,0.006,104,1.021,105,0.868,231,1.374,233,2.758,573,1.221,595,2.975,732,4.24,733,4.427,737,5.824,928,5.107,929,7.39,930,4.968,931,5.601,932,4.968]],["title/classes/DeleteProductHandler.html",[36,0.192,933,3.458]],["body/classes/DeleteProductHandler.html",[3,0.076,4,0.076,5,0.061,7,0.277,12,1.578,14,0.881,16,0.347,17,0.008,21,0.466,31,0.237,33,1.52,35,0.076,36,0.183,37,0.005,38,0.005,43,1.401,46,0.988,48,0.647,55,2.092,68,1.09,104,1.105,105,0.939,179,2.007,231,1.487,232,1.281,245,2.211,346,3.582,347,2.728,417,1.554,423,3.642,430,2.171,543,3.105,548,2.685,555,3.298,557,3.298,573,0.95,607,2.93,634,2.314,693,3.33,694,5.274,695,3.903,699,4.587,701,4.318,702,3.298,733,3.115,734,2.046,750,3.105,751,3.105,753,4.318,755,2.685,756,3.298,758,3.105,928,5.367,933,4.587,934,6.18,935,3.54,936,3.864,937,4.318,938,3.105,939,3.54,940,4.356,941,4.356,942,5.375,943,3.54,944,3.864,945,3.864,946,3.864,947,4.356,948,5.375]],["title/controllers/EmailConfirmationController.html",[39,1.492,949,3.458]],["body/controllers/EmailConfirmationController.html",[3,0.078,4,0.078,5,0.062,7,0.283,14,0.893,16,0.352,17,0.008,19,1.313,21,0.472,31,0.232,35,0.078,36,0.187,37,0.005,38,0.005,39,1.451,41,1.483,43,1.42,46,1.392,48,0.66,55,1.334,104,1.12,105,0.951,108,2.738,154,4.534,176,2.213,179,2.376,185,4.326,188,3.06,205,2.441,207,1.922,208,2.738,209,2.53,211,2.441,212,2.028,213,4.534,214,3.609,221,2.441,223,2.861,228,2.861,230,3.362,231,1.09,232,1.306,233,1.391,234,2.861,245,2.569,313,3.306,393,2.738,405,2.861,609,3.165,610,3.165,663,5.749,664,3.868,949,4.649,950,3.94,951,6.736,952,5.447,953,5.447,954,4.442,955,6.141,956,4.442,957,6.141,958,4.442,959,6.141,960,4.442,961,4.442,962,4.442,963,4.442,964,3.94,965,4.442,966,4.442,967,4.442,968,4.442,969,4.442,970,4.442,971,4.442]],["title/modules/EmailConfirmationModule.html",[72,1.316,84,3.087]],["body/modules/EmailConfirmationModule.html",[3,0.087,4,0.087,5,0.07,17,0.008,31,0.245,35,0.087,36,0.208,37,0.005,38,0.005,41,2.208,48,0.736,50,1.987,72,1.906,74,1.987,75,2.862,84,6.158,85,5.486,94,5.25,95,3.021,96,2.263,97,2.202,99,2.789,110,3.768,148,4.026,154,3.191,167,3.107,213,5.911,214,4.026,277,4.077,278,4.395,279,3.531,313,3.107,664,2.723,949,5.637,972,4.395,973,4.954,974,4.395,975,4.395,976,4.954,977,4.395,978,4.954,979,4.954]],["title/injectables/EmailConfirmationService.html",[213,2.942,299,0.939]],["body/injectables/EmailConfirmationService.html",[1,1.974,3,0.051,4,0.051,5,0.041,7,0.186,9,3.168,14,0.977,15,1.356,16,0.385,17,0.008,18,1.431,21,0.516,24,1.438,31,0.209,35,0.051,36,0.123,37,0.004,38,0.004,43,1.044,46,1.409,48,0.434,49,3.58,50,1.172,55,2.223,68,1.13,104,1.225,105,1.1,154,4.574,179,2.262,193,1.117,201,4.198,213,2.909,215,3.806,231,1.108,232,1.827,233,1.945,245,2.451,254,3.347,279,2.082,294,3.419,297,2.374,299,0.928,300,1.042,308,6.299,313,3.478,320,1.974,333,1.882,336,2.082,339,2.212,343,2.082,346,3.453,347,2.63,348,4.006,355,2.212,360,4.427,361,2.592,664,3.903,951,4.898,952,2.592,953,4.006,980,2.592,981,4.517,982,4.517,983,5.522,984,2.922,985,4.769,986,2.922,987,4.517,988,2.922,989,4.517,990,2.922,991,4.517,992,2.922,993,2.922,994,2.922,995,4.006,996,2.922,997,2.592,998,2.592,999,3.419,1000,2.922,1001,4.517,1002,4.517,1003,2.922,1004,2.922,1005,2.212,1006,2.922,1007,2.922,1008,2.592,1009,2.922,1010,2.922,1011,2.922,1012,2.922,1013,2.592,1014,2.922,1015,2.374,1016,2.922,1017,2.922,1018,2.922,1019,2.922,1020,4.517,1021,5.522,1022,4.517,1023,2.922,1024,2.922,1025,2.922,1026,2.922,1027,2.374,1028,2.922,1029,2.922,1030,2.922,1031,2.922,1032,2.922]],["title/modules/EmailModule.html",[72,1.316,85,2.942]],["body/modules/EmailModule.html",[3,0.102,4,0.102,5,0.082,17,0.008,31,0.226,35,0.102,36,0.244,37,0.006,38,0.006,48,0.862,50,2.329,72,2.113,74,2.329,75,3.173,85,5.815,95,3.349,96,2.651,97,2.58,99,2.448,110,4.177,167,3.444,277,4.52,985,6.048,1033,5.15,1034,5.15,1035,5.15,1036,5.806,1037,5.806]],["title/classes/EmailScheduleDto.html",[36,0.192,1038,3.256]],["body/classes/EmailScheduleDto.html",[3,0.092,4,0.092,5,0.074,7,0.336,8,1.31,16,0.467,17,0.008,18,1.805,19,1.742,21,0.626,31,0.149,35,0.092,36,0.29,37,0.006,38,0.006,563,5.819,573,1.152,586,4.379,664,4.647,667,3.793,669,3.61,670,3.61,671,1.973,766,5.819,1015,6.246,1038,4.919,1039,7.5,1040,4.687,1041,7.686,1042,5.284,1043,7.686,1044,5.284,1045,5.284,1046,5.284]],["title/controllers/EmailSchedulingController.html",[39,1.492,1047,3.458]],["body/controllers/EmailSchedulingController.html",[3,0.084,4,0.084,5,0.068,7,0.307,14,0.701,16,0.276,17,0.008,19,1.388,21,0.499,31,0.231,35,0.084,36,0.202,37,0.005,38,0.005,39,1.574,41,1.609,43,1.501,46,1.472,48,0.716,104,0.879,105,0.746,108,2.97,152,5.233,176,2.401,179,2.435,205,2.648,207,2.085,209,2.745,211,2.648,212,2.201,221,2.648,223,3.104,231,1.182,232,1.417,233,1.509,234,4.182,313,3.05,393,2.97,405,3.104,610,3.434,664,4.035,964,4.275,1038,5.6,1047,4.915,1048,4.275,1049,6.513,1050,7.857,1051,5.759,1052,4.819,1053,4.819,1054,4.275,1055,4.819,1056,4.819,1057,5.759,1058,4.275,1059,4.275,1060,4.962,1061,4.275,1062,4.819,1063,4.819,1064,4.819,1065,4.819,1066,4.819,1067,4.819]],["title/modules/EmailSchedulingModule.html",[72,1.316,86,3.256]],["body/modules/EmailSchedulingModule.html",[3,0.098,4,0.098,5,0.078,17,0.008,31,0.234,35,0.098,36,0.234,37,0.006,38,0.006,41,2.387,48,0.829,72,2.06,74,2.239,75,3.094,85,5.668,86,6.458,95,3.266,96,2.549,97,2.48,99,3.015,148,4.535,152,3.978,167,3.359,313,3.359,664,3.067,1047,5.973,1060,5.947,1061,4.951,1068,4.951,1069,5.581,1070,4.951,1071,5.581,1072,5.581]],["title/injectables/EmailSchedulingService.html",[299,0.939,1060,3.087]],["body/injectables/EmailSchedulingService.html",[3,0.079,4,0.079,5,0.063,7,0.287,14,0.902,16,0.355,17,0.008,21,0.545,31,0.226,35,0.079,36,0.189,37,0.005,38,0.005,43,1.434,46,1.406,48,0.669,55,1.862,104,1.131,105,0.961,107,4.19,150,3.66,152,5.445,231,1.522,232,1.824,233,1.941,299,1.274,300,1.607,347,2.428,563,3.41,664,4.198,985,5.333,997,3.996,1008,3.996,1013,3.996,1015,3.66,1038,5.445,1051,5.501,1054,5.501,1057,3.996,1058,3.996,1059,3.996,1060,4.19,1073,3.996,1074,7.64,1075,4.505,1076,8.483,1077,4.505,1078,4.505,1079,4.505,1080,4.505,1081,3.996,1082,4.505,1083,6.201,1084,4.505,1085,4.505,1086,6.201,1087,4.505,1088,4.505,1089,4.505,1090,4.505,1091,4.505,1092,4.505]],["title/injectables/EmailService.html",[299,0.939,985,2.942]],["body/injectables/EmailService.html",[3,0.083,4,0.083,5,0.067,7,0.301,8,1.217,14,0.933,15,1.421,16,0.417,17,0.008,21,0.559,31,0.22,35,0.083,36,0.199,37,0.005,38,0.005,43,1.483,46,1.073,48,0.703,49,4.064,50,1.898,52,2.433,56,3.583,68,1.185,104,1.17,105,0.994,231,1.161,232,2.14,233,1.482,299,1.318,300,1.688,333,3.048,346,2.433,347,1.853,787,3.373,985,4.131,1093,4.198,1094,7.276,1095,6.414,1096,3.373,1097,6.414,1098,6.414,1099,7.276,1100,4.733,1101,7.276,1102,6.414,1103,6.414,1104,3.846,1105,4.733,1106,4.733,1107,3.846,1108,4.733,1109,4.733,1110,4.733,1111,4.733,1112,4.198,1113,4.733,1114,4.733,1115,4.733,1116,4.733,1117,4.733,1118,6.414,1119,4.198,1120,4.733,1121,4.733,1122,4.733]],["title/classes/EnvironmentVariables.html",[36,0.192,1123,3.712]],["body/classes/EnvironmentVariables.html",[3,0.045,4,0.045,5,0.036,7,0.164,8,0.778,16,0.507,17,0.008,18,1.791,19,1.891,21,0.68,24,2.093,31,0.115,35,0.045,36,0.214,37,0.003,38,0.003,53,1.953,55,1.23,56,3.858,68,0.646,69,3.858,162,1.247,227,2.425,321,1.662,346,1.326,347,1.01,573,0.562,667,4.416,669,3.831,670,4.113,671,0.963,687,1.662,728,3.306,811,3.102,1123,3.329,1124,1.953,1125,5.096,1126,5.096,1127,5.096,1128,5.096,1129,5.096,1130,5.096,1131,5.096,1132,5.096,1133,5.096,1134,5.096,1135,5.096,1136,5.096,1137,5.096,1138,5.096,1139,5.096,1140,5.096,1141,5.096,1142,5.096,1143,5.096,1144,5.096,1145,5.096,1146,5.096,1147,5.55,1148,2.58,1149,2.58,1150,2.58,1151,2.58,1152,2.58,1153,2.58,1154,2.58,1155,2.58,1156,6.74,1157,2.58,1158,2.58,1159,2.58,1160,2.58,1161,5.096,1162,2.58,1163,2.58,1164,2.58,1165,2.58,1166,2.58,1167,2.58,1168,2.58,1169,2.58,1170,2.58,1171,2.58,1172,2.58,1173,2.58,1174,2.58,1175,2.58,1176,6.331,1177,2.096,1178,4.551,1179,2.58,1180,2.096,1181,3.634,1182,3.329,1183,2.58,1184,2.096,1185,2.288,1186,2.288,1187,4.097,1188,2.58,1189,2.58,1190,2.58,1191,2.58,1192,2.58,1193,2.58,1194,2.096,1195,2.58]],["title/classes/ExceptionsLoggerFilter.html",[36,0.192,171,3.458]],["body/classes/ExceptionsLoggerFilter.html",[3,0.101,4,0.101,5,0.081,7,0.368,14,0.841,16,0.331,17,0.008,21,0.444,31,0.206,35,0.101,36,0.243,37,0.006,38,0.006,43,1.692,46,1.312,48,0.859,104,1.055,105,0.896,107,3.909,136,4.701,171,5.538,193,2.211,343,6.008,573,1.261,576,3.008,1107,6.851,1196,6.489,1197,5.131,1198,8.023,1199,7.315,1200,8.431,1201,5.785,1202,7.315,1203,5.785,1204,5.785,1205,5.785]],["title/injectables/ExcludeNullInterceptor.html",[172,3.458,299,0.939]],["body/injectables/ExcludeNullInterceptor.html",[3,0.095,4,0.095,5,0.077,7,0.347,14,0.792,16,0.312,17,0.008,21,0.418,31,0.232,35,0.095,36,0.229,37,0.006,38,0.006,43,1.628,46,1.235,48,0.809,68,1.363,104,0.993,105,0.844,172,5.329,299,1.446,300,1.943,693,2.993,712,4.124,1206,6.244,1207,4.832,1208,7.04,1209,7.04,1210,7.313,1211,7.313,1212,8.245,1213,5.447,1214,7.8,1215,6.244,1216,4.832,1217,5.447,1218,5.447,1219,4.426,1220,5.447,1221,4.426,1222,4.426,1223,5.447,1224,5.447,1225,5.447,1226,4.832]],["title/classes/FileNotFoundException.html",[36,0.192,1227,3.458]],["body/classes/FileNotFoundException.html",[3,0.109,4,0.109,5,0.087,12,1.619,14,0.904,16,0.356,17,0.007,21,0.477,24,2.159,31,0.175,35,0.109,36,0.261,37,0.006,38,0.006,48,0.923,104,1.133,105,0.963,231,1.525,573,1.355,575,4.199,576,3.145,577,5.109,579,4.429,582,4.199,874,5.452,1227,5.791,1228,6.786,1229,6.786,1230,6.215]],["title/classes/FileResponseDto.html",[36,0.192,1231,3.458]],["body/classes/FileResponseDto.html",[3,0.091,4,0.091,5,0.073,7,0.332,8,1.299,9,3.535,12,1.989,15,2.293,16,0.465,17,0.008,18,1.633,19,1.632,21,0.623,24,1.782,31,0.193,35,0.091,36,0.287,37,0.005,38,0.005,573,1.137,669,3.955,671,1.947,733,3.926,1005,5.782,1178,4.919,1231,5.18,1232,6.374,1233,4.626,1234,5.443,1235,5.215,1236,5.215,1237,5.215,1238,5.215,1239,4.238]],["title/classes/FileUploadDto.html",[36,0.192,1240,3.458]],["body/classes/FileUploadDto.html",[3,0.107,4,0.107,5,0.121,7,0.388,8,1.435,16,0.433,17,0.008,18,1.523,19,1.303,21,0.468,31,0.213,35,0.107,36,0.256,37,0.006,38,0.006,212,2.784,573,1.329,844,3.767,1232,5.723,1240,5.723,1241,5.407,1242,6.705,1243,5.407,1244,6.705,1245,6.705,1246,6.095,1247,5.387]],["title/classes/FileUploadMultipleDto.html",[36,0.192,1248,3.712]],["body/classes/FileUploadMultipleDto.html",[3,0.107,4,0.107,5,0.086,7,0.388,8,1.435,16,0.471,17,0.008,18,1.228,19,1.303,21,0.468,31,0.172,35,0.107,36,0.256,37,0.006,38,0.006,212,2.784,573,1.329,833,5.552,1232,5.723,1243,5.407,1244,5.407,1245,5.407,1247,5.387,1248,6.143,1249,5.387,1250,5.407,1251,6.143,1252,7.559,1253,4.614,1254,6.095]],["title/modules/FilesModule.html",[72,1.316,87,3.087]],["body/modules/FilesModule.html",[3,0.097,4,0.097,5,0.078,17,0.008,31,0.242,35,0.097,36,0.233,37,0.006,38,0.006,48,0.823,72,2.051,74,2.223,75,3.081,87,6.036,95,3.251,96,2.531,97,2.463,99,2.337,167,3.344,277,4.388,416,3.046,417,1.977,841,3.95,861,4.388,1255,4.916,1256,4.916,1257,4.916,1258,6.649,1259,5.542,1260,4.585,1261,4.916,1262,3.57,1263,4.916,1264,5.542]],["title/injectables/FilesService.html",[299,0.939,1258,3.256]],["body/injectables/FilesService.html",[3,0.054,4,0.032,5,0.124,7,0.115,9,2.624,12,2.183,14,0.881,15,1.913,16,0.347,17,0.008,18,1.337,21,0.466,24,1.994,31,0.193,33,0.632,35,0.032,36,0.076,37,0.002,38,0.002,43,0.709,46,1.557,48,0.269,49,2.93,50,0.727,51,3.808,55,2.261,68,1.173,104,1.105,105,1.094,179,2.294,205,1.684,231,0.752,232,1.172,233,0.567,245,2.642,299,0.63,300,0.646,346,2.048,347,2.598,390,4.231,417,0.646,423,2.93,430,0.903,543,1.291,548,1.889,586,2.67,607,4.052,733,2.048,823,4.639,832,4.231,843,3.016,861,1.889,874,4.729,878,6.089,880,5.651,882,3.808,937,2.184,939,1.472,1005,3.016,1027,2.491,1119,1.607,1227,1.371,1234,5.269,1249,2.184,1258,2.184,1260,1.167,1261,1.607,1262,1.167,1263,1.607,1265,1.472,1266,2.719,1267,3.065,1268,3.065,1269,2.719,1270,3.984,1271,3.984,1272,1.812,1273,3.984,1274,1.812,1275,3.065,1276,3.065,1277,4.639,1278,1.812,1279,4.055,1280,6.089,1281,6.421,1282,3.065,1283,1.812,1284,3.065,1285,1.812,1286,3.534,1287,3.065,1288,1.812,1289,3.065,1290,1.812,1291,1.812,1292,1.812,1293,1.812,1294,6.47,1295,1.607,1296,1.812,1297,4.157,1298,1.812,1299,1.812,1300,3.984,1301,3.065,1302,1.812,1303,5.689,1304,5.689,1305,1.812,1306,1.607,1307,3.065,1308,1.812,1309,3.065,1310,1.812,1311,3.065,1312,1.812,1313,1.812,1314,1.812,1315,1.812,1316,1.812,1317,3.065,1318,3.065,1319,1.812,1320,1.607,1321,1.812,1322,1.812]],["title/classes/FindAllProductsHandler.html",[36,0.192,1323,3.458]],["body/classes/FindAllProductsHandler.html",[3,0.076,4,0.076,5,0.061,7,0.276,12,1.128,14,0.878,16,0.346,17,0.008,21,0.464,31,0.236,33,1.511,35,0.076,36,0.182,37,0.005,38,0.005,43,1.396,46,0.982,55,2.086,68,1.084,104,1.101,105,0.935,179,2.002,231,1.481,232,1.274,245,1.581,417,1.546,423,3.633,430,2.159,548,2.671,573,0.944,607,2.919,616,2.564,617,2.928,618,2.928,624,3.957,626,4.28,634,2.301,650,2.301,693,3.317,695,4.474,733,2.227,734,2.035,751,3.088,753,4.302,755,2.671,758,3.088,804,3.521,822,2.79,1277,4.694,1323,4.57,1324,5.645,1325,3.843,1326,5.645,1327,4.332,1328,3.521,1329,5.354,1330,4.332,1331,3.521,1332,3.843,1333,3.843,1334,3.28,1335,3.088,1336,3.843,1337,3.843,1338,4.332,1339,4.905,1340,3.843,1341,3.843,1342,4.332,1343,4.905,1344,6.036,1345,4.332,1346,3.843,1347,3.521,1348,3.521]],["title/classes/FindAllProductsQuery.html",[36,0.192,1329,3.256]],["body/classes/FindAllProductsQuery.html",[3,0.097,4,0.097,5,0.078,7,0.354,8,1.354,9,3.361,14,0.809,16,0.451,17,0.007,21,0.605,24,2.164,31,0.157,35,0.097,36,0.234,37,0.006,38,0.006,104,1.014,105,0.861,231,1.751,233,2.753,573,1.212,650,4.897,652,3.758,1277,5.615,1329,5.085,1349,6.753,1350,4.933,1351,5.562,1352,5.562,1353,5.562,1354,5.562]],["title/classes/FindOneParams.html",[36,0.192,468,3.087]],["body/classes/FindOneParams.html",[3,0.111,4,0.111,5,0.089,7,0.403,8,1.47,12,2.178,16,0.363,17,0.007,18,1.56,19,1.355,21,0.487,31,0.179,35,0.111,36,0.325,37,0.006,38,0.006,468,5.232,490,5.518,573,1.382,671,2.367,1355,6.869,1356,5.623,1357,8.361,1358,6.339]],["title/classes/FindProductHandler.html",[36,0.192,1359,3.458]],["body/classes/FindProductHandler.html",[3,0.089,4,0.089,5,0.071,7,0.323,12,1.323,14,0.978,16,0.385,17,0.008,21,0.517,31,0.235,33,1.772,35,0.089,36,0.213,37,0.005,38,0.005,43,1.556,46,1.152,68,1.272,104,1.227,105,1.042,231,1.651,232,1.494,417,1.813,423,3.881,430,2.532,548,3.132,573,1.108,607,3.252,634,2.699,693,3.697,695,4.857,733,2.612,734,2.387,750,3.621,751,3.621,753,4.794,755,3.132,758,3.621,935,4.129,943,4.129,1324,6.128,1326,6.128,1328,4.129,1331,4.129,1332,4.507,1359,5.092,1360,5.081,1361,5.72,1362,4.507,1363,5.081,1364,5.967]],["title/classes/FindProductQuery.html",[36,0.192,1361,3.256]],["body/classes/FindProductQuery.html",[3,0.108,4,0.108,5,0.086,7,0.391,8,1.442,9,2.904,14,0.893,16,0.435,17,0.007,18,1.735,21,0.584,35,0.108,36,0.258,37,0.006,38,0.006,104,1.12,105,0.951,231,1.507,233,2.581,573,1.339,932,5.449,1349,6.7,1361,5.413,1364,7.641,1365,5.449,1366,6.143,1367,6.143,1368,6.143]],["title/classes/GetCommentsDto.html",[36,0.192,605,3.458]],["body/classes/GetCommentsDto.html",[3,0.094,4,0.094,5,0.075,7,0.341,8,1.321,14,1.266,16,0.487,17,0.008,19,1.654,21,0.594,24,2.212,31,0.218,35,0.094,36,0.325,37,0.006,38,0.006,573,1.167,576,2.863,605,5.271,623,5.228,624,3.966,626,3.966,650,4.51,652,3.619,671,2,687,3.449,728,3.966,1369,6.176,1370,4.75,1371,4.75,1372,5.355,1373,5.658,1374,6.176,1375,4.75,1376,4.75]],["title/classes/GetCommentsHandler.html",[36,0.192,639,3.458]],["body/classes/GetCommentsHandler.html",[3,0.076,4,0.076,5,0.061,7,0.276,12,1.128,14,0.878,16,0.346,17,0.008,21,0.464,31,0.236,33,1.511,35,0.076,36,0.182,37,0.005,38,0.005,43,1.396,46,0.982,55,2.086,68,1.084,104,1.101,105,0.935,179,2.002,231,1.481,232,1.274,245,1.581,417,1.546,423,3.633,430,2.159,548,2.671,573,0.944,583,2.468,585,2.671,598,4.905,607,2.919,616,2.564,617,2.928,618,2.928,619,3.088,623,4.694,624,3.957,626,4.28,634,2.301,639,4.57,650,2.301,656,5.354,658,3.843,693,3.317,695,4.474,696,3.843,698,5.354,705,3.843,804,3.521,822,2.79,1326,5.645,1328,3.521,1331,3.521,1334,3.28,1335,3.088,1336,3.843,1337,3.843,1339,4.905,1340,3.843,1341,3.843,1346,3.843,1347,3.521,1348,3.521,1377,6.162,1378,3.843,1379,4.332,1380,4.332,1381,4.332,1382,4.332,1383,4.332,1384,6.036,1385,4.332]],["title/classes/GetCommentsQuery.html",[36,0.192,656,3.256]],["body/classes/GetCommentsQuery.html",[3,0.097,4,0.097,5,0.078,7,0.354,8,1.354,9,3.361,14,0.809,16,0.451,17,0.007,21,0.605,24,2.164,31,0.157,35,0.097,36,0.234,37,0.006,38,0.006,104,1.014,105,0.861,231,1.751,233,2.753,573,1.212,623,5.615,650,4.897,652,3.758,656,5.085,1386,7.371,1387,4.933,1388,4.933,1389,5.562,1390,5.562,1391,5.562]],["title/classes/GetProductDto.html",[36,0.192,1392,3.458]],["body/classes/GetProductDto.html",[3,0.094,4,0.094,5,0.075,7,0.341,8,1.321,14,1.266,16,0.487,17,0.008,19,1.654,21,0.594,24,2.212,31,0.218,35,0.094,36,0.325,37,0.006,38,0.006,573,1.167,576,2.863,624,3.966,626,3.966,650,4.51,652,3.619,671,2,687,3.449,728,3.966,742,4.054,743,4.75,1277,5.228,1371,4.75,1373,5.658,1374,6.176,1375,4.75,1376,4.75,1392,5.271,1393,6.176]],["title/controllers/GoogleAuthenticationController.html",[39,1.492,1394,3.458]],["body/controllers/GoogleAuthenticationController.html",[3,0.084,4,0.084,5,0.067,7,0.305,14,0.697,15,1.942,16,0.274,17,0.008,19,1.024,21,0.368,31,0.231,35,0.084,36,0.201,37,0.005,38,0.005,39,1.565,41,1.599,43,1.495,46,1.086,48,0.711,55,1.438,68,1.199,104,0.874,105,0.742,108,2.952,157,4.608,176,2.387,177,4.165,178,5.542,179,2.109,188,4.296,193,1.831,205,3.554,207,3.168,208,3.986,211,2.632,212,2.188,218,3.237,230,3.626,231,1.175,232,1.409,233,1.5,240,4.895,242,3.892,243,3.085,245,1.748,253,5.255,393,2.952,405,3.085,844,2.387,1394,4.895,1395,4.369,1396,3.892,1397,4.895,1398,4.79,1399,5.934,1400,4.79,1401,6.466,1402,4.946,1403,4.79,1404,4.79,1405,4.79,1406,4.79]],["title/modules/GoogleAuthenticationModule.html",[72,1.316,88,3.256]],["body/modules/GoogleAuthenticationModule.html",[3,0.092,4,0.092,5,0.074,17,0.008,31,0.244,35,0.092,36,0.22,37,0.006,38,0.006,41,2.289,48,0.777,50,2.099,72,1.976,74,2.099,75,2.968,78,5.844,88,6.503,94,5.331,95,3.132,96,2.389,97,2.325,99,2.892,110,3.906,115,4.641,157,3.729,167,3.221,218,3.535,282,4.641,977,4.641,1394,5.791,1395,3.535,1397,5.191,1402,5.844,1407,4.641,1408,5.232,1409,4.641,1410,5.232]],["title/injectables/GoogleAuthenticationService.html",[299,0.939,1402,3.087]],["body/injectables/GoogleAuthenticationService.html",[3,0.049,4,0.049,5,0.039,7,0.178,8,0.829,14,1.015,15,2.463,16,0.418,17,0.008,18,1.652,21,0.56,31,0.196,35,0.049,36,0.118,37,0.004,38,0.004,43,1.01,46,1.493,48,0.416,49,3.524,50,1.122,55,2.496,68,1.746,104,1.272,105,1.168,157,5.373,178,3.306,179,2.449,193,2.517,215,3.587,217,4.313,231,1.072,232,1.58,233,1.682,240,4.595,243,1.802,245,2.659,252,2.482,253,4.933,254,3.28,255,2.274,256,2.482,257,2.482,258,2.274,299,0.897,300,0.998,307,2.274,313,3.092,333,2.813,339,2.118,343,1.994,346,2.245,347,2.103,355,2.118,595,1.486,937,3.113,998,2.482,1112,3.874,1395,5.095,1397,2.118,1402,2.951,1411,2.274,1412,5.372,1413,4.368,1414,4.368,1415,4.368,1416,4.368,1417,3.874,1418,4.368,1419,2.798,1420,4.368,1421,2.798,1422,4.368,1423,2.798,1424,4.368,1425,2.798,1426,4.368,1427,2.798,1428,4.368,1429,2.482,1430,2.798,1431,2.798,1432,2.798,1433,4.368,1434,2.798,1435,4.368,1436,2.798,1437,2.798,1438,2.798,1439,2.798,1440,2.798,1441,2.798,1442,2.798,1443,2.798,1444,2.798,1445,2.798,1446,2.798,1447,2.798,1448,2.798,1449,2.798,1450,4.368,1451,2.798,1452,2.798,1453,2.798,1454,2.798,1455,2.798,1456,2.798]],["title/controllers/HealthController.html",[39,1.492,1457,3.458]],["body/controllers/HealthController.html",[3,0.085,4,0.085,5,0.068,7,0.308,17,0.008,19,1.033,21,0.371,31,0.183,35,0.085,36,0.203,37,0.005,38,0.005,39,1.579,41,1.614,43,1.505,46,1.096,48,0.718,68,1.21,176,2.409,231,1.186,232,2.314,366,3.113,1457,4.925,1458,4.288,1459,5.771,1460,6.978,1461,4.834,1462,4.834,1463,7.354,1464,6.506,1465,7.354,1466,7.354,1467,7.354,1468,3.928,1469,4.834,1470,4.834,1471,4.834,1472,6.506,1473,3.659,1474,6.506,1475,6.506,1476,6.506,1477,4.834,1478,4.834,1479,6.506,1480,7.867,1481,6.506,1482,4.834,1483,4.834,1484,4.834,1485,4.834,1486,4.288,1487,4.834,1488,4.288,1489,4.288,1490,4.834,1491,4.834,1492,4.834,1493,4.834]],["title/modules/HealthModule.html",[72,1.316,89,3.256]],["body/modules/HealthModule.html",[3,0.113,4,0.113,5,0.091,17,0.008,31,0.237,35,0.113,36,0.271,37,0.006,38,0.006,41,2.61,48,0.957,72,2.253,74,2.584,89,5.573,99,2.716,1457,6.374,1468,5.235,1494,6.442,1495,7.82,1496,6.442]],["title/injectables/JwtAuthenticationGuard.html",[221,2.51,299,0.939]],["body/injectables/JwtAuthenticationGuard.html",[3,0.117,4,0.117,5,0.094,17,0.007,31,0.225,35,0.117,36,0.281,37,0.006,38,0.006,48,0.993,221,4.395,281,3.809,299,1.643,300,2.385,576,2.749,1497,5.061,1498,5.433,1499,5.061,1500,5.433]],["title/injectables/JwtRefreshGuard.html",[224,3.458,299,0.939]],["body/injectables/JwtRefreshGuard.html",[3,0.116,4,0.116,5,0.093,17,0.007,31,0.224,35,0.116,36,0.278,37,0.006,38,0.006,48,0.985,182,4.48,224,6.024,254,3.304,281,3.777,299,1.635,300,2.365,576,2.726,1497,5.019,1499,5.019,1500,5.388,1501,5.881]],["title/injectables/JwtRefreshTokenStrategy.html",[270,3.256,299,0.939]],["body/injectables/JwtRefreshTokenStrategy.html",[3,0.077,4,0.077,5,0.062,7,0.279,14,0.886,16,0.349,17,0.008,21,0.468,31,0.237,35,0.077,36,0.184,37,0.005,38,0.005,43,1.409,46,0.996,48,0.652,49,3.973,50,1.762,55,1.319,68,1.525,104,1.111,105,0.944,113,3.925,162,2.124,179,2.016,182,5.107,188,4.198,193,1.679,215,3.885,216,2.829,222,3.756,231,1.495,232,1.792,233,1.908,254,3.037,255,4.952,270,4.343,281,2.502,299,1.252,300,1.567,335,4.868,336,3.13,360,4.987,576,1.806,844,2.189,1096,3.13,1497,5.298,1502,3.896,1503,5.686,1504,4.392,1505,6.094,1506,4.392,1507,4.613,1508,3.569,1509,4.613,1510,3.13,1511,3.325,1512,3.569,1513,3.569,1514,4.392,1515,3.569,1516,4.392,1517,4.392,1518,4.392,1519,4.392,1520,4.392]],["title/injectables/JwtStrategy.html",[271,3.256,299,0.939]],["body/injectables/JwtStrategy.html",[3,0.083,4,0.083,5,0.067,7,0.301,14,0.933,16,0.368,17,0.008,21,0.493,31,0.242,35,0.083,36,0.199,37,0.005,38,0.005,43,1.483,46,1.073,48,0.703,49,4.064,50,1.898,68,1.605,104,1.17,105,0.994,113,4.131,179,2.096,188,3.625,193,1.809,215,4.01,216,3.048,222,2.917,231,1.574,232,1.886,233,2.008,254,2.358,271,4.571,281,2.696,295,3.846,299,1.318,300,1.688,335,5.023,336,3.373,360,3.373,576,1.946,844,2.358,1096,3.373,1503,5.912,1507,3.583,1508,3.846,1509,3.583,1510,3.373,1511,3.583,1512,3.846,1513,3.846,1515,3.846,1521,4.198,1522,4.733,1523,5.689,1524,4.733,1525,4.198,1526,4.198,1527,4.198]],["title/injectables/JwtTwoFactorGuard.html",[299,0.939,1528,3.256]],["body/injectables/JwtTwoFactorGuard.html",[3,0.115,4,0.115,5,0.092,17,0.007,31,0.223,35,0.115,36,0.276,37,0.006,38,0.006,48,0.977,281,3.745,286,5.099,287,4.686,290,4.053,299,1.627,300,2.345,576,2.703,1499,4.977,1500,5.343,1528,5.642,1529,4.443,1530,5.832]],["title/injectables/JwtTwoFactorStrategy.html",[272,3.256,299,0.939]],["body/injectables/JwtTwoFactorStrategy.html",[3,0.077,4,0.077,5,0.062,7,0.279,14,0.884,15,2.098,16,0.349,17,0.008,21,0.467,31,0.237,35,0.077,36,0.184,37,0.005,38,0.005,43,1.407,46,0.993,48,0.651,49,3.969,50,1.757,55,1.315,68,1.749,104,1.109,105,0.942,113,3.917,179,2.013,188,3.482,193,1.674,215,3.881,216,2.821,222,3.749,231,1.492,232,1.789,233,1.904,245,1.598,254,2.183,259,3.885,272,4.335,281,2.495,286,4.862,287,4.98,290,2.7,295,3.56,299,1.25,300,1.563,335,4.862,336,3.122,360,3.122,576,1.801,844,2.183,1096,3.122,1503,5.678,1507,4.605,1508,3.56,1509,4.605,1510,3.122,1511,3.316,1512,3.56,1513,3.56,1515,3.56,1523,5.395,1526,3.885,1527,3.885,1529,4.722,1531,3.885,1532,4.38,1533,4.38,1534,4.38]],["title/injectables/LocalAuthenticationGuard.html",[226,3.458,299,0.939]],["body/injectables/LocalAuthenticationGuard.html",[3,0.117,4,0.117,5,0.094,17,0.007,31,0.225,35,0.117,36,0.281,37,0.006,38,0.006,48,0.993,226,6.054,281,3.809,299,1.643,300,2.385,576,2.749,1498,5.433,1499,5.061,1535,5.93,1536,6.686]],["title/entities/LocalFile.html",[0,1.788,1537,3.087]],["body/entities/LocalFile.html",[0,2.702,2,2.716,3,0.092,4,0.092,5,0.074,7,0.336,8,1.31,9,2.938,12,2.002,16,0.467,17,0.008,18,1.747,19,1.742,20,4.855,21,0.626,24,1.798,25,4.224,31,0.149,33,1.843,35,0.092,36,0.222,37,0.006,38,0.006,366,4.951,821,3.766,823,5.194,828,4.294,829,4.294,1537,4.664,1538,5.212,1539,6.871,1540,6.246,1541,5.284,1542,4.687]],["title/interfaces/LocalFileDto.html",[434,2.209,1543,3.458]],["body/interfaces/LocalFileDto.html",[3,0.108,4,0.108,5,0.087,7,0.394,8,1.448,16,0.474,17,0.007,18,1.877,35,0.108,37,0.006,38,0.006,366,5.563,434,2.993,436,3.816,823,5.836,1538,3.816,1540,7.019,1543,5.778,1544,5.491,1545,5.491]],["title/controllers/LocalFilesController.html",[39,1.492,1546,3.458]],["body/controllers/LocalFilesController.html",[3,0.082,4,0.082,5,0.09,7,0.299,12,1.664,14,0.684,16,0.366,17,0.008,19,1.006,21,0.361,24,1.889,31,0.229,35,0.082,36,0.198,37,0.005,38,0.005,39,1.537,41,1.571,43,1.477,46,1.067,48,0.699,52,2.419,55,1.918,68,1.178,104,0.858,105,0.729,108,2.9,143,3.781,162,2.275,176,2.344,179,2.09,193,1.799,227,3.781,233,1.473,245,1.717,347,1.842,366,3.03,390,2.9,391,4.836,393,2.9,405,3.03,469,4.553,586,3.639,831,3.823,833,4.317,834,6.434,835,4.173,836,5.799,838,4.836,839,3.823,841,3.353,843,3.562,844,2.344,846,3.823,847,3.823,850,3.823,851,3.823,852,3.823,853,4.173,855,4.173,1306,4.173,1538,3.938,1546,4.836,1547,4.705,1548,4.705,1549,4.705,1550,4.901,1551,4.705,1552,4.705,1553,4.705,1554,4.173,1555,4.173]],["title/interfaces/LocalFilesInterceptorOptions.html",[434,2.209,1556,3.458]],["body/interfaces/LocalFilesInterceptorOptions.html",[3,0.079,4,0.079,5,0.063,7,0.287,8,1.177,14,1.204,16,0.438,17,0.008,18,1.668,31,0.226,35,0.079,36,0.189,37,0.005,38,0.005,48,0.669,49,2.998,50,1.807,55,2.129,68,1.552,104,0.821,143,2.666,299,1.274,347,1.764,366,4.921,434,2.178,436,2.777,693,2.475,787,3.21,844,2.245,1096,3.21,1184,3.66,1215,6.29,1486,3.996,1538,2.777,1556,5.369,1557,3.66,1558,6.777,1559,7.107,1560,7.107,1561,4.505,1562,6.29,1563,5.039,1564,7.64,1565,4.505,1566,4.505,1567,6.201,1568,4.505,1569,4.505,1570,4.505,1571,3.41,1572,4.505,1573,4.505,1574,4.505,1575,6.201,1576,4.505,1577,4.505,1578,4.505,1579,4.505,1580,4.505,1581,4.505,1582,4.505,1583,4.505]],["title/modules/LocalFilesModule.html",[72,1.316,90,3.087]],["body/modules/LocalFilesModule.html",[3,0.093,4,0.093,5,0.075,17,0.008,31,0.245,35,0.093,36,0.223,37,0.006,38,0.006,41,2.314,48,0.79,50,2.134,72,1.997,74,2.134,75,3,90,5.979,95,3.166,96,2.429,97,2.364,99,2.243,110,3.949,143,3.148,167,3.256,227,4.102,277,4.273,416,2.923,417,1.898,841,3.791,859,4.719,861,3.279,862,4.719,1537,3.594,1538,3.279,1546,5.838,1550,6.268,1584,4.719,1585,4.719,1586,4.719,1587,4.719,1588,5.319]],["title/injectables/LocalFilesService.html",[299,0.939,1550,3.087]],["body/injectables/LocalFilesService.html",[3,0.071,4,0.071,5,0.102,7,0.257,12,1.054,14,1.06,16,0.418,17,0.008,21,0.56,24,2.084,31,0.217,33,1.411,35,0.071,36,0.17,37,0.005,38,0.005,43,1.33,46,1.518,48,0.601,55,1.727,68,1.44,104,1.329,105,1.129,143,4.557,179,2.467,193,2.199,231,1.411,232,1.19,245,2.66,299,1.182,300,1.443,346,2.08,347,1.584,417,1.443,423,3.525,430,2.016,577,3.545,861,2.494,864,3.287,866,5.102,872,6.69,874,5.488,875,5.102,882,4.674,1537,2.734,1538,4.747,1543,5.518,1550,3.887,1587,3.588,1589,6.693,1590,5.752,1591,4.046,1592,4.046,1593,5.752,1594,4.046,1595,4.046,1596,4.046,1597,5.752,1598,4.046,1599,4.046,1600,4.046,1601,4.046,1602,4.046,1603,4.046,1604,4.046,1605,4.046,1606,4.046]],["title/injectables/LocalStrategy.html",[273,3.256,299,0.939]],["body/injectables/LocalStrategy.html",[3,0.089,4,0.089,5,0.072,7,0.325,14,0.982,15,1.535,16,0.387,17,0.008,18,1.731,21,0.519,31,0.236,35,0.089,36,0.215,37,0.005,38,0.005,43,1.562,46,1.16,48,0.76,52,2.629,68,1.28,104,1.232,105,1.046,113,4.351,179,2.18,217,5.086,218,3.456,227,3.026,231,1.255,273,4.814,281,2.913,299,1.388,300,1.824,313,3.173,342,4.96,431,3.871,576,2.103,607,3.266,1507,3.871,1509,3.871,1510,3.644,1511,3.871,1525,4.536,1607,4.536,1608,5.114,1609,5.114,1610,6.755,1611,5.114,1612,5.114,1613,5.114]],["title/entities/Log.html",[0,1.788,783,2.816]],["body/entities/Log.html",[0,2.628,2,2.604,3,0.089,4,0.089,5,0.071,7,0.322,8,1.274,9,3.52,12,1.961,16,0.478,17,0.008,18,1.727,19,1.782,20,4.805,21,0.641,24,1.748,25,4.137,31,0.143,33,1.767,35,0.089,36,0.213,37,0.005,38,0.005,563,5.081,712,5.699,713,5.699,714,5.365,783,4.137,1614,4.493,1615,7.529,1616,5.065,1617,7.529,1618,5.065,1619,5.065,1620,5.065,1621,5.065]],["title/classes/LogInDto.html",[36,0.192,191,3.458]],["body/classes/LogInDto.html",[3,0.099,4,0.099,5,0.08,7,0.361,8,1.373,16,0.414,17,0.008,18,1.687,19,1.546,21,0.556,31,0.204,35,0.099,36,0.304,37,0.006,38,0.006,191,5.475,212,2.594,313,3.737,318,4.658,342,5.331,573,1.238,669,3.397,670,3.397,671,2.121,766,5.475,774,4.617,776,4.617,1247,5.67,1622,5.039,1623,5.681,1624,7.232,1625,5.681,1626,5.681,1627,5.681]],["title/modules/LoggerModule.html",[72,1.316,91,3.256]],["body/modules/LoggerModule.html",[3,0.093,4,0.093,5,0.075,17,0.008,31,0.245,35,0.093,36,0.223,37,0.006,38,0.006,48,0.79,50,2.134,72,1.997,74,2.134,75,3,91,6.465,95,3.166,96,2.429,97,2.364,99,2.243,110,3.949,167,3.256,277,4.273,416,2.923,417,1.898,778,6.61,782,5.871,783,3.279,806,4.719,890,3.791,1628,4.719,1629,4.719,1630,4.719,1631,5.319,1632,4.719,1633,4.719,1634,5.319]],["title/injectables/LogsMiddleware.html",[145,3.458,299,0.939]],["body/injectables/LogsMiddleware.html",[3,0.082,4,0.082,5,0.066,7,0.297,8,1.205,14,0.678,16,0.267,17,0.008,21,0.488,31,0.179,35,0.082,36,0.196,37,0.005,38,0.005,43,1.468,46,1.057,48,0.693,55,2.168,68,1.807,104,0.85,105,0.722,107,3.151,145,4.807,188,4.169,232,2.124,233,2.261,299,1.305,300,1.664,318,3.003,319,3.151,347,2.486,693,2.563,714,3.323,836,5.888,844,2.324,890,5.524,921,4.136,923,4.136,1211,6.876,1473,4.807,1635,4.136,1636,6.35,1637,7.752,1638,4.663,1639,6.35,1640,4.663,1641,6.35,1642,4.663,1643,6.35,1644,6.35,1645,7.752,1646,6.35,1647,4.663,1648,4.663,1649,4.663]],["title/injectables/LogsService.html",[299,0.939,782,3.087]],["body/injectables/LogsService.html",[3,0.089,4,0.089,5,0.071,7,0.323,14,0.978,16,0.385,17,0.008,21,0.517,31,0.235,33,1.772,35,0.089,36,0.213,37,0.005,38,0.005,43,1.556,46,1.152,48,0.755,55,1.526,68,1.272,104,1.227,105,1.042,162,2.457,179,2.173,193,1.942,231,1.651,232,1.494,245,2.455,299,1.382,300,1.813,417,1.813,423,3.881,430,2.532,494,2.792,709,6.076,782,4.545,783,4.146,822,3.273,1633,4.507,1650,4.507,1651,6.727,1652,5.081,1653,5.081,1654,6.727,1655,6.727,1656,5.081,1657,5.081,1658,5.081,1659,6.727,1660,5.081,1661,5.081,1662,5.081]],["title/classes/ObjectWithIdDto.html",[36,0.192,684,3.458]],["body/classes/ObjectWithIdDto.html",[3,0.112,4,0.112,5,0.09,7,0.407,8,1.477,12,2.185,16,0.366,17,0.007,19,1.366,21,0.491,24,2.027,31,0.18,35,0.112,36,0.327,37,0.006,38,0.006,573,1.393,671,2.386,684,5.891,1178,5.404,1663,6.902,1664,5.668,1665,6.39]],["title/classes/PaginatedResultDto.html",[36,0.192,616,2.704]],["body/classes/PaginatedResultDto.html",[3,0.095,4,0.095,5,0.077,7,0.347,8,1.336,16,0.472,17,0.008,19,1.762,21,0.633,24,2.277,31,0.153,35,0.095,36,0.296,37,0.006,38,0.006,573,1.187,616,4.166,624,4.443,626,4.443,671,2.034,688,6.919,822,5.024,1178,5.731,1348,6.338,1666,7.573,1667,4.832,1668,7.04,1669,5.447,1670,5.447,1671,5.447,1672,5.447]],["title/classes/PaginationDto.html",[36,0.192,650,2.426]],["body/classes/PaginationDto.html",[3,0.099,4,0.099,5,0.079,7,0.359,8,1.366,14,1.215,16,0.495,17,0.008,19,1.539,21,0.553,24,2.299,31,0.203,35,0.099,36,0.333,37,0.006,38,0.006,573,1.23,624,4.517,626,4.517,650,3.824,671,2.106,687,3.633,728,4.517,1178,5.107,1373,5.85,1673,5.003,1674,5.641,1675,5.641,1676,5.641,1677,7.199]],["title/entities/Post.html",[0,1.788,207,1.977]],["body/entities/Post.html",[0,2.107,2,1.896,3,0.065,4,0.065,5,0.052,7,0.342,8,1.021,9,3.552,12,1.655,14,1.016,15,2.23,16,0.47,17,0.008,18,1.653,19,1.754,20,4.261,21,0.631,24,1.402,25,3.492,31,0.197,33,1.287,35,0.065,36,0.155,37,0.004,38,0.004,162,3.75,207,2.329,450,5.636,462,5.478,568,3.272,572,4.774,583,4.561,585,4.578,586,3.619,588,4.774,594,4.074,595,1.959,598,5.163,721,5.636,722,5.163,1251,4.373,1678,3.272,1679,3.688,1680,3.688,1681,3.688,1682,3.688,1683,3.272,1684,3.688,1685,3.272,1686,5.382,1687,3.688,1688,3.688,1689,3.688,1690,5.382,1691,5.163,1692,3.688,1693,3.688,1694,3.688,1695,3.688,1696,5.382,1697,4.774,1698,3.688,1699,3.688]],["title/classes/PostNotFoundException.html",[36,0.192,1700,3.458]],["body/classes/PostNotFoundException.html",[3,0.109,4,0.109,5,0.087,12,1.619,14,0.904,16,0.356,17,0.007,21,0.477,24,2.159,31,0.175,35,0.109,36,0.261,37,0.006,38,0.006,48,0.923,104,1.133,105,0.963,231,1.525,573,1.355,575,4.199,576,3.145,577,5.109,579,4.429,582,4.199,623,5.169,1388,6.786,1700,5.791,1701,6.786,1702,6.215]],["title/controllers/PostsController.html",[39,1.492,1703,3.458]],["body/controllers/PostsController.html",[3,0.059,4,0.059,5,0.047,7,0.213,12,1.565,14,1.038,16,0.409,17,0.008,18,1.21,19,1.601,21,0.576,31,0.225,35,0.059,36,0.141,37,0.004,38,0.004,39,1.096,41,1.119,43,1.16,46,1.699,48,0.498,52,1.724,68,1.875,104,1.302,105,1.106,176,1.671,179,2.352,185,3.799,188,2.994,193,2.297,205,3.302,207,3.456,208,3.092,209,1.91,211,1.843,212,1.531,228,2.16,233,1.05,236,2.266,286,2.16,287,2.39,390,3.092,392,2.539,396,1.985,468,5.617,469,3.575,481,2.39,489,2.725,490,2.39,491,2.725,494,1.843,507,2.725,511,2.725,549,2.39,609,2.39,718,4.753,1528,2.39,1703,3.797,1704,2.975,1705,5.33,1706,4.449,1707,5.916,1708,4.449,1709,4.449,1710,5.33,1711,2.975,1712,3.353,1713,3.353,1714,3.353,1715,3.353,1716,3.353,1717,3.353,1718,3.353,1719,3.353,1720,2.975,1721,5.016,1722,3.353,1723,4.449,1724,3.353,1725,4.753,1726,3.353,1727,3.353,1728,3.353,1729,3.353,1730,4.449,1731,4.06,1732,2.975,1733,3.353,1734,3.353,1735,3.353,1736,3.353,1737,3.353,1738,3.353,1739,3.353,1740,6.009,1741,3.353,1742,3.353,1743,3.353,1744,3.353]],["title/modules/PostsModule.html",[72,1.316,92,3.256]],["body/modules/PostsModule.html",[3,0.101,4,0.101,5,0.081,17,0.008,31,0.244,35,0.101,36,0.241,37,0.006,38,0.006,41,2.431,48,0.853,72,2.098,74,2.303,75,3.151,92,6.318,95,3.326,96,2.623,97,2.552,99,2.422,167,3.42,207,2.485,416,3.156,417,2.049,1703,6.053,1731,5.991,1732,5.094,1745,5.094,1746,5.094,1747,5.743,1748,5.094,1749,5.743,1750,5.743]],["title/injectables/PostsService.html",[299,0.939,1731,3.087]],["body/injectables/PostsService.html",[3,0.053,4,0.053,5,0.043,7,0.193,12,1.778,14,1.048,15,2.323,16,0.413,17,0.008,18,1.137,21,0.576,24,2.066,31,0.218,33,1.056,35,0.053,36,0.127,37,0.004,38,0.004,43,1.074,46,1.633,48,0.45,55,2.05,68,1.709,104,1.314,105,1.116,179,2.543,193,2.61,207,3.564,231,1.139,232,0.89,245,2.737,299,0.954,300,1.08,346,3.254,347,2.478,396,1.792,417,1.08,423,3.061,430,1.508,494,1.664,543,2.158,548,3.48,549,4.024,555,2.292,557,2.292,577,1.866,582,2.046,585,3.902,595,1.608,625,2.046,718,4.511,1700,2.292,1705,4.118,1706,4.118,1707,5.615,1708,4.118,1709,4.118,1710,4.118,1711,4.118,1720,4.118,1723,5.008,1725,4.511,1730,4.118,1731,3.137,1748,2.685,1751,2.685,1752,3.027,1753,3.027,1754,4.642,1755,3.027,1756,4.642,1757,3.027,1758,3.027,1759,4.642,1760,3.027,1761,3.027,1762,4.642,1763,3.027,1764,3.027,1765,3.027,1766,3.027,1767,4.642,1768,5.646,1769,3.027,1770,3.027,1771,3.027,1772,3.027,1773,4.642,1774,3.027,1775,3.027,1776,3.027,1777,5.646,1778,3.027]],["title/entities/PrivateFile.html",[0,1.788,1260,2.942]],["body/entities/PrivateFile.html",[0,2.69,2,2.698,3,0.092,4,0.092,5,0.074,7,0.334,8,1.304,9,3.459,12,1.996,15,2.533,16,0.439,17,0.008,18,1.384,19,1.638,20,4.21,21,0.589,24,1.79,25,4.21,31,0.194,33,1.831,35,0.092,36,0.22,37,0.006,38,0.006,587,4.266,594,5.202,595,2.788,733,4.337,821,3.741,1234,5.46,1260,4.426,1779,7.21,1780,5.249,1781,5.249,1782,6.872,1783,5.249]],["title/entities/Product.html",[0,1.788,734,2.146]],["body/entities/Product.html",[0,2.486,2,2.397,3,0.082,4,0.082,5,0.066,7,0.297,8,1.539,9,3.475,12,1.881,14,0.923,15,2.435,16,0.465,17,0.008,18,1.562,19,1.657,20,4.26,21,0.596,25,2.563,31,0.218,33,1.627,35,0.082,36,0.196,37,0.005,38,0.005,105,1.118,162,3.07,435,5.146,441,5.146,587,3.789,594,4.807,595,2.477,733,4.169,734,2.983,745,4.136,746,5.633,747,4.136,825,3.789,1691,5.16,1784,4.136,1785,6.35,1786,4.663,1787,4.663,1788,6.35,1789,4.663,1790,6.35,1791,4.663]],["title/classes/ProductNotFoundException.html",[36,0.192,938,3.256]],["body/classes/ProductNotFoundException.html",[3,0.109,4,0.109,5,0.087,12,1.619,14,0.904,16,0.356,17,0.007,18,1.67,21,0.477,31,0.175,35,0.109,36,0.261,37,0.006,38,0.006,48,0.923,104,1.133,105,0.963,231,1.525,573,1.355,575,4.199,576,3.145,577,5.109,579,4.429,582,4.199,874,5.452,938,5.452,1229,6.786,1792,6.786,1793,6.215]],["title/controllers/ProductsController.html",[39,1.492,1794,3.458]],["body/controllers/ProductsController.html",[3,0.054,4,0.054,5,0.043,7,0.195,12,1.885,14,0.998,15,2.173,16,0.393,17,0.008,18,1.603,19,1.467,21,0.527,31,0.236,35,0.054,36,0.129,37,0.004,38,0.004,39,1,41,1.022,43,1.083,46,1.556,48,0.455,52,1.574,55,1.707,68,1.718,104,1.251,105,1.063,176,1.526,179,2.085,185,4.627,188,3.966,205,3.125,206,2.318,207,2.027,208,3.925,209,1.745,211,1.683,212,1.399,221,1.683,223,1.972,228,1.972,233,0.959,234,1.972,236,3.842,390,1.888,392,2.318,396,1.812,408,2.716,451,3.842,452,4.052,454,3.338,455,3.545,457,4.305,469,3.338,481,2.182,482,2.489,483,2.318,484,2.716,485,1.972,486,2.489,494,1.683,507,3.806,511,2.489,533,2.489,535,2.489,539,2.489,607,3.499,608,3.806,609,2.182,610,2.182,614,2.716,616,1.812,617,2.069,618,2.069,622,2.716,624,2.668,625,2.069,626,2.668,627,2.489,734,1.438,736,4.661,740,4.052,755,1.888,846,2.489,1277,2.069,1343,2.489,1392,4.821,1794,3.545,1795,2.716,1796,2.716,1797,3.062,1798,3.062,1799,3.062,1800,3.062,1801,3.062,1802,3.062,1803,3.062,1804,5.247,1805,3.062,1806,3.842,1807,2.716,1808,3.062,1809,3.062,1810,3.062,1811,3.062,1812,3.062,1813,3.062,1814,3.062,1815,3.062,1816,3.062,1817,3.062,1818,3.062]],["title/modules/ProductsModule.html",[72,1.316,93,3.256]],["body/modules/ProductsModule.html",[3,0.087,4,0.087,5,0.07,17,0.008,31,0.257,35,0.087,36,0.209,37,0.005,38,0.005,41,2.213,48,0.738,72,1.91,74,1.993,75,2.868,93,6.075,95,3.027,96,2.27,97,2.209,99,2.096,167,3.113,416,2.731,417,1.773,633,5.879,634,2.639,636,4.408,734,2.334,748,5.018,755,3.063,933,5.018,1323,5.018,1359,5.018,1794,5.646,1806,5.76,1807,4.408,1819,4.408,1820,4.408,1821,4.97,1822,4.97,1823,7.956,1824,6.628,1825,4.97,1826,5.018,1827,4.97,1828,4.97,1829,4.97]],["title/injectables/ProductsService.html",[299,0.939,1806,3.087]],["body/injectables/ProductsService.html",[3,0.056,4,0.056,5,0.045,7,0.202,12,1.515,14,1.068,15,2.463,16,0.421,17,0.008,18,1.621,21,0.564,24,1.515,31,0.241,35,0.056,36,0.134,37,0.004,38,0.004,43,1.114,46,1.582,48,0.472,52,1.634,68,1.746,104,1.339,105,1.137,179,2.434,193,1.215,231,0.78,232,0.935,299,0.99,300,1.134,347,2.278,396,1.881,451,3.931,452,4.146,454,3.434,455,3.648,457,3.648,494,1.747,533,3.915,535,3.915,539,3.915,595,1.688,607,3.55,616,1.881,617,2.148,618,2.148,634,1.688,644,2.82,645,6.513,646,6.766,650,4.173,652,2.148,654,2.82,659,2.82,661,2.82,730,2.265,733,4.343,734,1.493,736,4.729,740,3.434,755,1.959,756,4.405,928,2.265,1277,3.256,1329,2.265,1333,2.82,1361,2.265,1362,2.82,1796,2.82,1804,5.309,1806,3.256,1830,2.82,1831,3.179,1832,3.179,1833,3.179,1834,3.179,1835,3.179,1836,3.179,1837,3.179,1838,3.179,1839,2.265,1840,3.179,1841,4.818,1842,4.818,1843,3.179,1844,3.179,1845,3.179,1846,3.179,1847,3.179,1848,3.179]],["title/entities/PublicFile.html",[0,1.788,1262,2.942]],["body/entities/PublicFile.html",[0,2.781,2,2.839,3,0.097,4,0.097,5,0.078,7,0.351,8,1.348,9,3.492,12,2.045,16,0.45,17,0.007,18,1.67,19,1.678,20,4.712,21,0.603,24,1.85,25,4.315,31,0.156,33,1.927,35,0.097,36,0.232,37,0.006,38,0.006,821,3.936,828,4.488,829,4.488,1005,5.944,1234,5.595,1262,4.575,1542,4.899,1849,7.352]],["title/classes/RegisterDto.html",[36,0.192,201,3.087]],["body/classes/RegisterDto.html",[3,0.086,4,0.086,5,0.069,7,0.313,8,1.25,14,0.958,16,0.454,17,0.008,18,1.777,19,1.694,21,0.609,31,0.185,35,0.086,36,0.277,37,0.005,38,0.005,105,1.15,201,4.451,212,2.249,313,3.487,342,4.575,573,1.073,625,4.451,667,2.706,669,3.723,670,3.723,671,1.839,728,3.752,765,6.032,766,5.619,769,4.367,772,6.584,774,4.001,775,4.367,776,4.001,777,4.367,1247,4.694,1279,3.509,1850,4.367,1851,4.924,1852,4.924,1853,4.924,1854,4.924,1855,5.843,1856,6.587,1857,6.587,1858,5.843,1859,4.924,1860,4.924,1861,4.924,1862,4.924]],["title/interfaces/RequestWithUser.html",[185,2.602,434,2.209]],["body/interfaces/RequestWithUser.html",[3,0.11,4,0.11,5,0.089,7,0.402,8,1.466,15,2.786,16,0.362,17,0.008,31,0.218,35,0.11,37,0.006,38,0.006,185,4.4,188,4.159,431,4.78,434,3.053,436,3.892,576,3.176,844,3.146,1863,5.6,1864,5.6]],["title/interfaces/TokenPayload.html",[335,2.942,434,2.209]],["body/interfaces/TokenPayload.html",[3,0.112,4,0.112,5,0.09,7,0.407,8,1.477,14,1.132,16,0.446,17,0.007,24,2.185,35,0.112,37,0.006,38,0.006,316,7.746,320,5.901,335,5.012,434,3.09,436,3.939,1147,6.352,1865,5.668,1866,5.192]],["title/classes/TokenVerificationDto.html",[36,0.192,1399,3.458]],["body/classes/TokenVerificationDto.html",[3,0.11,4,0.11,5,0.088,7,0.4,8,1.463,16,0.36,17,0.007,18,1.552,19,1.344,21,0.483,31,0.177,35,0.11,36,0.324,37,0.006,38,0.006,254,4.152,573,1.371,667,3.456,669,3.619,670,3.619,671,2.348,1395,5.207,1399,5.834,1867,6.835,1868,5.578,1869,6.289]],["title/classes/TwoFactorAuthenticationCodeDto.html",[36,0.192,1870,3.458]],["body/classes/TwoFactorAuthenticationCodeDto.html",[3,0.108,4,0.108,5,0.087,7,0.394,8,1.448,16,0.355,17,0.007,18,1.537,19,1.323,21,0.476,31,0.174,35,0.108,36,0.321,37,0.006,38,0.006,177,4.915,290,4.704,573,1.349,667,3.402,669,3.585,670,3.585,671,2.312,1529,5.157,1870,5.778,1871,6.77,1872,5.491,1873,6.724,1874,6.19]],["title/controllers/TwoFactorAuthenticationController.html",[39,1.492,276,3.458]],["body/controllers/TwoFactorAuthenticationController.html",[3,0.05,4,0.05,5,0.04,7,0.182,14,0.893,16,0.381,17,0.008,19,1.312,21,0.472,31,0.22,35,0.05,36,0.12,37,0.004,38,0.004,39,0.934,41,0.954,43,1.027,46,1.392,48,0.425,55,1.997,68,1.112,104,1.12,105,0.951,162,1.382,176,1.424,177,3.955,178,4.123,179,2.375,183,3.609,184,2.536,185,4.759,188,3.972,193,1.698,205,3.374,206,2.164,207,1.237,208,4.099,209,1.628,211,1.571,212,1.305,215,2.8,216,1.841,217,3.223,218,3.001,221,1.571,222,1.762,223,1.841,228,1.841,230,2.164,231,0.701,232,1.602,233,1.705,234,3.955,236,4.493,240,3.362,242,2.323,243,1.841,245,1.987,248,4.831,274,3.68,276,3.362,286,1.841,289,5.034,290,4.528,346,2.8,347,2.132,836,4.963,838,2.164,844,1.424,937,2.037,1253,4.123,1396,2.323,1529,4.493,1870,6.034,1873,5.72,1875,3.939,1876,5.446,1877,5.446,1878,2.858,1879,2.858,1880,2.858,1881,2.858,1882,2.858,1883,2.858,1884,6.141,1885,2.858,1886,2.858,1887,2.858,1888,2.858,1889,2.858,1890,2.858,1891,2.858,1892,2.858,1893,2.858,1894,2.858,1895,3.939,1896,2.858,1897,2.858,1898,2.858,1899,2.858,1900,7.038,1901,5.446,1902,5.446,1903,5.446,1904,2.858,1905,2.858,1906,2.858,1907,2.858,1908,2.536]],["title/injectables/TwoFactorAuthenticationService.html",[274,3.087,299,0.939]],["body/injectables/TwoFactorAuthenticationService.html",[3,0.066,4,0.066,5,0.053,7,0.239,9,3.213,14,1.024,15,2.597,16,0.403,17,0.008,18,1.571,21,0.541,31,0.227,35,0.066,36,0.157,37,0.004,38,0.004,43,1.259,46,1.454,48,0.557,49,3.891,50,1.504,55,1.635,68,1.605,104,1.284,105,1.09,179,2.247,193,2.082,215,4.009,216,2.415,231,1.336,232,1.602,233,1.705,245,1.368,254,1.868,258,3.047,274,3.68,289,5.66,290,4.608,294,5.329,299,1.119,300,1.338,307,3.047,431,2.838,836,4.756,843,2.838,844,1.868,1411,3.047,1417,3.326,1529,5.052,1873,5.212,1895,6.918,1909,5.446,1910,6.414,1911,5.446,1912,5.446,1913,3.749,1914,3.749,1915,3.749,1916,5.446,1917,3.749,1918,3.749,1919,3.326,1920,3.749,1921,3.326,1922,3.749,1923,3.749,1924,3.749,1925,3.749,1926,3.749,1927,3.749,1928,3.749,1929,3.749]],["title/classes/TypeOrmConfig.html",[36,0.192,124,3.458]],["body/classes/TypeOrmConfig.html",[2,2.316,3,0.079,4,0.079,5,0.063,7,0.287,14,0.655,16,0.355,17,0.008,21,0.346,31,0.2,35,0.109,36,0.189,37,0.005,38,0.005,43,1.434,46,1.021,49,4.179,50,1.807,55,2.129,56,3.41,68,1.552,99,1.9,104,0.821,105,0.698,110,3.533,124,4.695,162,3.429,179,1.298,292,3.66,293,3.66,318,2.901,321,4.921,342,2.777,347,1.764,417,1.607,573,0.982,607,2.178,787,5.054,832,2.777,887,4.695,890,4.419,926,6.065,1107,3.66,1930,3.66,1931,7.091,1932,6.201,1933,6.201,1934,4.505,1935,4.505,1936,5.501,1937,4.505,1938,3.996,1939,4.505,1940,4.505,1941,4.505,1942,4.505,1943,4.505,1944,4.505,1945,4.505,1946,6.201,1947,4.505,1948,6.201,1949,4.505,1950,3.996,1951,4.505,1952,4.505,1953,3.996,1954,4.505]],["title/classes/UpdateCategoryDto.html",[36,0.192,478,3.256]],["body/classes/UpdateCategoryDto.html",[3,0.103,4,0.103,5,0.083,7,0.376,8,1.408,12,2.111,16,0.425,17,0.007,18,1.494,19,1.585,21,0.57,24,1.932,31,0.167,35,0.103,36,0.312,37,0.006,38,0.006,105,1.255,478,5.286,573,1.289,669,3.484,670,3.484,671,2.208,673,4.806,674,5.246,728,4.617,1178,4.778,1955,7.189,1956,5.246,1957,5.246,1958,5.914]],["title/classes/UpdatePermissionsDto.html",[36,0.192,383,3.256]],["body/classes/UpdatePermissionsDto.html",[3,0.101,4,0.101,5,0.081,7,0.367,8,1.385,16,0.33,17,0.008,19,1.232,21,0.443,31,0.226,35,0.101,36,0.307,37,0.006,38,0.006,162,3.873,212,2.632,383,5.201,485,5.423,573,1.256,670,3.428,671,2.152,729,5.931,1177,4.684,1180,5.931,1247,5.201,1959,5.931,1960,5.112,1961,6.509,1962,5.764,1963,5.764,1964,5.764,1965,5.764,1966,5.764,1967,5.764,1968,5.764]],["title/classes/UpdatePostDto.html",[36,0.192,1725,3.256]],["body/classes/UpdatePostDto.html",[3,0.098,4,0.098,5,0.078,7,0.355,8,1.357,12,2.055,16,0.452,17,0.007,18,1.676,19,1.686,21,0.606,24,1.862,31,0.157,35,0.098,36,0.3,37,0.006,38,0.006,573,1.217,586,4.495,669,3.706,670,3.706,671,2.084,720,4.535,722,6.412,728,4.74,1178,4.606,1725,5.096,1956,4.951,1957,6.343,1969,7.38,1970,5.581,1971,5.581,1972,5.581]],["title/classes/UpdateProductCommand.html",[36,0.192,1839,3.256]],["body/classes/UpdateProductCommand.html",[3,0.089,4,0.089,5,0.072,7,0.324,8,1.279,9,3.439,12,2.093,14,0.741,15,2.509,16,0.46,17,0.007,18,1.619,21,0.617,31,0.19,35,0.089,36,0.214,37,0.005,38,0.005,104,0.93,105,0.79,231,1.654,233,2.817,396,3.017,573,1.111,595,2.707,732,3.859,733,4.296,734,3.926,737,4.142,738,4.522,739,4.522,740,3.633,930,4.522,1804,5.647,1839,4.804,1973,7.413,1974,5.097]],["title/classes/UpdateProductDto.html",[36,0.192,1804,3.087]],["body/classes/UpdateProductDto.html",[3,0.117,4,0.117,5,0.094,17,0.007,31,0.225,35,0.117,36,0.28,37,0.006,38,0.006,451,4.499,573,1.451,576,2.737,736,4.288,740,4.745,742,5.04,1804,5.39,1975,5.906,1976,5.906,1977,5.41,1978,5.41,1979,6.658]],["title/classes/UpdateProductHandler.html",[36,0.192,1826,3.458]],["body/classes/UpdateProductHandler.html",[3,0.075,4,0.075,5,0.06,7,0.271,12,1.794,14,0.868,16,0.342,17,0.008,21,0.459,31,0.235,33,1.487,35,0.075,36,0.179,37,0.005,38,0.005,43,1.38,46,0.967,48,0.633,55,2.068,68,1.067,104,1.088,105,0.924,179,1.984,231,1.464,232,1.254,245,2.513,346,3.068,347,2.336,417,1.521,423,3.607,430,2.124,543,3.038,548,3.679,573,0.929,607,2.886,634,2.264,693,3.28,694,5.213,695,3.844,699,4.518,701,4.253,702,3.227,733,3.54,734,3.235,750,3.038,751,3.038,753,4.253,755,2.627,756,3.227,758,3.038,935,3.464,936,3.781,937,4.253,938,3.038,939,3.464,942,5.294,943,4.85,944,3.781,945,3.781,946,3.781,948,3.781,1826,4.518,1839,5.317,1980,6.108,1981,4.263,1982,4.263,1983,4.263,1984,6.886]],["title/classes/UpdateRoleDto.html",[36,0.192,387,3.256]],["body/classes/UpdateRoleDto.html",[3,0.109,4,0.109,5,0.087,7,0.395,8,1.452,16,0.356,17,0.008,19,1.328,21,0.477,31,0.215,35,0.109,36,0.321,37,0.006,38,0.006,387,5.452,399,6.11,400,5.513,573,1.355,670,3.593,671,2.321,1177,5.05,1959,6.217,1985,5.513,1986,6.215,1987,6.215,1988,6.215]],["title/classes/UpdateUserDto.html",[36,0.192,1989,3.712]],["body/classes/UpdateUserDto.html",[3,0.117,4,0.117,5,0.094,17,0.007,31,0.225,35,0.117,36,0.28,37,0.006,38,0.006,451,4.499,573,1.451,576,2.737,762,5.04,764,5.41,1976,5.906,1977,5.41,1978,5.41,1989,6.482,1990,5.906,1991,6.658,1992,6.658]],["title/entities/User.html",[0,1.788,15,1.372]],["body/entities/User.html",[0,1.334,1,4.341,2,1.057,3,0.036,4,0.036,5,0.071,7,0.131,8,0.647,9,3.559,12,1.136,14,1.272,15,1.023,16,0.478,17,0.008,18,1.518,19,1.752,20,4.29,21,0.63,24,1.322,25,2.398,28,1.823,31,0.196,32,4.991,33,0.717,35,0.036,36,0.143,37,0.003,38,0.003,105,0.872,142,1.823,162,3.964,207,2.78,313,2.049,318,4.138,321,3.907,342,2.69,399,4.542,485,3.624,486,1.67,487,1.823,549,3.11,571,1.67,687,1.324,734,3.017,765,3.546,818,2.302,825,2.769,832,2.1,833,3.43,861,2.1,1147,4.592,1180,5.462,1251,2.769,1253,2.579,1260,3.624,1262,2.194,1294,1.67,1320,3.022,1343,3.546,1473,1.556,1537,3.43,1539,1.67,1683,4.502,1685,3.87,1691,5.462,1697,4.502,1938,3.022,1961,3.546,1993,1.823,1994,4.929,1995,5.627,1996,4.363,1997,4.363,1998,4.363,1999,3.87,2000,4.363,2001,4.363,2002,3.407,2003,2.055,2004,2.055,2005,2.055,2006,2.055,2007,2.055,2008,2.055,2009,3.407,2010,2.055,2011,2.055,2012,2.055,2013,2.055,2014,2.055,2015,4.363,2016,2.055,2017,2.055,2018,2.055,2019,2.055,2020,2.055,2021,2.055,2022,2.055,2023,2.055,2024,3.407,2025,2.055,2026,3.407,2027,2.055,2028,2.055,2029,2.055,2030,5.627,2031,5.076,2032,2.055,2033,1.823,2034,2.055,2035,2.055,2036,2.055,2037,1.823,2038,3.407,2039,2.055,2040,2.055,2041,2.055,2042,2.055,2043,1.823]],["title/classes/UserNotFoundException.html",[36,0.192,2044,3.712]],["body/classes/UserNotFoundException.html",[3,0.109,4,0.109,5,0.087,12,1.619,14,0.904,16,0.356,17,0.007,21,0.477,24,2.159,31,0.175,35,0.109,36,0.261,37,0.006,38,0.006,48,0.923,104,1.133,105,0.963,231,1.525,320,5.169,573,1.355,575,4.199,576,3.145,577,5.109,579,4.429,582,4.199,2044,6.217,2045,6.786,2046,7.65,2047,6.215]],["title/controllers/UsersController.html",[39,1.492,2048,3.458]],["body/controllers/UsersController.html",[3,0.024,4,0.024,5,0.116,7,0.086,12,1.818,14,0.883,15,2.503,16,0.493,17,0.008,18,0.971,19,1.346,21,0.484,24,0.829,31,0.192,35,0.024,36,0.057,37,0.002,38,0.002,39,0.441,41,0.45,43,0.549,46,1.428,48,0.2,52,0.693,55,0.956,68,1.626,104,1.108,105,1.034,143,0.798,162,2.677,176,0.672,179,1.678,185,4.515,188,3.916,193,0.908,207,0.584,208,3.412,209,0.768,210,3.878,211,0.741,212,0.616,215,1.636,221,0.741,223,0.869,227,0.798,228,0.869,232,1.787,233,0.422,234,3.565,245,0.867,313,2.853,320,1.605,321,0.869,347,2.378,349,3.401,355,1.021,366,1.53,390,1.962,391,1.798,393,1.464,409,1.196,452,2.733,454,1.693,465,3.401,468,3.518,481,0.961,489,1.096,490,0.961,491,1.096,586,1.353,609,0.961,610,0.961,625,0.911,734,1.116,822,2.47,823,0.911,832,2.364,833,1.605,836,4.51,838,2.409,839,1.096,844,1.586,847,1.096,850,1.096,851,1.096,852,1.096,854,1.196,861,1.464,995,1.196,1231,2.409,1239,1.096,1240,3.31,1242,5.762,1249,1.693,1253,2.409,1260,1.53,1262,2.47,1266,2.823,1269,2.823,1279,5.88,1280,3.401,1281,2.107,1540,1.096,1554,1.196,1555,1.196,1558,1.196,1559,1.196,1560,1.196,1562,1.196,1563,1.096,1571,1.798,1855,1.196,1908,3.401,1994,5.554,2033,1.196,2048,1.798,2049,1.096,2050,3.183,2051,3.183,2052,3.183,2053,3.183,2054,3.183,2055,2.375,2056,2.375,2057,3.183,2058,1.349,2059,1.349,2060,3.835,2061,3.835,2062,4.822,2063,7.346,2064,3.183,2065,3.835,2066,1.349,2067,1.349,2068,1.349,2069,1.349,2070,1.349,2071,1.349,2072,1.349,2073,1.349,2074,1.349,2075,2.375,2076,1.349,2077,1.349,2078,1.349,2079,1.349,2080,1.349,2081,3.835,2082,1.349,2083,1.349,2084,1.349,2085,4.822,2086,3.183,2087,1.349,2088,4.822,2089,2.375,2090,1.349,2091,1.349,2092,5.535,2093,1.349,2094,1.349,2095,1.349,2096,3.183,2097,2.375,2098,1.349,2099,1.349,2100,1.349,2101,1.349,2102,1.349,2103,1.349,2104,1.349,2105,2.375,2106,1.349,2107,1.349,2108,1.349,2109,1.349,2110,1.349,2111,4.372,2112,1.196,2113,1.349,2114,4.372,2115,3.835,2116,5.206,2117,3.835,2118,5.822,2119,2.375,2120,1.349,2121,1.349,2122,1.349,2123,1.349,2124,1.349,2125,1.349,2126,1.349,2127,1.349,2128,1.349,2129,1.349,2130,1.349,2131,3.183,2132,1.349,2133,1.349,2134,1.349,2135,1.349,2136,1.349,2137,1.349,2138,1.349,2139,1.349,2140,1.349,2141,1.349,2142,3.835,2143,5.535,2144,1.349,2145,2.375,2146,1.349,2147,1.349,2148,1.349,2149,1.349,2150,1.349,2151,1.349,2152,1.349,2153,1.349,2154,3.835,2155,1.349,2156,1.349,2157,1.349,2158,1.349,2159,3.183,2160,1.349,2161,3.183,2162,1.349,2163,1.349,2164,1.349,2165,1.349,2166,1.349,2167,1.349,2168,1.349,2169,2.375,2170,1.349,2171,1.349,2172,1.349,2173,1.349,2174,1.349]],["title/modules/UsersModule.html",[72,1.316,94,2.816]],["body/modules/UsersModule.html",[3,0.083,4,0.083,5,0.067,15,1.425,17,0.008,31,0.246,35,0.083,36,0.199,37,0.005,38,0.005,41,2.146,48,0.705,72,1.852,74,1.904,75,2.781,82,5.684,87,5.684,90,5.684,94,5.655,95,2.935,96,2.168,97,2.11,99,2.71,140,3.208,141,5.701,143,2.809,167,3.019,215,4.686,227,2.809,277,3.962,416,2.609,417,1.693,420,4.211,832,2.926,1239,3.857,2048,5.516,2112,4.211,2175,4.211,2176,4.747,2177,4.211,2178,4.211,2179,4.747,2180,4.747,2181,4.747]],["title/interfaces/VerificationTokenPayload.html",[434,2.209,999,3.458]],["body/interfaces/VerificationTokenPayload.html",[3,0.116,4,0.116,5,0.093,7,0.422,8,1.51,16,0.38,17,0.007,18,1.717,35,0.116,37,0.006,38,0.006,254,3.304,313,4.153,434,3.206,436,4.087,664,3.643,999,6.024,1866,5.388,2182,5.881]],["title/coverage.html",[2183,5.088]],["body/coverage.html",[0,2.557,1,0.995,5,0.021,6,1.306,15,0.442,16,0.084,17,0.008,36,0.375,37,0.002,38,0.002,39,2.349,40,1.115,42,1.306,113,0.948,124,1.115,140,1.733,143,2.414,145,1.115,152,1.828,154,1.652,157,1.828,171,1.115,172,1.115,174,1.115,175,1.306,177,0.948,182,0.995,185,0.839,191,1.115,201,0.995,207,0.637,213,0.948,215,0.757,217,0.871,221,0.809,224,1.115,226,1.115,254,0.734,270,1.049,271,1.049,272,1.049,273,1.049,274,0.995,276,1.115,286,1.652,287,1.828,289,1.942,290,2.101,299,1.685,301,1.306,335,0.948,347,0.576,377,1.115,378,1.306,383,1.049,387,1.049,394,0.995,401,1.115,421,1.306,434,2.639,435,1.049,437,1.306,438,2.084,441,1.049,442,1.306,448,1.115,449,1.306,459,1.049,462,0.948,468,0.995,478,1.049,483,1.115,485,0.948,490,1.049,492,0.995,525,1.306,541,1.115,561,1.306,574,1.306,575,3.125,583,0.839,584,1.306,596,1.115,597,1.306,602,0.995,605,1.115,611,0.995,616,0.871,635,1.115,639,1.115,643,1.306,650,0.782,653,1.049,656,1.049,663,1.115,664,3,665,1.306,666,1.306,672,1.306,673,2.084,675,1.306,676,1.306,681,1.306,682,1.306,684,1.115,691,1.306,692,1.306,709,1.115,710,1.306,711,1.306,718,1.049,719,1.306,720,2.084,730,1.049,731,1.306,732,2.58,734,0.692,736,0.948,741,1.306,742,2.58,748,1.115,749,1.306,750,2.907,762,1.115,763,1.306,764,2.084,778,1.049,779,1.306,780,2.084,782,0.995,783,1.581,803,1.196,818,0.995,819,2.303,820,1.306,821,2.907,830,1.115,831,2.084,840,0.995,864,2.084,887,1.115,888,1.306,926,1.115,928,1.049,929,1.306,933,1.115,934,1.306,938,1.049,949,1.115,950,1.306,980,1.306,985,0.948,999,1.115,1038,1.049,1039,1.306,1040,1.306,1047,1.115,1048,1.306,1060,0.995,1073,1.306,1093,1.306,1123,1.196,1124,1.942,1184,3.758,1194,7.722,1196,1.306,1197,1.306,1206,1.306,1207,1.306,1219,1.196,1221,1.196,1222,1.196,1227,1.115,1228,1.306,1231,1.115,1232,2.58,1233,1.306,1240,1.115,1241,1.306,1248,1.196,1249,1.049,1250,1.306,1258,1.049,1260,0.948,1262,0.948,1265,1.196,1323,1.115,1324,2.084,1325,1.306,1329,1.049,1334,1.115,1335,1.049,1349,2.084,1350,1.306,1355,1.306,1356,1.306,1359,1.115,1361,1.049,1365,1.306,1369,1.306,1370,1.306,1377,1.306,1378,1.306,1386,1.306,1387,1.306,1392,1.115,1393,1.306,1394,1.115,1395,2.303,1396,2.084,1399,1.115,1402,0.995,1411,2.084,1457,1.115,1458,1.306,1497,2.58,1498,2.084,1501,1.306,1502,1.306,1521,1.306,1528,1.049,1529,3.125,1530,1.306,1531,1.306,1535,1.306,1537,0.995,1538,3.129,1539,1.196,1543,1.115,1544,1.306,1545,1.306,1546,1.115,1550,0.995,1556,1.115,1557,2.084,1571,1.115,1607,1.306,1614,1.306,1622,1.306,1635,1.306,1650,1.306,1663,1.306,1664,1.306,1666,1.306,1667,1.306,1673,1.306,1678,1.306,1700,1.115,1701,1.306,1703,1.115,1704,1.306,1725,1.049,1731,0.995,1751,1.306,1779,1.306,1784,1.306,1792,1.306,1794,1.115,1795,1.306,1804,0.995,1806,0.995,1826,1.115,1830,1.306,1839,1.049,1849,1.306,1850,1.306,1863,1.306,1864,1.306,1865,1.306,1866,2.084,1867,1.306,1868,1.306,1870,1.115,1871,1.306,1872,1.306,1930,2.084,1955,1.306,1959,2.084,1960,1.306,1969,1.306,1973,1.306,1975,1.306,1980,1.306,1985,1.306,1989,1.196,1990,1.306,1993,1.306,2044,1.196,2045,1.306,2048,1.115,2049,1.196,2182,1.306,2183,1.196,2184,1.306,2185,1.472,2186,1.472,2187,8.086,2188,3.408,2189,5.077,2190,8.145,2191,6.53,2192,8.346,2193,1.306,2194,5.785,2195,1.306,2196,7.189,2197,1.306,2198,1.306,2199,1.196,2200,2.565,2201,1.472,2202,2.565,2203,1.472,2204,1.472,2205,1.472,2206,1.306,2207,1.306,2208,2.084,2209,1.306,2210,1.306,2211,1.306,2212,1.306,2213,1.306,2214,1.306,2215,1.306,2216,1.306,2217,1.472,2218,1.472]],["title/dependencies.html",[75,2.381,2219,3.373]],["body/dependencies.html",[17,0.008,33,1.723,36,0.277,37,0.005,38,0.005,48,0.734,50,1.981,75,2.137,136,4.013,150,4.013,212,2.256,222,3.044,227,2.923,243,3.181,279,3.52,281,2.813,330,4.381,417,1.762,634,2.623,671,1.844,687,3.181,844,3.289,1104,4.013,1216,4.381,1286,4.381,1295,4.381,1297,4.381,1429,4.381,1468,4.013,1510,5.298,1563,4.013,1919,4.381,1921,4.381,1977,4.013,1978,4.013,2220,7.435,2221,4.939,2222,4.939,2223,4.939,2224,4.939,2225,4.939,2226,4.939,2227,4.939,2228,4.939,2229,4.939,2230,4.939,2231,4.939,2232,4.939,2233,4.939,2234,4.939,2235,4.939,2236,4.939,2237,4.939,2238,4.939,2239,4.939,2240,4.939,2241,4.939,2242,4.939,2243,4.939,2244,4.939,2245,4.939,2246,4.939,2247,4.939,2248,4.939,2249,4.939,2250,4.939,2251,4.939,2252,4.939,2253,4.381,2254,4.939,2255,4.939,2256,4.939,2257,4.939]],["title/miscellaneous/enumerations.html",[2258,2.344,2259,4.88]],["body/miscellaneous/enumerations.html",[7,0.336,15,2.072,17,0.008,37,0.006,38,0.006,69,5.225,227,4.085,319,6.348,331,6.122,333,4.445,399,4.664,811,5.225,1124,4,1181,6.122,1182,5.609,2258,3.257,2259,4.687,2260,5.609,2261,5.284,2262,4.687,2263,5.284,2264,6.902,2265,5.609,2266,5.284,2267,5.284,2268,5.284,2269,6.902,2270,6.902,2271,6.902,2272,6.902,2273,5.284,2274,5.284,2275,5.284,2276,5.284,2277,6.902,2278,6.902,2279,6.902,2280,5.284,2281,6.902,2282,6.902]],["title/miscellaneous/functions.html",[2258,2.344,2283,4.88]],["body/miscellaneous/functions.html",[7,0.349,14,1.202,16,0.474,17,0.007,37,0.006,38,0.006,46,1.603,53,4.152,104,1.507,105,1.28,113,4.554,143,3.246,319,3.706,783,4.359,787,3.909,803,5.746,1124,4.152,1147,5.353,1185,4.865,1186,6.272,1219,5.746,1221,5.746,1222,5.746,1226,4.865,1538,3.381,1556,5.353,1557,5.746,1571,5.353,2206,4.865,2207,6.941,2208,4.457,2209,6.272,2215,4.865,2216,6.272,2258,3.381,2262,4.865,2283,4.865,2284,5.485,2285,4.865,2286,5.485,2287,5.485,2288,5.485,2289,5.485,2290,5.485,2291,5.485]],["title/index.html",[7,0.242,2292,3.802,2293,3.802]],["body/index.html",[5,0.074,9,1.359,17,0.007,33,1.828,37,0.004,38,0.004,53,3.966,71,4.648,72,2.464,74,1.426,97,3.518,177,4.713,222,2.192,232,1.046,243,2.29,254,1.772,286,2.29,290,2.192,313,1.67,321,2.29,379,3.154,423,1.72,481,2.534,624,2.026,626,2.026,664,1.954,701,2.534,729,2.89,734,1.67,811,2.692,819,2.403,832,3.835,833,2.403,890,2.534,1049,3.154,1081,3.154,1104,2.89,1182,4.258,1249,3.734,1265,2.89,1279,2.534,1294,2.89,1335,3.734,1347,2.89,1395,2.403,1397,2.692,1459,3.154,1460,7.48,1473,2.692,1528,2.534,1632,4.648,1858,4.648,1875,3.154,1953,4.648,1961,2.89,1994,2.89,2037,3.154,2043,3.154,2049,2.89,2183,2.89,2184,3.154,2253,3.154,2294,5.239,2295,3.556,2296,3.556,2297,3.556,2298,7.655,2299,3.556,2300,3.556,2301,3.556,2302,3.556,2303,3.556,2304,3.556,2305,5.239,2306,3.556,2307,3.556,2308,3.556,2309,3.556,2310,3.556,2311,2.89,2312,3.556,2313,3.556,2314,3.556,2315,3.556,2316,3.556,2317,3.556,2318,3.556,2319,5.239,2320,7.318,2321,5.239,2322,3.556,2323,3.556,2324,5.239,2325,5.239,2326,3.556,2327,3.556,2328,3.556,2329,5.239,2330,3.556,2331,3.556,2332,3.556,2333,3.556,2334,3.154,2335,3.556,2336,3.556,2337,5.239,2338,3.556,2339,3.556,2340,3.556,2341,3.556,2342,3.556,2343,3.556,2344,3.556,2345,3.556,2346,3.556,2347,3.556,2348,3.556,2349,3.556,2350,3.556,2351,3.556,2352,3.556,2353,8.123,2354,3.556,2355,3.556,2356,3.556,2357,3.556,2358,3.556,2359,3.556,2360,3.556,2361,3.556,2362,3.556,2363,3.556,2364,3.556,2365,3.556,2366,3.556,2367,7.916,2368,3.556,2369,3.556,2370,3.556,2371,3.556,2372,3.556,2373,3.556,2374,3.556,2375,5.239,2376,3.556,2377,3.556,2378,3.556,2379,3.556,2380,3.556]],["title/modules.html",[74,2.511]],["body/modules.html",[17,0.006,37,0.006,38,0.006,73,3.974,74,2.105,78,3.547,79,3.741,80,3.741,81,3.741,82,3.547,83,3.741,84,3.547,85,3.381,86,3.741,87,3.547,88,3.741,89,3.741,90,3.547,91,3.741,92,3.741,93,3.741,94,3.235,1489,6.096,2334,8.357,2381,9.421,2382,9.421,2383,9.477,2384,6.872]],["title/overview.html",[2311,5.088]],["body/overview.html",[2,1.382,17,0.008,37,0.003,38,0.003,41,0.898,73,7.006,74,1.079,75,1.832,76,2.385,77,2.385,78,5.956,79,4.604,80,4.604,81,4.604,82,4.851,83,3.732,84,5.397,85,4.791,86,5.116,87,4.851,88,5.454,89,3.732,90,4.851,91,5.301,92,4.604,93,4.604,94,5.197,95,1.933,96,1.228,97,1.195,213,4.624,215,3.691,217,4.249,266,2.385,267,2.385,268,2.385,270,3.732,271,3.732,272,3.732,273,3.732,274,3.538,300,0.959,394,3.538,413,2.385,414,2.385,436,1.657,492,3.538,519,2.385,520,2.385,573,0.586,611,3.538,630,2.385,631,2.385,778,5.116,782,3.538,840,4.851,856,2.385,857,2.385,858,2.385,972,2.385,974,2.385,975,2.385,985,4.624,1033,2.385,1034,2.385,1035,2.385,1060,3.538,1068,2.385,1070,2.385,1255,2.385,1256,2.385,1257,2.385,1258,5.116,1402,3.538,1407,2.385,1409,2.385,1488,2.385,1550,4.851,1584,2.385,1585,2.385,1586,2.385,1628,2.385,1629,2.385,1630,2.385,1731,3.538,1745,2.385,1746,2.385,1806,3.538,1819,2.385,1820,2.385,2175,2.385,2177,2.385,2178,2.385,2311,2.185,2385,2.689,2386,2.689,2387,2.689,2388,2.689,2389,2.689]],["title/properties.html",[8,1.044,2219,3.373]],["body/properties.html",[8,1.342,17,0.007,37,0.007,38,0.007,51,5.747,585,4.36,1279,5.041,2390,7.073,2391,7.073,2392,7.073]],["title/miscellaneous/typealiases.html",[2258,2.344,2393,5.502]],["body/miscellaneous/typealiases.html",[7,0.45,16,0.405,17,0.007,37,0.007,38,0.007,485,5.325,2199,5.747,2258,4.36,2260,5.747,2265,5.747,2394,7.073,2395,6.274]],["title/miscellaneous/variables.html",[54,4.471,2258,2.344]],["body/miscellaneous/variables.html",[1,2.31,7,0.217,10,3.032,11,3.032,12,1.325,13,3.032,15,1.825,16,0.448,17,0.008,18,0.689,36,0.214,37,0.004,38,0.004,49,2.939,54,2.778,55,2.347,68,1.956,99,1.442,105,0.53,110,1.947,179,1.751,188,2.535,221,2.796,236,3.438,245,1.857,292,2.778,293,2.778,313,1.606,318,5.172,319,5.426,321,2.202,342,2.107,399,4.107,401,3.852,483,3.852,485,4.336,576,2.092,607,1.653,624,3.835,625,4.55,626,4.299,627,4.939,650,2.702,926,3.852,1027,4.939,1194,4.135,1210,4.514,1234,2.436,1334,3.852,1335,3.626,1339,4.939,1930,2.778,1936,3.032,1950,3.032,1999,3.032,2193,3.032,2195,4.514,2197,3.032,2198,3.032,2199,2.778,2208,2.778,2210,4.514,2211,3.032,2212,4.514,2213,3.032,2214,4.514,2258,2.107,2260,2.778,2265,2.778,2285,3.032,2395,3.032,2396,3.418,2397,3.418,2398,3.418,2399,3.418,2400,3.418,2401,3.418,2402,3.418,2403,3.418,2404,3.418,2405,3.418,2406,3.418,2407,3.418,2408,3.418,2409,3.418,2410,3.418,2411,3.418,2412,3.418,2413,3.418,2414,3.418,2415,3.418,2416,3.418,2417,3.418,2418,5.088,2419,5.088,2420,5.088,2421,3.418,2422,3.418,2423,3.418,2424,3.418,2425,3.418]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1194,"title":{},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":2390,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":2249,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2235,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":2256,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1493,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":2234,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":2241,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2192,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2203,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2187,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":2205,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2201,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2190,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2196,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2191,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2188,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2202,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2189,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2200,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":625,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2243,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":2224,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2237,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2246,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["100.0.0",{"_index":2238,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":1480,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2387,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":2240,"title":{},"body":{"dependencies.html":{}}}],["123123123123",{"_index":1862,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123123123123'})@isoptional()@isstring()@isnotempty()@matches(/^\\+[1",{"_index":1859,"title":{},"body":{"classes/RegisterDto.html":{}}}],["15",{"_index":2386,"title":{},"body":{"overview.html":{}}}],["18",{"_index":2385,"title":{},"body":{"overview.html":{}}}],["2",{"_index":2151,"title":{},"body":{"controllers/UsersController.html":{}}}],["2.0.0",{"_index":2221,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":2226,"title":{},"body":{"dependencies.html":{}}}],["2.1128.0",{"_index":2232,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":627,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["23505",{"_index":2275,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["27",{"_index":2388,"title":{},"body":{"overview.html":{}}}],["2fa",{"_index":1875,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"index.html":{}}}],["3.0.2",{"_index":2251,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1479,"title":{},"body":{"controllers/HealthController.html":{}}}],["300mb",{"_index":1475,"title":{},"body":{"controllers/HealthController.html":{}}}],["3600",{"_index":2409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2242,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":2255,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1649,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["404",{"_index":1455,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["5.0.1",{"_index":2233,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":2227,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1488,"title":{},"body":{"controllers/HealthController.html":{},"overview.html":{}}}],["500",{"_index":1647,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["6.4.4",{"_index":2231,"title":{},"body":{"dependencies.html":{}}}],["6.7.5",{"_index":2239,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":2389,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":2252,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":2223,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":2229,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":2222,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":2228,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":2225,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2257,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":2220,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":2245,"title":{},"body":{"dependencies.html":{}}}],["9]\\\\d{1,14",{"_index":1861,"title":{},"body":{"classes/RegisterDto.html":{}}}],["9]\\d{1,14",{"_index":772,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["access_token",{"_index":1440,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["accesstokencookie",{"_index":240,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["addavatar",{"_index":2051,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(request",{"_index":2058,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronamazons3",{"_index":2052,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronamazons3(request",{"_index":2067,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronpostgres",{"_index":2053,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavataronpostgres(request",{"_index":2070,"title":{},"body":{"controllers/UsersController.html":{}}}],["added",{"_index":2062,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile",{"_index":2054,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile(request",{"_index":2073,"title":{},"body":{"controllers/UsersController.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"injectables/EmailConfirmationService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address.entity",{"_index":2032,"title":{},"body":{"entities/User.html":{}}}],["admin",{"_index":2282,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["age=${this.configservice.get",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["aliases",{"_index":2394,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allocated",{"_index":1482,"title":{},"body":{"controllers/HealthController.html":{}}}],["already",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["amazon",{"_index":2037,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["any(paragraphs",{"_index":1771,"title":{},"body":{"injectables/PostsService.html":{}}}],["anything",{"_index":2309,"title":{},"body":{"index.html":{}}}],["api",{"_index":2321,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":2113,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiconsumes('multipart/form",{"_index":2142,"title":{},"body":{"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":2114,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiextramodels",{"_index":482,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["apiextramodels(findoneparams",{"_index":498,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apiextramodels(paginatedresultdto",{"_index":622,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["apinotfoundresponse",{"_index":2115,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":2116,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":2117,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":1247,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/UpdatePermissionsDto.html":{}}}],["apiproperty({description",{"_index":1854,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({isarray",{"_index":1962,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["apiproperty({type",{"_index":1243,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{}}}],["apitags",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["apitags('authorization",{"_index":404,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["apitags('categories",{"_index":497,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apitags('comments",{"_index":621,"title":{},"body":{"controllers/CommentsController.html":{}}}],["apitags('email",{"_index":1062,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["apitags('posts",{"_index":1734,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('products",{"_index":1809,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apitags('users",{"_index":2125,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":2118,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":2369,"title":{},"body":{"index.html":{}}}],["app.config.ts",{"_index":2314,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["app_debug",{"_index":1125,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["app_env",{"_index":1126,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["app_filter",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["app_url",{"_index":1127,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["appconfig",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":40,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appenv",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["application",{"_index":1010,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["appmodule",{"_index":73,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appurl",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["argumentshost",{"_index":1200,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["array",{"_index":1251,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["async",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":1112,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["auth.oauth2client",{"_index":1428,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(@req",{"_index":235,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(token",{"_index":1418,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(tokendata",{"_index":1398,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"index.html":{}}}],["authentication.controller",{"_index":282,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication.controller.ts",{"_index":1396,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:23",{"_index":1400,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller.ts:31",{"_index":1882,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:48",{"_index":1889,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:66",{"_index":1886,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:84",{"_index":1879,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.guard",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":1498,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication.module.ts",{"_index":1410,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["authentication.service",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":1411,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:10",{"_index":1417,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:16",{"_index":1913,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:23",{"_index":1423,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:33",{"_index":1915,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:37",{"_index":1421,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:43",{"_index":1917,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:51",{"_index":1425,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:66",{"_index":1427,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:75",{"_index":1419,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication/authentication.service",{"_index":1430,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication/dto/register.dto",{"_index":996,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["authentication/dto/token",{"_index":1867,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["authentication/google",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication/jwt",{"_index":610,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["authentication/request",{"_index":609,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["authentication/two",{"_index":1728,"title":{},"body":{"controllers/PostsController.html":{}}}],["authentication=${token",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":174,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":78,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":217,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticator",{"_index":1918,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":1922,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri",{"_index":1923,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":1927,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":1499,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":1500,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1536,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":585,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"properties.html":{}}}],["author.posts",{"_index":588,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{}}}],["authorization",{"_index":379,"title":{},"body":{"controllers/AuthorizationController.html":{},"index.html":{}}}],["authorization.controller",{"_index":419,"title":{},"body":{"modules/AuthorizationModule.html":{}}}],["authorization.service",{"_index":395,"title":{},"body":{"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{}}}],["authorization/authorization.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["authorization/permission.guard",{"_index":484,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{}}}],["authorization/role.enum",{"_index":487,"title":{},"body":{"controllers/CategoriesController.html":{},"entities/User.html":{}}}],["authorization/role.guard",{"_index":488,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["authorization/types/permission.type",{"_index":486,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"entities/User.html":{}}}],["authorizationcontroller",{"_index":377,"title":{"controllers/AuthorizationController.html":{}},"body":{"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"coverage.html":{}}}],["authorizationmodule",{"_index":79,"title":{"modules/AuthorizationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorizationModule.html":{},"modules.html":{},"overview.html":{}}}],["authorizationservice",{"_index":394,"title":{"injectables/AuthorizationService.html":{}},"body":{"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"coverage.html":{},"overview.html":{}}}],["authors",{"_index":439,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["available",{"_index":1489,"title":{},"body":{"controllers/HealthController.html":{},"modules.html":{}}}],["avatar",{"_index":1994,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["avatarid",{"_index":1995,"title":{},"body":{"entities/User.html":{}}}],["avatarid'})@onetoone(undefined",{"_index":2006,"title":{},"body":{"entities/User.html":{}}}],["avatars",{"_index":2144,"title":{},"body":{"controllers/UsersController.html":{}}}],["await",{"_index":245,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1286,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["aws.config.ts",{"_index":2315,"title":{},"body":{"index.html":{}}}],["awsconfig",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["badrequestexception",{"_index":995,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/UsersController.html":{}}}],["badrequestexception('bad",{"_index":1032,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('email",{"_index":1021,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('provide",{"_index":2147,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":2319,"title":{},"body":{"index.html":{}}}],["baseexceptionfilter",{"_index":1198,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["bcrypt",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["best",{"_index":2302,"title":{},"body":{"index.html":{}}}],["binary",{"_index":1245,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{}}}],["body",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["bookproperties",{"_index":435,"title":{"interfaces/BookProperties.html":{}},"body":{"interfaces/BookProperties.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"coverage.html":{}}}],["boolean",{"_index":1147,"title":{},"body":{"classes/EnvironmentVariables.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":2207,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":2327,"title":{},"body":{"index.html":{}}}],["box",{"_index":2320,"title":{},"body":{"index.html":{}}}],["brand",{"_index":443,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["browse",{"_index":2383,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2381,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1303,"title":{},"body":{"injectables/FilesService.html":{}}}],["buffer",{"_index":878,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{}}}],["building",{"_index":2306,"title":{},"body":{"index.html":{}}}],["built",{"_index":2341,"title":{},"body":{"index.html":{}}}],["bytea",{"_index":826,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["cache",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["callback",{"_index":2145,"title":{},"body":{"controllers/UsersController.html":{}}}],["callback(null",{"_index":2148,"title":{},"body":{"controllers/UsersController.html":{}}}],["callhandler",{"_index":1212,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["canactivate(context",{"_index":2418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cancelallscheduledemails",{"_index":1074,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cancelscheduleemail",{"_index":1050,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["carproperties",{"_index":441,"title":{"interfaces/CarProperties.html":{}},"body":{"interfaces/CarProperties.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"coverage.html":{}}}],["cascade",{"_index":2002,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":2407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["catch(exception",{"_index":1199,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["categories",{"_index":450,"title":{},"body":{"controllers/CategoriesController.html":{},"entities/Post.html":{}}}],["categories.controller",{"_index":522,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":493,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/entities/category.entity",{"_index":1694,"title":{},"body":{"entities/Post.html":{}}}],["categoriescontroller",{"_index":448,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":80,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriespermission",{"_index":2260,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["categoriesservice",{"_index":492,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":462,"title":{"entities/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Post.html":{},"coverage.html":{}}}],["category.dto",{"_index":495,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["category.dto.ts",{"_index":673,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:11",{"_index":1958,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:6",{"_index":674,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.posts",{"_index":1699,"title":{},"body":{"entities/Post.html":{}}}],["category.posts)@jointable",{"_index":1681,"title":{},"body":{"entities/Post.html":{}}}],["categoryid",{"_index":580,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["categorynotfoundexception",{"_index":541,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["categorynotfoundexception(id",{"_index":552,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoryrepository",{"_index":528,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["check",{"_index":1460,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["city",{"_index":10,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["cityname",{"_index":2415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":36,"title":{"classes/CategoryNotFoundException.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{}},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":573,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/LocalFilesController.html":{}}}],["click",{"_index":1011,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["clientid",{"_index":1431,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":1433,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clone",{"_index":2304,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":266,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":267,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":269,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":268,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authorizationmodule",{"_index":413,"title":{},"body":{"modules/AuthorizationModule.html":{},"overview.html":{}}}],["cluster_authorizationmodule_providers",{"_index":414,"title":{},"body":{"modules/AuthorizationModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":519,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":520,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":630,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_providers",{"_index":631,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule",{"_index":856,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule_exports",{"_index":858,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_databasefilesmodule_providers",{"_index":857,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule",{"_index":972,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_exports",{"_index":974,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_imports",{"_index":973,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["cluster_emailconfirmationmodule_providers",{"_index":975,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":1033,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":1034,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":1035,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":1068,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":1069,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":1070,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1255,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1256,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1257,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule",{"_index":1407,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule_imports",{"_index":1408,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["cluster_googleauthenticationmodule_providers",{"_index":1409,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule",{"_index":1584,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule_exports",{"_index":1585,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_localfilesmodule_providers",{"_index":1586,"title":{},"body":{"modules/LocalFilesModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1628,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1630,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1629,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1745,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":1746,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1819,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1820,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2175,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2178,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2176,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2177,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1903,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto",{"_index":1891,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto.ts",{"_index":1872,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["code.dto.ts:6",{"_index":1874,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["codes.enum",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["codes.enum.ts",{"_index":2264,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":20,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["column('text",{"_index":1690,"title":{},"body":{"entities/Post.html":{}}}],["column()@exclude",{"_index":2020,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":2015,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":1683,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["column({type",{"_index":825,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["column({unique",{"_index":2011,"title":{},"body":{"entities/User.html":{}}}],["command",{"_index":701,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{},"index.html":{}}}],["commandbus",{"_index":645,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["commandhandler",{"_index":702,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["commandhandler(createcommentcommand",{"_index":704,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandhandler(createproductcommand",{"_index":757,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["commandhandler(deleteproductcommand",{"_index":941,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["commandhandler(updateproductcommand",{"_index":1982,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["commands/handlers/create",{"_index":636,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ProductsModule.html":{}}}],["commands/handlers/delete",{"_index":1828,"title":{},"body":{"modules/ProductsModule.html":{}}}],["commands/handlers/update",{"_index":1827,"title":{},"body":{"modules/ProductsModule.html":{}}}],["commands/implementations/create",{"_index":654,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["commands/implementations/delete",{"_index":1838,"title":{},"body":{"injectables/ProductsService.html":{}}}],["commands/implementations/update",{"_index":1840,"title":{},"body":{"injectables/ProductsService.html":{}}}],["comment",{"_index":583,"title":{"entities/Comment.html":{}},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{},"coverage.html":{}}}],["comment.command",{"_index":655,"title":{},"body":{"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{}}}],["comment.command.ts",{"_index":676,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["comment.command.ts:4",{"_index":678,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:6",{"_index":680,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:7",{"_index":679,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.dto",{"_index":613,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{}}}],["comment.dto.ts",{"_index":682,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:11",{"_index":686,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:7",{"_index":683,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.handler",{"_index":637,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comment.handler.ts",{"_index":692,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["comment.handler.ts:10",{"_index":697,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.handler.ts:15",{"_index":700,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.post",{"_index":1686,"title":{},"body":{"entities/Post.html":{}}}],["comments",{"_index":598,"title":{},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{}}}],["comments.controller",{"_index":638,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.dto",{"_index":615,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comments.dto.ts",{"_index":1370,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["comments.dto.ts:8",{"_index":1372,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["comments.handler",{"_index":641,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.handler.ts",{"_index":1378,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["comments.handler.ts:10",{"_index":1379,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.handler.ts:15",{"_index":1380,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.query",{"_index":658,"title":{},"body":{"injectables/CommentsService.html":{},"classes/GetCommentsHandler.html":{}}}],["comments.query.ts",{"_index":1387,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["comments.query.ts:3",{"_index":1389,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.query.ts:5",{"_index":1391,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.query.ts:6",{"_index":1390,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.service",{"_index":612,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{}}}],["comments/entities/comment.entity",{"_index":1695,"title":{},"body":{"entities/Post.html":{}}}],["commentscontroller",{"_index":596,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentscount",{"_index":1384,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["commentsmodule",{"_index":81,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":698,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["commentsservice",{"_index":611,"title":{"injectables/CommentsService.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"coverage.html":{},"overview.html":{}}}],["complete",{"_index":2328,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":2348,"title":{},"body":{"index.html":{}}}],["config",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config/app.config",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["config/aws.config",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["config/email.config",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["config/google.config",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["config/typeorm.config",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["configmodule.forroot",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('app.filedestination",{"_index":1574,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["configservice.get('database.host",{"_index":1939,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.name",{"_index":1944,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.password",{"_index":1943,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.port",{"_index":1940,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('database.username",{"_index":1942,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('email.from",{"_index":1116,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.host",{"_index":1108,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.password",{"_index":1115,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.port",{"_index":1109,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.secure",{"_index":1111,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email.user",{"_index":1113,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('jwt.accesstokenexpirationtime')}s",{"_index":298,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt.accesstokensecret",{"_index":295,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt.refreshtokensecret",{"_index":1516,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('node_env",{"_index":807,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["configservice.get('typeorm.logging",{"_index":1949,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configservice.get('typeorm.synchronize",{"_index":1947,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["configurable",{"_index":2342,"title":{},"body":{"index.html":{}}}],["configure",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":952,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirm(@body",{"_index":965,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(confirmationdata",{"_index":954,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":951,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirmation.controller",{"_index":978,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["confirmation.controller.ts",{"_index":950,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmation.controller.ts:25",{"_index":956,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.controller.ts:34",{"_index":961,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["confirmation.module.ts",{"_index":976,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["confirmation.service",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{}}}],["confirmation.service.ts",{"_index":980,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation.service.ts:10",{"_index":986,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:18",{"_index":994,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:42",{"_index":992,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:52",{"_index":988,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:62",{"_index":990,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation/dto/confirm",{"_index":665,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirmation/email",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation/verification",{"_index":2182,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["confirmationdata",{"_index":957,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmationdata.token",{"_index":967,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmed",{"_index":1022,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail",{"_index":981,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":987,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemaildto",{"_index":663,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["console.log('exception",{"_index":1203,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["consolelogger",{"_index":781,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":788,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{}}}],["constructor(authenticationservice",{"_index":1608,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoryid",{"_index":578,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["constructor(categoryrepository",{"_index":526,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(commandbus",{"_index":644,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["constructor(comment",{"_index":677,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["constructor(commentsrepository",{"_index":696,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["constructor(configservice",{"_index":1096,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["constructor(context",{"_index":786,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(databasefilesrepository",{"_index":868,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["constructor(emailservice",{"_index":1075,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(fileid",{"_index":1229,"title":{},"body":{"classes/FileNotFoundException.html":{},"classes/ProductNotFoundException.html":{}}}],["constructor(id",{"_index":930,"title":{},"body":{"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["constructor(jwtservice",{"_index":984,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["constructor(localfilesrepository",{"_index":1591,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["constructor(logsrepository",{"_index":1652,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(ownerid",{"_index":1351,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["constructor(postid",{"_index":1388,"title":{},"body":{"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["constructor(postsrepository",{"_index":1752,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/DatabaseFilesController.html":{},"injectables/EmailService.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["constructor(product",{"_index":735,"title":{},"body":{"classes/CreateProductCommand.html":{}}}],["constructor(productid",{"_index":1366,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["constructor(productsrepository",{"_index":751,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["constructor(public",{"_index":932,"title":{},"body":{"classes/DeleteProductCommand.html":{},"classes/FindProductQuery.html":{}}}],["constructor(publicfilesrepository",{"_index":1272,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(userid",{"_index":2046,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(usersrepository",{"_index":422,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["constructor(usersservice",{"_index":307,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["consumer",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logsmiddleware).forroutes",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":586,"title":{},"body":{"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"controllers/DatabaseFilesController.html":{},"classes/EmailScheduleDto.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{}}}],["context",{"_index":712,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"injectables/ExcludeNullInterceptor.html":{},"entities/Log.html":{}}}],["context.switchtohttp().getrequest",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":39,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":1892,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('authentication",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('authorization",{"_index":403,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["controller('categories",{"_index":496,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('comments",{"_index":620,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('database",{"_index":845,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["controller('email",{"_index":964,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{}}}],["controller('google",{"_index":1405,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('health",{"_index":1469,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('local",{"_index":1551,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["controller('posts",{"_index":1733,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('products",{"_index":1808,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":2124,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":243,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{},"index.html":{}}}],["country",{"_index":11,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["countryname",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":2183,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrs",{"_index":2325,"title":{},"body":{"index.html":{}}}],["cqrsmodule",{"_index":633,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ProductsModule.html":{}}}],["create",{"_index":451,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["create(@body",{"_index":501,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["create(category",{"_index":458,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["create(createcategorydto",{"_index":529,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["create(createproductdto",{"_index":1796,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createcategory",{"_index":2269,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["createcategorydto",{"_index":459,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":599,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["createcomment(comment",{"_index":601,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["createcommentcommand",{"_index":653,"title":{"classes/CreateCommentCommand.html":{}},"body":{"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcommentcommand(comment",{"_index":662,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentdto",{"_index":602,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommenthandler",{"_index":635,"title":{"classes/CreateCommentHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createdatecolumn",{"_index":1617,"title":{},"body":{"entities/Log.html":{}}}],["createduser",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createlog",{"_index":1651,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlog(log",{"_index":1655,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlogdto",{"_index":709,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["createpost",{"_index":1705,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(post",{"_index":1711,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":718,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createproduct",{"_index":2277,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["createproductcommand",{"_index":730,"title":{"classes/CreateProductCommand.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createproductcommand(createproductdto",{"_index":1843,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":736,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproducthandler",{"_index":748,"title":{"classes/CreateProductHandler.html":{}},"body":{"classes/CreateProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["createreadstream",{"_index":1306,"title":{},"body":{"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{}}}],["createreadstream(join(process.cwd",{"_index":1553,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["createtransport",{"_index":1103,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":762,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["creationdate",{"_index":1615,"title":{},"body":{"entities/Log.html":{}}}],["credentials",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["cron",{"_index":1081,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"index.html":{}}}],["cronjob",{"_index":1080,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":1084,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["currenthashedrefreshtoken",{"_index":1996,"title":{},"body":{"entities/User.html":{}}}],["custom",{"_index":1632,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["customize",{"_index":2356,"title":{},"body":{"index.html":{}}}],["customlogger",{"_index":778,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":822,"title":{},"body":{"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"classes/PaginatedResultDto.html":{},"controllers/UsersController.html":{}}}],["data')@apibody({description",{"_index":2060,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":832,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/FilesService.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["database.config.ts",{"_index":2316,"title":{},"body":{"index.html":{}}}],["database/database",{"_index":1937,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["database/database.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgres",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["database_host",{"_index":1128,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_name",{"_index":1129,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_password",{"_index":1130,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_port",{"_index":1131,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_user",{"_index":1132,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["databaseconfig",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["databasefile",{"_index":818,"title":{"entities/DatabaseFile.html":{}},"body":{"entities/DatabaseFile.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["databasefilescontroller",{"_index":830,"title":{"controllers/DatabaseFilesController.html":{}},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"coverage.html":{}}}],["databasefilesmodule",{"_index":82,"title":{"modules/DatabaseFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databasefilesrepository",{"_index":870,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["databasefilesservice",{"_index":840,"title":{"injectables/DatabaseFilesService.html":{}},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"coverage.html":{},"overview.html":{}}}],["databaselogger",{"_index":887,"title":{"classes/DatabaseLogger.html":{}},"body":{"classes/DatabaseLogger.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{}}}],["databasemodule",{"_index":83,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":880,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{}}}],["date",{"_index":563,"title":{},"body":{"entities/Category.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"entities/Log.html":{}}}],["date(emailschedule.date",{"_index":1082,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.now",{"_index":1089,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["debug",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":790,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debugenabled",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["debugmode",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["decodeconfirmationtoken",{"_index":982,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":989,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":318,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":21,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":481,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":511,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["delete(':id')@useguards(jwttwofactorguard",{"_index":1715,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(':id')@useguards(undefined)@httpcode(204",{"_index":1802,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete(':id')@useguards(undefined)@useguards(undefined",{"_index":472,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["delete('avatar",{"_index":2155,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('avatar')@apiokresponse({description",{"_index":2079,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('files/:id",{"_index":2173,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('files/:id')@apiparam({name",{"_index":2084,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar",{"_index":2055,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(@req",{"_index":2156,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(request",{"_index":2078,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecategory",{"_index":2271,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deleted",{"_index":465,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["deletedat",{"_index":562,"title":{},"body":{"entities/Category.html":{}}}],["deletedatecolumn",{"_index":564,"title":{},"body":{"entities/Category.html":{}}}],["deletefilewithqueryrunner",{"_index":865,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["deletefilewithqueryrunner(fileid",{"_index":871,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["deletelocalfilewithqueryrunner",{"_index":1589,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["deletelocalfilewithqueryrunner(fileid",{"_index":1594,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["deleteobject",{"_index":1317,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepost",{"_index":1706,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param",{"_index":1743,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1756,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(undefined",{"_index":1714,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteprivatefile",{"_index":1266,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{}}}],["deleteprivatefile(fileid",{"_index":1276,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteprivatefile(request",{"_index":2083,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteproduct",{"_index":2279,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deleteproductcommand",{"_index":928,"title":{"classes/DeleteProductCommand.html":{}},"body":{"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["deleteproductcommand(id",{"_index":1848,"title":{},"body":{"injectables/ProductsService.html":{}}}],["deleteproducthandler",{"_index":933,"title":{"classes/DeleteProductHandler.html":{}},"body":{"classes/DeleteProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["deletepublicfile",{"_index":1267,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfile(fileid",{"_index":1282,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteresponse",{"_index":555,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/PostsService.html":{}}}],["deleteresponse.affected",{"_index":557,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/PostsService.html":{}}}],["dependencies",{"_index":75,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1279,"title":{},"body":{"injectables/FilesService.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":1575,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["detailed",{"_index":2351,"title":{},"body":{"index.html":{}}}],["development",{"_index":2370,"title":{},"body":{"index.html":{}}}],["directly",{"_index":2040,"title":{},"body":{"entities/User.html":{}}}],["disable",{"_index":2347,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1485,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1463,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskstorage",{"_index":1567,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["disposition",{"_index":851,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":1945,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["documentation",{"_index":2184,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentation:serve",{"_index":2355,"title":{},"body":{"index.html":{}}}],["dto/confirm",{"_index":962,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["dto/create",{"_index":494,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dto/email",{"_index":1058,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["dto/file",{"_index":2119,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/get",{"_index":614,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["dto/local",{"_index":1600,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["dto/login.dto",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/token",{"_index":1403,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["dto/two",{"_index":1890,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/update",{"_index":396,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{}}}],["e2e",{"_index":2376,"title":{},"body":{"index.html":{}}}],["each",{"_index":729,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePermissionsDto.html":{},"index.html":{}}}],["eager",{"_index":2001,"title":{},"body":{"entities/User.html":{}}}],["email",{"_index":313,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email.confirmationlink",{"_index":1006,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["email.dto",{"_index":963,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["email.dto.ts",{"_index":666,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:6",{"_index":668,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email.service",{"_index":1037,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":997,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["email_confirmation_url",{"_index":1133,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_host",{"_index":1134,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_is_secure",{"_index":1135,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_password",{"_index":1136,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_port",{"_index":1137,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["email_user",{"_index":1138,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["emailconfig",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationcontroller",{"_index":949,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"coverage.html":{}}}],["emailconfirmationmodule",{"_index":84,"title":{"modules/EmailConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationservice",{"_index":213,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailmodule",{"_index":85,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emails",{"_index":2360,"title":{},"body":{"index.html":{}}}],["emailschedule",{"_index":1057,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":1087,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":1085,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":1086,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":1038,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailschedulingcontroller",{"_index":1047,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":86,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":1060,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":985,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["enableimplicitconversion",{"_index":1189,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["endpoints",{"_index":2339,"title":{},"body":{"index.html":{}}}],["engine",{"_index":444,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/category.entity",{"_index":523,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["entities/comment.entity",{"_index":619,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["entities/database",{"_index":860,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{}}}],["entities/local",{"_index":1587,"title":{},"body":{"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{}}}],["entities/log.entity",{"_index":1633,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LogsService.html":{}}}],["entities/post.entity",{"_index":1748,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/private",{"_index":1261,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["entities/product.entity",{"_index":755,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{}}}],["entities/public",{"_index":1263,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["entities/user.entity",{"_index":1239,"title":{},"body":{"classes/FileResponseDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":1180,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/UpdatePermissionsDto.html":{},"entities/User.html":{}}}],["enumerations",{"_index":2259,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":2344,"title":{},"body":{"index.html":{}}}],["env.validation",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["environmentvariables",{"_index":1123,"title":{"classes/EnvironmentVariables.html":{}},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{}}}],["err",{"_index":1118,"title":{},"body":{"injectables/EmailService.html":{}}}],["err.message",{"_index":1122,"title":{},"body":{"injectables/EmailService.html":{}}}],["error",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["error(errors.tostring",{"_index":1195,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["error(message",{"_index":792,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error.name",{"_index":1029,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["error.status",{"_index":1454,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["error?.code",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["errors",{"_index":1190,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["errors.length",{"_index":1193,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["etag",{"_index":2136,"title":{},"body":{"controllers/UsersController.html":{}}}],["example",{"_index":1858,"title":{},"body":{"classes/RegisterDto.html":{},"index.html":{}}}],["examples",{"_index":2332,"title":{},"body":{"index.html":{}}}],["exceed",{"_index":1487,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":1202,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exceptions/category",{"_index":542,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exceptions/file",{"_index":939,"title":{},"body":{"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/UpdateProductHandler.html":{}}}],["exceptions/post",{"_index":1764,"title":{},"body":{"injectables/PostsService.html":{}}}],["exceptionsloggerfilter",{"_index":171,"title":{"classes/ExceptionsLoggerFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":2031,"title":{},"body":{"entities/User.html":{}}}],["excludenullinterceptor",{"_index":172,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["execute",{"_index":695,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["execute(command",{"_index":699,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["execute(undefined",{"_index":1328,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["executioncontext",{"_index":1210,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1280,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{}}}],["exist.'})@apiunauthorizedresponse({description",{"_index":2089,"title":{},"body":{"controllers/UsersController.html":{}}}],["exists",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{}}}],["expandvariables",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["expired",{"_index":1031,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["expiresin",{"_index":297,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["export",{"_index":35,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":277,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":844,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"classes/FileUploadDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LogsMiddleware.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1242,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/UsersController.html":{}}}],["express/multer/interfaces/multer",{"_index":1565,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["expression",{"_index":1857,"title":{},"body":{"classes/RegisterDto.html":{}}}],["extends",{"_index":576,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FileNotFoundException.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":1508,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":1513,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":290,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"index.html":{}}}],["factor.guard",{"_index":1729,"title":{},"body":{"controllers/PostsController.html":{}}}],["factor.guard.ts",{"_index":1530,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":288,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["factor.strategy.ts",{"_index":1531,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:13",{"_index":1532,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:28",{"_index":1533,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor/dto/two",{"_index":1871,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["factor/jwt",{"_index":287,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["factor/two",{"_index":289,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["failed",{"_index":1121,"title":{},"body":{"injectables/EmailService.html":{}}}],["false",{"_index":321,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/EnvironmentVariables.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":2326,"title":{},"body":{"index.html":{}}}],["features/categories/categories.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["features/comments/comments.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["features/database",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["features/email",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["features/files/files.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["features/google",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["features/local",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["features/posts/posts.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["features/products/products.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["features/users/entities/user.entity",{"_index":431,"title":{},"body":{"injectables/AuthorizationService.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["features/users/users.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["features/users/users.service",{"_index":216,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["fetch",{"_index":2097,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetched",{"_index":2092,"title":{},"body":{"controllers/UsersController.html":{}}}],["field",{"_index":2041,"title":{},"body":{"entities/User.html":{}}}],["fieldname",{"_index":1558,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"index.html":{}}}],["file.buffer",{"_index":2161,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.dto",{"_index":1601,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["file.dto.ts",{"_index":1545,"title":{},"body":{"interfaces/LocalFileDto.html":{},"coverage.html":{}}}],["file.entity",{"_index":861,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["file.entity.ts",{"_index":821,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"coverage.html":{}}}],["file.entity.ts:10",{"_index":1781,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:12",{"_index":1542,"title":{},"body":{"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.entity.ts:13",{"_index":1783,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:14",{"_index":827,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["file.entity.ts:15",{"_index":1541,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:6",{"_index":829,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.entity.ts:7",{"_index":1780,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:9",{"_index":828,"title":{},"body":{"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/PublicFile.html":{}}}],["file.key",{"_index":1318,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.mimetype",{"_index":1555,"title":{},"body":{"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["file.mimetype.includes('image",{"_index":2146,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.originalname",{"_index":2154,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.owner",{"_index":1320,"title":{},"body":{"injectables/FilesService.html":{},"entities/User.html":{}}}],["file.owner.id",{"_index":1321,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.path",{"_index":1554,"title":{},"body":{"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["file.stream.pipe(response",{"_index":2170,"title":{},"body":{"controllers/UsersController.html":{}}}],["filedata",{"_index":1599,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["filefilter",{"_index":1559,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["fileid",{"_index":874,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"injectables/LocalFilesService.html":{},"classes/ProductNotFoundException.html":{}}}],["fileinfo",{"_index":1300,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinfo.key",{"_index":1305,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":1562,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["filemetadata",{"_index":2129,"title":{},"body":{"controllers/UsersController.html":{}}}],["filemetadata.id",{"_index":2133,"title":{},"body":{"controllers/UsersController.html":{}}}],["filemetadata.mimetype",{"_index":2135,"title":{},"body":{"controllers/UsersController.html":{}}}],["filename",{"_index":823,"title":{},"body":{"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/UsersController.html":{}}}],["filename=\"${file.filename",{"_index":853,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["filename=\"${filemetadata.filename",{"_index":2134,"title":{},"body":{"controllers/UsersController.html":{}}}],["filenotfoundexception",{"_index":1227,"title":{"classes/FileNotFoundException.html":{}},"body":{"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"coverage.html":{}}}],["filenotfoundexception(fileid",{"_index":1307,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileresponsedto",{"_index":1231,"title":{"classes/FileResponseDto.html":{}},"body":{"classes/FileResponseDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["fileresponsedto})@apinotfoundresponse({description",{"_index":2109,"title":{},"body":{"controllers/UsersController.html":{}}}],["files",{"_index":833,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"classes/FileUploadMultipleDto.html":{},"controllers/LocalFilesController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["files.controller",{"_index":862,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"modules/LocalFilesModule.html":{}}}],["files.controller.ts",{"_index":831,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"coverage.html":{}}}],["files.controller.ts:21",{"_index":837,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["files.controller.ts:22",{"_index":1547,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["files.interceptor",{"_index":2123,"title":{},"body":{"controllers/UsersController.html":{}}}],["files.interceptor.ts",{"_index":1557,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["files.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["files.module.ts",{"_index":859,"title":{},"body":{"modules/DatabaseFilesModule.html":{},"modules/LocalFilesModule.html":{}}}],["files.service",{"_index":841,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"modules/FilesModule.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{}}}],["files.service.ts",{"_index":864,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{}}}],["files.service.ts:13",{"_index":879,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:14",{"_index":1598,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:20",{"_index":1596,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:26",{"_index":873,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:32",{"_index":1595,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files.service.ts:36",{"_index":876,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:7",{"_index":869,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["files.service.ts:8",{"_index":1592,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["files/database",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["files/dto/local",{"_index":1544,"title":{},"body":{"interfaces/LocalFileDto.html":{},"coverage.html":{}}}],["files/entities/database",{"_index":820,"title":{},"body":{"entities/DatabaseFile.html":{},"coverage.html":{}}}],["files/entities/local",{"_index":1539,"title":{},"body":{"entities/LocalFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["files/entities/private",{"_index":2033,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{}}}],["files/entities/public",{"_index":2122,"title":{},"body":{"controllers/UsersController.html":{}}}],["files/files.module",{"_index":2181,"title":{},"body":{"modules/UsersModule.html":{}}}],["files/local",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filesdestination",{"_index":1573,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filesdestination}${options.path",{"_index":1576,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filesize",{"_index":2149,"title":{},"body":{"controllers/UsersController.html":{}}}],["filesmodule",{"_index":87,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1258,"title":{"injectables/FilesService.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["fileuploaddto",{"_index":1240,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["fileuploaddto})@apicreatedresponse({description",{"_index":2061,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileuploadmultipledto",{"_index":1248,"title":{"classes/FileUploadMultipleDto.html":{}},"body":{"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["findall",{"_index":452,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["findall(ownerid",{"_index":1833,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findall(undefined",{"_index":1799,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findallproductshandler",{"_index":1323,"title":{"classes/FindAllProductsHandler.html":{}},"body":{"classes/FindAllProductsHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["findallproductsquery",{"_index":1329,"title":{"classes/FindAllProductsQuery.html":{}},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["findallproductsquery(ownerid",{"_index":1845,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findallwithdeleted",{"_index":453,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["findmanyoptions",{"_index":1337,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["findmanyoptions['where",{"_index":1341,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["findone",{"_index":454,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["findone(@param",{"_index":505,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["findone(@param('email",{"_index":2128,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@param('id",{"_index":1813,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findone(email",{"_index":2094,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":533,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findone(undefined",{"_index":467,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["findoneparams",{"_index":468,"title":{"classes/FindOneParams.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["findproducthandler",{"_index":1359,"title":{"classes/FindProductHandler.html":{}},"body":{"classes/FindProductHandler.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["findproductquery",{"_index":1361,"title":{"classes/FindProductQuery.html":{}},"body":{"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["findproductquery(id",{"_index":1846,"title":{},"body":{"injectables/ProductsService.html":{}}}],["focus",{"_index":2310,"title":{},"body":{"index.html":{}}}],["format",{"_index":1244,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{}}}],["found",{"_index":582,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":543,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{}}}],["found.exception.ts",{"_index":575,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:3",{"_index":579,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/FileNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["framework",{"_index":2295,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1548,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["fuel",{"_index":446,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["function",{"_index":1184,"title":{},"body":{"classes/EnvironmentVariables.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{}}}],["functions",{"_index":2283,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatepresignedurl",{"_index":1268,"title":{},"body":{"injectables/FilesService.html":{}}}],["generatepresignedurl(key",{"_index":1284,"title":{},"body":{"injectables/FilesService.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":1909,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":1912,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generation",{"_index":2352,"title":{},"body":{"index.html":{}}}],["get('/with",{"_index":464,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["get(':email",{"_index":2127,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':email')@apiparam({name",{"_index":2095,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":469,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["get(':userid/avatar",{"_index":2105,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files",{"_index":2164,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files')@apiokresponse({description",{"_index":2101,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id",{"_index":2167,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id')@apiparam({name",{"_index":2108,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('paragraphs/:paragraph",{"_index":1721,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('refresh",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@apiokresponse({description",{"_index":2091,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@healthcheck",{"_index":1461,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(key",{"_index":2405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallposts",{"_index":1707,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallprivatefiles",{"_index":2056,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(@req",{"_index":2165,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(request",{"_index":2100,"title":{},"body":{"controllers/UsersController.html":{}}}],["getauthenticateduser",{"_index":302,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":310,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getavatar",{"_index":2057,"title":{},"body":{"controllers/UsersController.html":{}}}],["getavatar(userid",{"_index":2104,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcomments",{"_index":600,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["getcomments(postid",{"_index":649,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getcomments(undefined",{"_index":604,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcommentsdto",{"_index":605,"title":{"classes/GetCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["getcommentshandler",{"_index":639,"title":{"classes/GetCommentsHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["getcommentsquery",{"_index":656,"title":{"classes/GetCommentsQuery.html":{}},"body":{"injectables/CommentsService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["getcommentsquery(postid",{"_index":660,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getcookiesforlogout",{"_index":303,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiesforuser",{"_index":1413,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiesforuser(user",{"_index":1420,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":304,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":315,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":305,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":322,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getdatabasefilebyid",{"_index":834,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["getdatabasefilebyid(id",{"_index":835,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["getfilebyid",{"_index":866,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{}}}],["getfilebyid(fileid",{"_index":875,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/LocalFilesService.html":{}}}],["gethello",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["getloglevels",{"_index":803,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(environment",{"_index":810,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["getloglevels(isproduction",{"_index":2288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getobject",{"_index":1302,"title":{},"body":{"injectables/FilesService.html":{}}}],["getormconfig",{"_index":1932,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["getormconfig(configservice",{"_index":1933,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["getpaginationprops",{"_index":1334,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getpaginationprops(paginationdto",{"_index":1340,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["getpostbyid",{"_index":1708,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(@param",{"_index":1736,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":1759,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid(undefined",{"_index":1718,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithparagraph",{"_index":1709,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostswithparagraph(@param",{"_index":1738,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithparagraph(paragraph",{"_index":1720,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getprivatefile",{"_index":1269,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{}}}],["getprivatefile(fileid",{"_index":1287,"title":{},"body":{"injectables/FilesService.html":{}}}],["getprivatefile(request",{"_index":2107,"title":{},"body":{"controllers/UsersController.html":{}}}],["getproductdto",{"_index":1392,"title":{"classes/GetProductDto.html":{}},"body":{"classes/GetProductDto.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["getting",{"_index":2292,"title":{"index.html":{}},"body":{}}],["getuserdata",{"_index":1414,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserdata(token",{"_index":1422,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["given",{"_index":2088,"title":{},"body":{"controllers/UsersController.html":{}}}],["google",{"_index":1397,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"index.html":{}}}],["google.auth.oauth2(clientid",{"_index":1436,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google.oauth2('v2').userinfo",{"_index":1438,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleapis",{"_index":1429,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":1394,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"coverage.html":{}}}],["googleauthenticationmodule",{"_index":88,"title":{"modules/GoogleAuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleauthenticationservice",{"_index":1402,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleconfig",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":2384,"title":{},"body":{"modules.html":{}}}],["handle",{"_index":1224,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["handleregistereduser",{"_index":1415,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["handleregistereduser(user",{"_index":1424,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["hash",{"_index":2413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":326,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["health",{"_index":1459,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":1496,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1464,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1465,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1457,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":89,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heap",{"_index":1478,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello",{"_index":1017,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["here:${url",{"_index":1012,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["host",{"_index":1107,"title":{},"body":{"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/TypeOrmConfig.html":{}}}],["html",{"_index":1016,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["httpcode",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('login')@apibody({type",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(204",{"_index":408,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/ProductsController.html":{}}}],["httpexception",{"_index":328,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httponly",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":329,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.bad_request",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["icommandhandler",{"_index":694,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["id",{"_index":12,"title":{},"body":{"entities/Address.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"classes/ObjectWithIdDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["id.dto",{"_index":690,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["id.dto.ts",{"_index":1664,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["id.dto.ts:5",{"_index":1665,"title":{},"body":{"classes/ObjectWithIdDto.html":{}}}],["identifier",{"_index":2185,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":854,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/UsersController.html":{}}}],["image/png",{"_index":1898,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["implementation",{"_index":2365,"title":{},"body":{"index.html":{}}}],["implementations/create",{"_index":703,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{}}}],["implementations/delete",{"_index":940,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["implementations/find",{"_index":1332,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{}}}],["implementations/get",{"_index":1381,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["implementations/update",{"_index":1981,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["implements",{"_index":693,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LogsMiddleware.html":{},"classes/UpdateProductHandler.html":{}}}],["import",{"_index":31,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"classes/TypeOrmConfig.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('post_authorid_index",{"_index":1698,"title":{},"body":{"entities/Post.html":{}}}],["index('post_authorid_index')@manytoone(undefined",{"_index":1679,"title":{},"body":{"entities/Post.html":{}}}],["industry",{"_index":2300,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["information",{"_index":1289,"title":{},"body":{"injectables/FilesService.html":{}}}],["inherited",{"_index":1374,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["inject",{"_index":292,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":299,"title":{"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["injectables",{"_index":300,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"overview.html":{}}}],["injectrepository",{"_index":430,"title":{},"body":{"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{}}}],["injectrepository(category",{"_index":544,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(comment",{"_index":705,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["injectrepository(databasefile",{"_index":881,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["injectrepository(localfile",{"_index":1602,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["injectrepository(log",{"_index":1658,"title":{},"body":{"injectables/LogsService.html":{}}}],["injectrepository(post",{"_index":1765,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(privatefile",{"_index":1299,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(product",{"_index":758,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["injectrepository(publicfile",{"_index":1298,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(user",{"_index":432,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["inline",{"_index":852,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["installation",{"_index":2366,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2368,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1208,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(...args",{"_index":1581,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["intercept(context",{"_index":1209,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interceptor",{"_index":1572,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["interface",{"_index":434,"title":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":436,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["internal",{"_index":1119,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FilesService.html":{}}}],["internalservererrorexception",{"_index":1102,"title":{},"body":{"injectables/EmailService.html":{}}}],["iqueryhandler",{"_index":1326,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["isarray",{"_index":1967,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["isboolean",{"_index":1176,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isboolean()@isnotempty",{"_index":1148,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isboolean()@isoptional",{"_index":1161,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["iscodevalid",{"_index":1900,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["iscreatinglogs",{"_index":1662,"title":{},"body":{"injectables/LogsService.html":{}}}],["isdatestring",{"_index":1043,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":766,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isemail()@apiproperty({default",{"_index":1623,"title":{},"body":{"classes/LogInDto.html":{}}}],["isemailconfirmed",{"_index":1997,"title":{},"body":{"entities/User.html":{}}}],["isenum",{"_index":1177,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdateRoleDto.html":{}}}],["isenum(environment",{"_index":1183,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isenum(environment)@isnotempty",{"_index":1150,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isenum(permission",{"_index":1968,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["isenum(role",{"_index":1988,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["isenum(role)@isnotempty",{"_index":1986,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["isglobal",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["islogging",{"_index":1948,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["isnotempty",{"_index":670,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoleDto.html":{}}}],["isnumber",{"_index":1178,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber()@isnotempty",{"_index":1156,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isnumber()@isoptional",{"_index":1956,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumberstring",{"_index":1357,"title":{},"body":{"classes/FindOneParams.html":{}}}],["isoptional",{"_index":728,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isoptional()@isstring()@isnotempty()@matches(/^\\+[1",{"_index":771,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1373,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{}}}],["ispasswordmatching",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isproduction",{"_index":2289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isregisteredwithgoogle",{"_index":1998,"title":{},"body":{"entities/User.html":{}}}],["issecondfactorauthenticated",{"_index":316,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{}}}],["isstring",{"_index":669,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":667,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1957,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":769,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7)@apiproperty({default",{"_index":1626,"title":{},"body":{"classes/LogInDto.html":{}}}],["isstring({each",{"_index":724,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":1910,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":1914,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":1999,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["items",{"_index":1252,"title":{},"body":{"classes/FileUploadMultipleDto.html":{}}}],["job",{"_index":1083,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.start",{"_index":1090,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.stop",{"_index":1092,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["john",{"_index":2412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":1549,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["joincolumn",{"_index":2030,"title":{},"body":{"entities/User.html":{}}}],["joincolumn({name",{"_index":2005,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":1696,"title":{},"body":{"entities/Post.html":{}}}],["jsdoc",{"_index":2349,"title":{},"body":{"index.html":{}}}],["json.stringify(parameters",{"_index":924,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["jsonb",{"_index":1790,"title":{},"body":{"entities/Product.html":{}}}],["jwt",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.accesstokenexpirationtime",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt.config.ts",{"_index":2317,"title":{},"body":{"index.html":{}}}],["jwt.refreshtokenexpirationtime",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt.strategy",{"_index":284,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwt.verificationtokenexpirationtime",{"_index":1003,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["jwt_access_token_expiration_time",{"_index":1139,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_access_token_secret",{"_index":1140,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_expiration_time",{"_index":2408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":1141,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_refresh_token_secret",{"_index":1142,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_verification_token_expiration_time",{"_index":1143,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_verification_token_secret",{"_index":1144,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwtauthenticationguard",{"_index":221,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtfromrequest",{"_index":1512,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":278,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.register",{"_index":979,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.registerasync",{"_index":291,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":224,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":270,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":308,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwtstrategy",{"_index":271,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1528,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{},"index.html":{}}}],["jwttwofactorstrategy",{"_index":272,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1234,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"miscellaneous/variables.html":{}}}],["level",{"_index":713,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{}}}],["levels",{"_index":805,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["levels.ts",{"_index":2209,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":2391,"title":{},"body":{"properties.html":{}}}],["licensed",{"_index":2380,"title":{},"body":{"index.html":{}}}],["limit",{"_index":626,"title":{},"body":{"controllers/CommentsController.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetProductDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"controllers/ProductsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["limits",{"_index":1560,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["link",{"_index":969,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":960,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["literal",{"_index":445,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["load",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/EnvironmentVariables.html":{},"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["local.strategy",{"_index":285,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthenticationguard",{"_index":226,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localfile",{"_index":1537,"title":{"entities/LocalFile.html":{}},"body":{"entities/LocalFile.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["localfiledto",{"_index":1543,"title":{"interfaces/LocalFileDto.html":{}},"body":{"interfaces/LocalFileDto.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{}}}],["localfilescontroller",{"_index":1546,"title":{"controllers/LocalFilesController.html":{}},"body":{"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"coverage.html":{}}}],["localfilesinterceptor",{"_index":1571,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["localfilesinterceptor(options",{"_index":2291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localfilesinterceptoroptions",{"_index":1556,"title":{"interfaces/LocalFilesInterceptorOptions.html":{}},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["localfilesmodule",{"_index":90,"title":{"modules/LocalFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LocalFilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["localfilesrepository",{"_index":1593,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["localfilesservice",{"_index":1550,"title":{"injectables/LocalFilesService.html":{}},"body":{"controllers/LocalFilesController.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy",{"_index":273,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":783,"title":{"entities/Log.html":{}},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log(level",{"_index":899,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["log(message",{"_index":795,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":1657,"title":{},"body":{"injectables/LogsService.html":{}}}],["log.dto.ts",{"_index":711,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:11",{"_index":716,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:5",{"_index":715,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:8",{"_index":717,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["logged",{"_index":2075,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger",{"_index":890,"title":{},"body":{"classes/DatabaseLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"classes/TypeOrmConfig.html":{},"index.html":{}}}],["logger('http",{"_index":1639,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["logger.filter.ts",{"_index":1197,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["logger.filter.ts:6",{"_index":1201,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["logger.service",{"_index":802,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":780,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["logger.ts:16",{"_index":906,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:27",{"_index":796,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:32",{"_index":908,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:37",{"_index":794,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:47",{"_index":800,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:48",{"_index":902,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:5",{"_index":898,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:52",{"_index":911,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:56",{"_index":900,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:57",{"_index":791,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:67",{"_index":798,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:7",{"_index":904,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:75",{"_index":913,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:9",{"_index":789,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger/logger.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":91,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":1953,"title":{},"body":{"classes/TypeOrmConfig.html":{},"index.html":{}}}],["login",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":191,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["loglevel",{"_index":2290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loglevels",{"_index":809,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":891,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logmigration(message",{"_index":901,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logout",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logquery",{"_index":892,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logquery(query",{"_index":903,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror",{"_index":893,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror(error",{"_index":905,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow",{"_index":894,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow(time",{"_index":907,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logs.service",{"_index":806,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{}}}],["logschemabuild",{"_index":895,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logschemabuild(message",{"_index":910,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logsmiddleware",{"_index":145,"title":{"injectables/LogsMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["logsrepository",{"_index":1654,"title":{},"body":{"injectables/LogsService.html":{}}}],["logsservice",{"_index":782,"title":{"injectables/LogsService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["look",{"_index":2350,"title":{},"body":{"index.html":{}}}],["mail",{"_index":1101,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":1099,"title":{},"body":{"injectables/EmailService.html":{}}}],["mailer",{"_index":1120,"title":{},"body":{"injectables/EmailService.html":{}}}],["maintaining",{"_index":2299,"title":{},"body":{"index.html":{}}}],["manytomany",{"_index":572,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytomany(undefined",{"_index":568,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytoone",{"_index":594,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["manytoone(undefined",{"_index":587,"title":{},"body":{"entities/Comment.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["map",{"_index":1217,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["match",{"_index":1855,"title":{},"body":{"classes/RegisterDto.html":{},"controllers/UsersController.html":{}}}],["matches",{"_index":775,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":777,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":38,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(1024",{"_index":2150,"title":{},"body":{"controllers/UsersController.html":{}}}],["max",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["mb",{"_index":2152,"title":{},"body":{"controllers/UsersController.html":{}}}],["memory",{"_index":1476,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1466,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":714,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{}}}],["metadata",{"_index":2248,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1643,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["methods",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{}}}],["middlewareconsumer",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["mimetype",{"_index":1540,"title":{},"body":{"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/UsersController.html":{}}}],["min",{"_index":1676,"title":{},"body":{"classes/PaginationDto.html":{}}}],["min(1",{"_index":1677,"title":{},"body":{"classes/PaginationDto.html":{}}}],["minlength",{"_index":774,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":776,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":2258,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2379,"title":{},"body":{"index.html":{}}}],["mixin",{"_index":1561,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["mixin(interceptor",{"_index":1583,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["mixin(permissionguardmixin",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mixin(roleguardmixin",{"_index":2425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mockedconfigservice",{"_index":2212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":2214,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockeduser",{"_index":2195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["module",{"_index":72,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":74,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1474,"title":{},"body":{"controllers/HealthController.html":{}}}],["multer",{"_index":1568,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions",{"_index":1564,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions['filefilter",{"_index":1569,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions['limits",{"_index":1570,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multiple.dto.ts",{"_index":1250,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["multiple.dto.ts:5",{"_index":1254,"title":{},"body":{"classes/FileUploadMultipleDto.html":{}}}],["name",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name}!${text",{"_index":1018,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["necessary",{"_index":2042,"title":{},"body":{"entities/User.html":{}}}],["need",{"_index":2340,"title":{},"body":{"index.html":{}}}],["nest",{"_index":2294,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1215,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["nestjs/common",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/common/services/console",{"_index":801,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":634,"title":{},"body":{"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":279,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1977,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":281,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1563,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/LogInDto.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdatePermissionsDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1468,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":417,"title":{},"body":{"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductHandler.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProductsModule.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestlogger",{"_index":914,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestlogger('sql",{"_index":897,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestmiddleware",{"_index":1641,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["new",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newcomment",{"_index":706,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["newfile",{"_index":882,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"injectables/FilesService.html":{},"injectables/LocalFilesService.html":{}}}],["newlog",{"_index":1659,"title":{},"body":{"injectables/LogsService.html":{}}}],["newpost",{"_index":1773,"title":{},"body":{"injectables/PostsService.html":{}}}],["newproduct",{"_index":759,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["next",{"_index":1211,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/LogsMiddleware.html":{}}}],["nextfunction",{"_index":1637,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["nodemailer",{"_index":1104,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{},"index.html":{}}}],["nodemailer/lib/mailer",{"_index":1105,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":1094,"title":{},"body":{"injectables/EmailService.html":{}}}],["none",{"_index":2138,"title":{},"body":{"controllers/UsersController.html":{}}}],["notfoundexception",{"_index":577,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/DatabaseFilesService.html":{},"classes/FileNotFoundException.html":{},"injectables/LocalFilesService.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["notfoundexception('post",{"_index":1772,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":2367,"title":{},"body":{"index.html":{}}}],["null",{"_index":1222,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["null.interceptor.ts",{"_index":1207,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["null.interceptor.ts:13",{"_index":1213,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nullable",{"_index":1691,"title":{},"body":{"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":24,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"interfaces/CarProperties.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"injectables/CommentsService.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/EnvironmentVariables.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"entities/LocalFile.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{}}}],["number(id",{"_index":2169,"title":{},"body":{"controllers/UsersController.html":{}}}],["number(paginationdto.limit",{"_index":2404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(paginationdto.page",{"_index":2403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numberofcylinders",{"_index":447,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["oauthclient",{"_index":1412,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":1027,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"miscellaneous/variables.html":{}}}],["object.keys(paginationdto).length",{"_index":2402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectwithiddto",{"_index":684,"title":{"classes/ObjectWithIdDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["observable",{"_index":1214,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["off')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1885,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["oldproduct",{"_index":942,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["oldproduct.owner",{"_index":944,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["oldproduct.owner.id",{"_index":945,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["on')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1888,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["one",{"_index":490,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["onetomany",{"_index":1697,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1685,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetoone",{"_index":32,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":28,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["open",{"_index":2330,"title":{},"body":{"index.html":{}}}],["optional",{"_index":14,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":787,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/EmailService.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/functions.html":{}}}],["options.fieldname",{"_index":1580,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.filefilter",{"_index":1577,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.interface",{"_index":1566,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.limits",{"_index":1578,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["originalurl",{"_index":1644,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["otpauthurl",{"_index":1895,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":1919,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":2311,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":733,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{}}}],["owner.files",{"_index":1782,"title":{},"body":{"entities/PrivateFile.html":{}}}],["owner.id",{"_index":946,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["owner.products",{"_index":1788,"title":{},"body":{"entities/Product.html":{}}}],["ownerid",{"_index":1277,"title":{},"body":{"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["package",{"_index":2219,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":2357,"title":{},"body":{"index.html":{}}}],["page",{"_index":624,"title":{},"body":{"controllers/CommentsController.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetProductDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"controllers/ProductsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paginatedresultdto",{"_index":616,"title":{"classes/PaginatedResultDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/PaginatedResultDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["pagination",{"_index":1335,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paginationdto",{"_index":650,"title":{"classes/PaginationDto.html":{}},"body":{"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginationdto:15",{"_index":1375,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["paginationdto:9",{"_index":1376,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["paragraph",{"_index":1723,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["paragraphs",{"_index":721,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["param",{"_index":390,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":846,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/ProductsController.html":{}}}],["param('userid",{"_index":409,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["params.dto",{"_index":491,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["params.dto.ts",{"_index":1356,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["params.dto.ts:5",{"_index":1358,"title":{},"body":{"classes/FindOneParams.html":{}}}],["parseintpipe",{"_index":391,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["parser",{"_index":2236,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1976,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":1979,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":1992,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":1114,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":1510,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":280,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":1507,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1525,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1517,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["passthrough",{"_index":847,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["password",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/TypeOrmConfig.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":392,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["patch(':id",{"_index":507,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["patch(':id')@useguards(jwttwofactorguard",{"_index":1726,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch(':id')@useguards(undefined)@useguards(undefined",{"_index":479,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["patch(':userid/permissions",{"_index":411,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["patch(':userid/permissions')@httpcode(204",{"_index":384,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["patch(':userid/role",{"_index":407,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["patch(':userid/role')@httpcode(204",{"_index":388,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["path",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/HealthController.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.email",{"_index":1028,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.interface",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.interface.ts",{"_index":1866,"title":{},"body":{"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["payload.issecondfactorauthenticated",{"_index":1534,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":1520,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["permission",{"_index":485,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"classes/UpdatePermissionsDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["permissionguard",{"_index":483,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionguardmixin",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissions",{"_index":1961,"title":{},"body":{"classes/UpdatePermissionsDto.html":{},"entities/User.html":{},"index.html":{}}}],["permissions.dto",{"_index":397,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{}}}],["permissions.dto.ts",{"_index":1960,"title":{},"body":{"classes/UpdatePermissionsDto.html":{},"coverage.html":{}}}],["permissions.dto.ts:12",{"_index":1965,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["permission})@isenum(permission",{"_index":1963,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["pg",{"_index":2244,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":765,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["pipe(map((value",{"_index":1225,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipeqrcodestream",{"_index":1911,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":1916,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["plaintextpassword",{"_index":311,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["plaintoclass",{"_index":1175,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["plaintoclass(environmentvariables",{"_index":1188,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["pnpm",{"_index":2354,"title":{},"body":{"index.html":{}}}],["port",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/TypeOrmConfig.html":{}}}],["post",{"_index":207,"title":{"entities/Post.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post(':id/restore",{"_index":515,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["post(':id/restore')@useguards(undefined)@useguards(undefined",{"_index":475,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["post('authenticate",{"_index":1906,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('authenticate')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1878,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('avatar",{"_index":2141,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@apiconsumes('multipart/form",{"_index":2059,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/amazons3",{"_index":2158,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/amazons3')@apiconsumes('multipart/form",{"_index":2068,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/postgres",{"_index":2162,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar/postgres')@apiconsumes('multipart/form",{"_index":2071,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('confirm",{"_index":955,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('files",{"_index":2171,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('files')@apiconsumes('multipart/form",{"_index":2074,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('generate",{"_index":1893,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('generate')@useguards(jwtauthenticationguard",{"_index":1881,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('login",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('logout",{"_index":260,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":959,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('schedule",{"_index":1063,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule')@useguards(jwtauthenticationguard",{"_index":1055,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule/cancel",{"_index":1066,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule/cancel')@useguards(jwtauthenticationguard",{"_index":1052,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('turn",{"_index":1884,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post()@useguards(jwttwofactorguard",{"_index":1712,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@useguards(undefined",{"_index":1797,"title":{},"body":{"controllers/ProductsController.html":{}}}],["post()@useguards(undefined)@useguards(undefined",{"_index":460,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["post.author",{"_index":2024,"title":{},"body":{"entities/User.html":{}}}],["post.categories",{"_index":569,"title":{},"body":{"entities/Category.html":{}}}],["post.comments",{"_index":592,"title":{},"body":{"entities/Comment.html":{}}}],["post.dto",{"_index":1730,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":720,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":1970,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:13",{"_index":726,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":1972,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:5",{"_index":723,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:6",{"_index":1971,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:9",{"_index":727,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postgres",{"_index":1938,"title":{},"body":{"classes/TypeOrmConfig.html":{},"entities/User.html":{}}}],["postgreserrorcode",{"_index":331,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["postgresql",{"_index":2333,"title":{},"body":{"index.html":{}}}],["postid",{"_index":623,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["postnotfoundexception",{"_index":1700,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1768,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":549,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":1749,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1732,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/entities/post.entity",{"_index":571,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/User.html":{}}}],["postscontroller",{"_index":1703,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":92,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1754,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":1731,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practices",{"_index":2303,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/LocalFilesController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":25,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/DatabaseFile.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1785,"title":{},"body":{"entities/Product.html":{}}}],["private",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["privatefile",{"_index":1260,"title":{"entities/PrivateFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/PrivateFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["privatefilesrepository",{"_index":1273,"title":{},"body":{"injectables/FilesService.html":{}}}],["privatefile})@apiunauthorizedresponse({description",{"_index":2076,"title":{},"body":{"controllers/UsersController.html":{}}}],["process",{"_index":1472,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.typeorm_logging",{"_index":1954,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["process.env.typeorm_synchronize",{"_index":1952,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["product",{"_index":734,"title":{"entities/Product.html":{}},"body":{"classes/CreateProductCommand.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["product.command",{"_index":756,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductHandler.html":{}}}],["product.command.ts",{"_index":732,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{},"coverage.html":{}}}],["product.command.ts:3",{"_index":931,"title":{},"body":{"classes/DeleteProductCommand.html":{}}}],["product.command.ts:4",{"_index":737,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:6",{"_index":739,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:7",{"_index":738,"title":{},"body":{"classes/CreateProductCommand.html":{},"classes/UpdateProductCommand.html":{}}}],["product.command.ts:8",{"_index":1974,"title":{},"body":{"classes/UpdateProductCommand.html":{}}}],["product.dto",{"_index":740,"title":{},"body":{"classes/CreateProductCommand.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":742,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":744,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:8",{"_index":743,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductDto.html":{}}}],["product.handler",{"_index":1823,"title":{},"body":{"modules/ProductsModule.html":{}}}],["product.handler.ts",{"_index":750,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["product.handler.ts:10",{"_index":752,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["product.handler.ts:12",{"_index":935,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["product.handler.ts:15",{"_index":754,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["product.handler.ts:17",{"_index":936,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["product.handler.ts:8",{"_index":1360,"title":{},"body":{"classes/FindProductHandler.html":{}}}],["product.owner",{"_index":2026,"title":{},"body":{"entities/User.html":{}}}],["product.query",{"_index":1362,"title":{},"body":{"classes/FindProductHandler.html":{},"injectables/ProductsService.html":{}}}],["product.query.ts",{"_index":1365,"title":{},"body":{"classes/FindProductQuery.html":{},"coverage.html":{}}}],["product.query.ts:1",{"_index":1367,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["product.query.ts:2",{"_index":1368,"title":{},"body":{"classes/FindProductQuery.html":{}}}],["productid",{"_index":1364,"title":{},"body":{"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{}}}],["production",{"_index":811,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["productnotfoundexception",{"_index":938,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/DeleteProductHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["productnotfoundexception(id",{"_index":948,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["products",{"_index":1343,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"controllers/ProductsController.html":{},"entities/User.html":{}}}],["products.controller",{"_index":1822,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.handler",{"_index":1825,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.handler.ts",{"_index":1325,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"coverage.html":{}}}],["products.handler.ts:12",{"_index":1327,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["products.handler.ts:17",{"_index":1330,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["products.query",{"_index":1333,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"injectables/ProductsService.html":{}}}],["products.query.ts",{"_index":1350,"title":{},"body":{"classes/FindAllProductsQuery.html":{},"coverage.html":{}}}],["products.query.ts:3",{"_index":1352,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.query.ts:5",{"_index":1353,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.query.ts:6",{"_index":1354,"title":{},"body":{"classes/FindAllProductsQuery.html":{}}}],["products.service",{"_index":1807,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/entities/product.entity",{"_index":2034,"title":{},"body":{"entities/User.html":{}}}],["productscontroller",{"_index":1794,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productscount",{"_index":1344,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["productsmodule",{"_index":93,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productspermission",{"_index":2265,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["productsrepository",{"_index":753,"title":{},"body":{"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["productsservice",{"_index":1806,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["promise",{"_index":607,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayload.html":{},"properties.html":{}}}],["properties.interface",{"_index":746,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["properties.interface.ts",{"_index":438,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"coverage.html":{}}}],["props",{"_index":1336,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["props.ts",{"_index":2210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":9,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"entities/DatabaseFile.html":{},"classes/DeleteProductCommand.html":{},"injectables/EmailConfirmationService.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsQuery.html":{},"entities/LocalFile.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"index.html":{}}}],["publicationyear",{"_index":440,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["publicfile",{"_index":1262,"title":{"entities/PublicFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["publicfilesrepository",{"_index":1275,"title":{},"body":{"injectables/FilesService.html":{}}}],["publicfile})@apiunauthorizedresponse({description",{"_index":2064,"title":{},"body":{"controllers/UsersController.html":{}}}],["publicly",{"_index":2039,"title":{},"body":{"entities/User.html":{}}}],["qrcode",{"_index":1921,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["queries/handlers/find",{"_index":1824,"title":{},"body":{"modules/ProductsModule.html":{}}}],["queries/handlers/get",{"_index":640,"title":{},"body":{"modules/CommentsModule.html":{}}}],["queries/implementations/find",{"_index":1841,"title":{},"body":{"injectables/ProductsService.html":{}}}],["queries/implementations/get",{"_index":657,"title":{},"body":{"injectables/CommentsService.html":{}}}],["query",{"_index":608,"title":{},"body":{"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"controllers/ProductsController.html":{}}}],["querybus",{"_index":646,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["queryhandler",{"_index":1331,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["queryhandler(findallproductsquery",{"_index":1338,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["queryhandler(findproductquery",{"_index":1363,"title":{},"body":{"classes/FindProductHandler.html":{}}}],["queryhandler(getcommentsquery",{"_index":1382,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryrunner",{"_index":872,"title":{},"body":{"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"injectables/LocalFilesService.html":{}}}],["queryrunner.manager.create(databasefile",{"_index":883,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner.manager.delete",{"_index":885,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner.manager.delete(localfile",{"_index":1606,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["queryrunner.manager.save(databasefile",{"_index":884,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["queryrunner?.data?.iscreatinglogs",{"_index":915,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["readable",{"_index":842,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["readable.from(file.data",{"_index":849,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["readonly",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsMiddleware.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"controllers/UsersController.html":{}}}],["recipient",{"_index":1041,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["record",{"_index":1186,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["recursively",{"_index":1220,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["recursivelystripnullvalues",{"_index":1219,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":1226,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":2247,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":239,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":197,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":1501,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshtokencookie",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["register",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["register(@body",{"_index":244,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(@res",{"_index":1894,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(registrationdata",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(response",{"_index":1880,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registeras",{"_index":1935,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["registeras('typeorm",{"_index":1951,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["registerdto",{"_index":201,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registeruser",{"_index":1416,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruser(token",{"_index":1426,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registrationdata",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["regular",{"_index":1856,"title":{},"body":{"classes/RegisterDto.html":{}}}],["relations",{"_index":548,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{}}}],["remove",{"_index":455,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(@param",{"_index":513,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["remove(@param('id",{"_index":1817,"title":{},"body":{"controllers/ProductsController.html":{}}}],["remove(id",{"_index":535,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(undefined",{"_index":471,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["repository",{"_index":423,"title":{},"body":{"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"classes/UpdateProductHandler.html":{},"index.html":{}}}],["req",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.cookies?.refresh",{"_index":1518,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.headers['if",{"_index":2137,"title":{},"body":{"controllers/UsersController.html":{}}}],["request.res.setheader",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":242,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["request.user.id",{"_index":1908,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request?.cookies?.authentication",{"_index":1526,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":1514,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":185,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["required",{"_index":2085,"title":{},"body":{"controllers/UsersController.html":{}}}],["res",{"_index":838,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["resendconfirmationlink",{"_index":953,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(@req",{"_index":970,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(request",{"_index":958,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(userid",{"_index":991,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["reset",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":836,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsMiddleware.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["response.dto",{"_index":2121,"title":{},"body":{"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1233,"title":{},"body":{"classes/FileResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:12",{"_index":1236,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:14",{"_index":1237,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:6",{"_index":1238,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1235,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.on('finish",{"_index":1642,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["response.set",{"_index":850,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["response.setheader('content",{"_index":1897,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["response.status(304",{"_index":2139,"title":{},"body":{"controllers/UsersController.html":{}}}],["restorecategory",{"_index":2272,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["restoredeleted",{"_index":456,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["restoredeleted(@param",{"_index":517,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["restoredeleted(id",{"_index":537,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["restoredeleted(undefined",{"_index":474,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["restoreresponse",{"_index":558,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["restoreresponse.affected",{"_index":560,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["result.dto",{"_index":618,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["result.dto.ts",{"_index":1667,"title":{},"body":{"classes/PaginatedResultDto.html":{},"coverage.html":{}}}],["result.dto.ts:11",{"_index":1670,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:14",{"_index":1672,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:5",{"_index":1669,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["result.dto.ts:8",{"_index":1671,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["results",{"_index":37,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"injectables/CustomLogger.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateProductHandler.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2250,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":399,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.dto",{"_index":398,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{}}}],["role.dto.ts",{"_index":1985,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:7",{"_index":1987,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["role.enum",{"_index":400,"title":{},"body":{"controllers/AuthorizationController.html":{},"classes/UpdateRoleDto.html":{}}}],["role.guard",{"_index":402,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["role.user",{"_index":2036,"title":{},"body":{"entities/User.html":{}}}],["roleguard",{"_index":401,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguardmixin",{"_index":2423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roles",{"_index":2363,"title":{},"body":{"index.html":{}}}],["rss",{"_index":1481,"title":{},"body":{"controllers/HealthController.html":{}}}],["run",{"_index":2353,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1216,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1218,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["s",{"_index":1004,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["s3",{"_index":1294,"title":{},"body":{"injectables/FilesService.html":{},"entities/User.html":{},"index.html":{}}}],["s3.getsignedurlpromise('getobject",{"_index":1308,"title":{},"body":{"injectables/FilesService.html":{}}}],["savelocalfiledata",{"_index":1590,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["savelocalfiledata(filedata",{"_index":1597,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["schedule.dto",{"_index":1059,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedule.dto.ts",{"_index":1040,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["schedule.dto.ts:13",{"_index":1042,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:16",{"_index":1044,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:5",{"_index":1045,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:9",{"_index":1046,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["scheduled",{"_index":2359,"title":{},"body":{"index.html":{}}}],["scheduleemail",{"_index":1051,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":1064,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":1054,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":1076,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling",{"_index":1049,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"index.html":{}}}],["scheduling.controller",{"_index":1072,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["scheduling.controller.ts",{"_index":1048,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["scheduling.controller.ts:24",{"_index":1056,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.controller.ts:30",{"_index":1053,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduling.module.ts",{"_index":1071,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["scheduling.service",{"_index":1061,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["scheduling.service.ts",{"_index":1073,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["scheduling.service.ts:14",{"_index":1079,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:33",{"_index":1078,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:8",{"_index":1077,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling/dto/email",{"_index":1039,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["scheduling/email",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["sdk",{"_index":1295,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["secret",{"_index":294,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["secretorkey",{"_index":1515,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["secure",{"_index":1110,"title":{},"body":{"injectables/EmailService.html":{}}}],["segment",{"_index":2313,"title":{},"body":{"index.html":{}}}],["select",{"_index":1770,"title":{},"body":{"injectables/PostsService.html":{}}}],["sending",{"_index":2358,"title":{},"body":{"index.html":{}}}],["sendmail",{"_index":1095,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":1098,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendverificationlink",{"_index":983,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sendverificationlink(undefined",{"_index":993,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["separated",{"_index":2312,"title":{},"body":{"index.html":{}}}],["serialization",{"_index":2323,"title":{},"body":{"index.html":{}}}],["service",{"_index":2361,"title":{},"body":{"index.html":{}}}],["set",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setup",{"_index":2298,"title":{},"body":{"index.html":{}}}],["sign",{"_index":2410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":296,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["skip",{"_index":1346,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["skipmissingproperties",{"_index":1192,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["skippeditems",{"_index":1339,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"miscellaneous/variables.html":{}}}],["soft",{"_index":2336,"title":{},"body":{"index.html":{}}}],["something",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["space",{"_index":1490,"title":{},"body":{"controllers/HealthController.html":{}}}],["specific",{"_index":2338,"title":{},"body":{"index.html":{}}}],["specification",{"_index":2331,"title":{},"body":{"index.html":{}}}],["specify",{"_index":2346,"title":{},"body":{"index.html":{}}}],["src/.../categoriespermission.enum.ts",{"_index":2261,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.service.ts",{"_index":2396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.validation.ts",{"_index":2262,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":2285,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.service.ts",{"_index":2397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../local",{"_index":2286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permission.guard.ts",{"_index":2399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../permission.type.ts",{"_index":2395,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../postgres",{"_index":2263,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../productspermission.enum.ts",{"_index":2266,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../recursively",{"_index":2287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":2267,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.guard.ts",{"_index":2400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../typeorm.config.ts",{"_index":2401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.mock.ts",{"_index":2398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:95",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":175,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:32",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:39",{"_index":199,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:48",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:58",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:82",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":275,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":301,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":309,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":324,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:41",{"_index":312,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:54",{"_index":317,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:68",{"_index":323,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:83",{"_index":314,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:90",{"_index":327,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":1622,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:17",{"_index":1627,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:9",{"_index":1625,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":1850,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:13",{"_index":1851,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:17",{"_index":1852,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:22",{"_index":1853,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:32",{"_index":1860,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/jwt",{"_index":1497,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts",{"_index":1521,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts:10",{"_index":1522,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:25",{"_index":1524,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/local",{"_index":1535,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts",{"_index":1607,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts:15",{"_index":1611,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/local.strategy.ts:8",{"_index":1609,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/request",{"_index":1863,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/tests/user.mock.ts",{"_index":2193,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/token",{"_index":1865,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/two",{"_index":1529,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/authorization",{"_index":2364,"title":{},"body":{"index.html":{}}}],["src/authorization/authorization.controller.ts",{"_index":378,"title":{},"body":{"controllers/AuthorizationController.html":{},"coverage.html":{}}}],["src/authorization/authorization.controller.ts:28",{"_index":389,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["src/authorization/authorization.controller.ts:37",{"_index":385,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["src/authorization/authorization.module.ts",{"_index":415,"title":{},"body":{"modules/AuthorizationModule.html":{}}}],["src/authorization/authorization.service.ts",{"_index":421,"title":{},"body":{"injectables/AuthorizationService.html":{},"coverage.html":{}}}],["src/authorization/authorization.service.ts:15",{"_index":429,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["src/authorization/authorization.service.ts:19",{"_index":427,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["src/authorization/authorization.service.ts:9",{"_index":424,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["src/authorization/dto/update",{"_index":1959,"title":{},"body":{"classes/UpdatePermissionsDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/authorization/permission.guard.ts",{"_index":2197,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authorization/role.enum.ts",{"_index":2280,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/authorization/role.guard.ts",{"_index":2198,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authorization/types/permission.type.ts",{"_index":2199,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm.config.ts",{"_index":1930,"title":{},"body":{"classes/TypeOrmConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm.config.ts:9",{"_index":1934,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["src/database/database",{"_index":888,"title":{},"body":{"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":925,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgres",{"_index":2273,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/email",{"_index":2362,"title":{},"body":{"index.html":{}}}],["src/email/email.module.ts",{"_index":1036,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":1093,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:23",{"_index":1100,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":1097,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/env.validation.ts",{"_index":1124,"title":{},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/env.validation.ts:102",{"_index":1162,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:106",{"_index":1165,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:110",{"_index":1163,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:22",{"_index":1151,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:26",{"_index":1149,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:30",{"_index":1152,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:34",{"_index":1172,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:38",{"_index":1167,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:42",{"_index":1166,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:46",{"_index":1169,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:50",{"_index":1168,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:54",{"_index":1171,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:58",{"_index":1170,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:62",{"_index":1159,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:66",{"_index":1153,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:70",{"_index":1157,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:74",{"_index":1158,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:78",{"_index":1155,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:82",{"_index":1154,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:86",{"_index":1174,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:90",{"_index":1173,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:94",{"_index":1160,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/env.validation.ts:98",{"_index":1164,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/features/categories",{"_index":2337,"title":{},"body":{"index.html":{}}}],["src/features/categories/categories.controller.ts",{"_index":449,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/features/categories/categories.controller.ts:33",{"_index":461,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:38",{"_index":463,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:43",{"_index":466,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:48",{"_index":470,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:55",{"_index":480,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:62",{"_index":473,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.controller.ts:69",{"_index":476,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/features/categories/categories.module.ts",{"_index":521,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/features/categories/categories.service.ts",{"_index":525,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/features/categories/categories.service.ts:10",{"_index":527,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:16",{"_index":530,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:22",{"_index":531,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:28",{"_index":532,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:35",{"_index":534,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:48",{"_index":540,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:62",{"_index":536,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/categories.service.ts:69",{"_index":538,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/features/categories/dto/create",{"_index":672,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/features/categories/dto/update",{"_index":1955,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/features/categories/entities/category.entity.ts",{"_index":561,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/features/categories/entities/category.entity.ts:13",{"_index":566,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:16",{"_index":567,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:19",{"_index":570,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/entities/category.entity.ts:22",{"_index":565,"title":{},"body":{"entities/Category.html":{}}}],["src/features/categories/enums/categoriespermission.enum.ts",{"_index":2268,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/features/categories/exceptions/category",{"_index":574,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["src/features/comments",{"_index":2324,"title":{},"body":{"index.html":{}}}],["src/features/comments/commands/handlers/create",{"_index":691,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["src/features/comments/commands/implementations/create",{"_index":675,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["src/features/comments/comments.controller.ts",{"_index":597,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/features/comments/comments.controller.ts:27",{"_index":606,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/features/comments/comments.controller.ts:34",{"_index":603,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/features/comments/comments.module.ts",{"_index":632,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/features/comments/comments.service.ts",{"_index":643,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["src/features/comments/comments.service.ts:12",{"_index":647,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/comments.service.ts:15",{"_index":651,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/comments.service.ts:22",{"_index":648,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/features/comments/dto/create",{"_index":681,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/features/comments/dto/get",{"_index":1369,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["src/features/comments/entities/comment.entity.ts",{"_index":584,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/features/comments/entities/comment.entity.ts:11",{"_index":590,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:14",{"_index":593,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:17",{"_index":589,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/entities/comment.entity.ts:8",{"_index":591,"title":{},"body":{"entities/Comment.html":{}}}],["src/features/comments/queries/handlers/get",{"_index":1377,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["src/features/comments/queries/implementations/get",{"_index":1386,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["src/features/database",{"_index":819,"title":{},"body":{"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"modules/DatabaseFilesModule.html":{},"injectables/DatabaseFilesService.html":{},"coverage.html":{},"index.html":{}}}],["src/features/email",{"_index":664,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"index.html":{}}}],["src/features/files/entities/private",{"_index":1779,"title":{},"body":{"entities/PrivateFile.html":{},"coverage.html":{}}}],["src/features/files/entities/public",{"_index":1849,"title":{},"body":{"entities/PublicFile.html":{},"coverage.html":{}}}],["src/features/files/exceptions/file",{"_index":1228,"title":{},"body":{"classes/FileNotFoundException.html":{},"coverage.html":{}}}],["src/features/files/files.module.ts",{"_index":1259,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/features/files/files.service.ts",{"_index":1265,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{},"index.html":{}}}],["src/features/files/files.service.ts:121",{"_index":1283,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:13",{"_index":1274,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:139",{"_index":1278,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:26",{"_index":1288,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:56",{"_index":1285,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:69",{"_index":1293,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/files/files.service.ts:95",{"_index":1291,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/features/google",{"_index":1395,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{},"index.html":{}}}],["src/features/local",{"_index":1538,"title":{},"body":{"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/LocalFilesModule.html":{},"injectables/LocalFilesService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/features/posts/dto/create",{"_index":719,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/features/posts/dto/update",{"_index":1969,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/features/posts/entities/post.entity.ts",{"_index":1678,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/features/posts/entities/post.entity.ts:18",{"_index":1689,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:21",{"_index":1693,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:24",{"_index":1688,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:27",{"_index":1692,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:30",{"_index":1684,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:34",{"_index":1680,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:38",{"_index":1682,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/entities/post.entity.ts:41",{"_index":1687,"title":{},"body":{"entities/Post.html":{}}}],["src/features/posts/exceptions/post",{"_index":1701,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/features/posts/posts.controller.ts",{"_index":1704,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/features/posts/posts.controller.ts:26",{"_index":1717,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:31",{"_index":1719,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:36",{"_index":1722,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:42",{"_index":1713,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:51",{"_index":1727,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.controller.ts:60",{"_index":1716,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/features/posts/posts.module.ts",{"_index":1747,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/features/posts/posts.service.ts",{"_index":1751,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/features/posts/posts.service.ts:11",{"_index":1753,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:16",{"_index":1758,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:22",{"_index":1760,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:35",{"_index":1761,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:46",{"_index":1755,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:55",{"_index":1763,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/posts/posts.service.ts:69",{"_index":1757,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/features/products",{"_index":2329,"title":{},"body":{"index.html":{}}}],["src/features/products/commands/handlers/create",{"_index":749,"title":{},"body":{"classes/CreateProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/handlers/delete",{"_index":934,"title":{},"body":{"classes/DeleteProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/handlers/update",{"_index":1980,"title":{},"body":{"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/create",{"_index":731,"title":{},"body":{"classes/CreateProductCommand.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/delete",{"_index":929,"title":{},"body":{"classes/DeleteProductCommand.html":{},"coverage.html":{}}}],["src/features/products/commands/implementations/update",{"_index":1973,"title":{},"body":{"classes/UpdateProductCommand.html":{},"coverage.html":{}}}],["src/features/products/dto/create",{"_index":741,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/features/products/dto/get",{"_index":1393,"title":{},"body":{"classes/GetProductDto.html":{},"coverage.html":{}}}],["src/features/products/dto/update",{"_index":1975,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/features/products/entities/product.entity.ts",{"_index":1784,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/features/products/entities/product.entity.ts:12",{"_index":1787,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:18",{"_index":1791,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:21",{"_index":1789,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/entities/product.entity.ts:9",{"_index":1786,"title":{},"body":{"entities/Product.html":{}}}],["src/features/products/enums/productspermission.enum.ts",{"_index":2276,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/features/products/exceptions/file",{"_index":1792,"title":{},"body":{"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/features/products/products.controller.ts",{"_index":1795,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/features/products/products.controller.ts:35",{"_index":1798,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:44",{"_index":1800,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:51",{"_index":1801,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:56",{"_index":1805,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.controller.ts:68",{"_index":1803,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/features/products/products.module.ts",{"_index":1821,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/features/products/products.service.ts",{"_index":1830,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/features/products/products.service.ts:16",{"_index":1831,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:19",{"_index":1832,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:28",{"_index":1834,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:37",{"_index":1835,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:41",{"_index":1837,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/products.service.ts:47",{"_index":1836,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/features/products/queries/handlers/find",{"_index":1324,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"coverage.html":{}}}],["src/features/products/queries/implementations/find",{"_index":1349,"title":{},"body":{"classes/FindAllProductsQuery.html":{},"classes/FindProductQuery.html":{},"coverage.html":{}}}],["src/features/products/types/book",{"_index":437,"title":{},"body":{"interfaces/BookProperties.html":{},"coverage.html":{}}}],["src/features/products/types/car",{"_index":442,"title":{},"body":{"interfaces/CarProperties.html":{},"coverage.html":{}}}],["src/features/users/dto/create",{"_index":763,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/features/users/dto/file",{"_index":1232,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"coverage.html":{}}}],["src/features/users/dto/update",{"_index":1990,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/features/users/entities/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/features/users/entities/address.entity.ts:10",{"_index":27,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:13",{"_index":22,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:16",{"_index":23,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:19",{"_index":30,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/address.entity.ts:7",{"_index":26,"title":{},"body":{"entities/Address.html":{}}}],["src/features/users/entities/user.entity",{"_index":418,"title":{},"body":{"modules/AuthorizationModule.html":{}}}],["src/features/users/entities/user.entity.ts",{"_index":1993,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/features/users/entities/user.entity.ts:101",{"_index":2029,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:104",{"_index":2018,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:107",{"_index":2017,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:21",{"_index":2014,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:24",{"_index":2012,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:27",{"_index":2016,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:34",{"_index":2028,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:42",{"_index":2022,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:45",{"_index":2019,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:48",{"_index":2023,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:55",{"_index":2004,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:59",{"_index":2021,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:63",{"_index":2010,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:66",{"_index":2025,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:87",{"_index":2007,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:91",{"_index":2008,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:94",{"_index":2013,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/entities/user.entity.ts:97",{"_index":2027,"title":{},"body":{"entities/User.html":{}}}],["src/features/users/exceptions/user",{"_index":2045,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/features/users/users.controller.ts",{"_index":2049,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["src/features/users/users.controller.ts:125",{"_index":2066,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:142",{"_index":2082,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:159",{"_index":2069,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:183",{"_index":2072,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:202",{"_index":2103,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:222",{"_index":2110,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:247",{"_index":2077,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:273",{"_index":2090,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:49",{"_index":2093,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:67",{"_index":2099,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.controller.ts:72",{"_index":2106,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/features/users/users.module.ts",{"_index":2179,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/features/users/users.service.ts",{"_index":2204,"title":{},"body":{"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":1458,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:21",{"_index":1462,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1494,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/logger/custom",{"_index":779,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/dto/create",{"_index":710,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/logger/entities/log.entity.ts",{"_index":1614,"title":{},"body":{"entities/Log.html":{},"coverage.html":{}}}],["src/logger/entities/log.entity.ts:11",{"_index":1619,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:14",{"_index":1616,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:17",{"_index":1621,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:20",{"_index":1620,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:23",{"_index":1618,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/logger.module.ts",{"_index":1631,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logs.service.ts",{"_index":1650,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logger/logs.service.ts:14",{"_index":1656,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logger/logs.service.ts:8",{"_index":1653,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":2206,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/find",{"_index":1355,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["src/utils/dto/object",{"_index":1663,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["src/utils/dto/paginated",{"_index":1666,"title":{},"body":{"classes/PaginatedResultDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.dto.ts",{"_index":1673,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.dto.ts:15",{"_index":1674,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/utils/dto/pagination.dto.ts:9",{"_index":1675,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/utils/exceptions",{"_index":1196,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["src/utils/exclude",{"_index":1206,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/get",{"_index":2208,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logs.middleware.ts",{"_index":1635,"title":{},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["src/utils/logs.middleware.ts:6",{"_index":1640,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/logs.middleware.ts:8",{"_index":1638,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/mocks/config.service.ts",{"_index":2211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mocks/jwt.service.ts",{"_index":2213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/recursively",{"_index":2215,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stack",{"_index":793,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staging",{"_index":1181,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["standard",{"_index":2301,"title":{},"body":{"index.html":{}}}],["start",{"_index":2305,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2372,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2373,"title":{},"body":{"index.html":{}}}],["started",{"_index":2293,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2297,"title":{},"body":{"index.html":{}}}],["statements",{"_index":2186,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1931,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["statuscode",{"_index":1645,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["statusmessage",{"_index":1646,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["storage",{"_index":1486,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["store",{"_index":2038,"title":{},"body":{"entities/User.html":{}}}],["storing",{"_index":2043,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["strategy",{"_index":1509,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":843,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"injectables/FilesService.html":{},"controllers/LocalFilesController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["streamablefile",{"_index":839,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["streamablefile(file",{"_index":2140,"title":{},"body":{"controllers/UsersController.html":{}}}],["streamablefile(stream",{"_index":855,"title":{},"body":{"controllers/DatabaseFilesController.html":{},"controllers/LocalFilesController.html":{}}}],["street",{"_index":13,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["streetname",{"_index":2414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":18,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/FindProductQuery.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["stringifyparameters",{"_index":896,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stringifyparameters(parameters",{"_index":912,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["string})@apiokresponse({description",{"_index":2086,"title":{},"body":{"controllers/UsersController.html":{}}}],["strip",{"_index":1221,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["subject",{"_index":1015,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{}}}],["successfully",{"_index":2063,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully!'})@apinotfoundresponse({description",{"_index":2087,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully!'})@apiunauthorizedresponse({description",{"_index":2080,"title":{},"body":{"controllers/UsersController.html":{}}}],["super",{"_index":1511,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`category",{"_index":581,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["super(`file",{"_index":1230,"title":{},"body":{"classes/FileNotFoundException.html":{}}}],["super(`post",{"_index":1702,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["super(`product",{"_index":1793,"title":{},"body":{"classes/ProductNotFoundException.html":{}}}],["super(`user",{"_index":2047,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(context",{"_index":808,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.canactivate(context",{"_index":2419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super.catch(exception",{"_index":1205,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["super.debug.apply(this",{"_index":817,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":815,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":813,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.warn.apply(this",{"_index":816,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["superadmin",{"_index":2281,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["support",{"_index":2334,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supportemail",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["svg",{"_index":2382,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2253,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":2406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":1946,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["t",{"_index":1668,"title":{},"body":{"classes/PaginatedResultDto.html":{}}}],["table",{"_index":2218,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2217,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2131,"title":{},"body":{"controllers/UsersController.html":{}}}],["take",{"_index":1347,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"index.html":{}}}],["terminusmodule",{"_index":1495,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1182,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covlicense",{"_index":2378,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2377,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":1624,"title":{},"body":{"classes/LogInDto.html":{}}}],["tests",{"_index":2375,"title":{},"body":{"index.html":{}}}],["text",{"_index":1008,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":1613,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken",{"_index":1907,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":252,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":256,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authorizationservice.updatepermission",{"_index":412,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["this.authorizationservice.updaterole(userid",{"_index":410,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["this.categoriesservice.create(category",{"_index":502,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findall",{"_index":503,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findallwithdeleted",{"_index":504,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findone(+id",{"_index":506,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.remove(+id",{"_index":514,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.restoredeleted(+id",{"_index":518,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.update(+id",{"_index":510,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryrepository.create(createcategorydto",{"_index":545,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.find",{"_index":547,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":551,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.restore(id",{"_index":559,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(category",{"_index":546,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.softdelete(id",{"_index":556,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.update(id",{"_index":553,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.commandbus.execute",{"_index":1842,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.commandbus.execute(new",{"_index":661,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["this.commentsrepository.create",{"_index":707,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsrepository.findandcount",{"_index":1385,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["this.commentsrepository.save(newcomment",{"_index":708,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsservice.createcomment(comment",{"_index":629,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.getcomments(postid",{"_index":628,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.configservice.get",{"_index":1002,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('app.debugmode",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.env",{"_index":63,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.filedestination",{"_index":1925,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.configservice.get('app.port",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.supportemail",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app.url",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('aws.publicbucketname",{"_index":1304,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('email.from",{"_index":1014,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('google.auth.clientid",{"_index":1432,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('google.auth.clientsecret",{"_index":1434,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('jwt.accesstokenexpirationtime')}s",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.accesstokensecret",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.refreshtokenexpirationtime')}s",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.refreshtokensecret",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt.verificationtokensecret",{"_index":1001,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.databasefilesrepository.findone",{"_index":886,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["this.databasefilesservice.getfilebyid(id",{"_index":848,"title":{},"body":{"controllers/DatabaseFilesController.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":1491,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":968,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":966,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":971,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink(registrationdata",{"_index":247,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emailschedulingservice.cancelallscheduledemails",{"_index":1067,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":1065,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":1013,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["this.fileinterceptor",{"_index":1579,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["this.fileinterceptor.intercept(...args",{"_index":1582,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["this.getcookiesforuser(user",{"_index":1445,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.getuserdata(token",{"_index":1447,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(tokendata.token",{"_index":1406,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.handleregistereduser(user",{"_index":1450,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.healthcheckservice.check",{"_index":1470,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.sign(payload",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":1025,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.localfilesrepository.create(filedata",{"_index":1603,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesrepository.findone",{"_index":1605,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesrepository.save(newfile",{"_index":1604,"title":{},"body":{"injectables/LocalFilesService.html":{}}}],["this.localfilesservice.getfilebyid(id",{"_index":1552,"title":{},"body":{"controllers/LocalFilesController.html":{}}}],["this.logger.debug(message",{"_index":922,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error",{"_index":918,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(message",{"_index":1648,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.log",{"_index":916,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.log(message",{"_index":921,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logger.warn",{"_index":920,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.warn(message",{"_index":923,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1660,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1661,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":812,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":814,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":1477,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":1483,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.nodemailertransport",{"_index":1106,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":1117,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.oauthclient",{"_index":1435,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.gettokeninfo(token",{"_index":1452,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.setcredentials",{"_index":1439,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.postsrepository.create",{"_index":1774,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1778,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":1766,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":1767,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.query",{"_index":1769,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":1775,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1776,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(post",{"_index":1741,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(number(id",{"_index":1744,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallposts",{"_index":1735,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(number(id",{"_index":1737,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostswithparagraph(paragraph",{"_index":1739,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(number(id",{"_index":1742,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.privatefilesrepository.create",{"_index":1314,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.delete(fileid",{"_index":1322,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.findone",{"_index":1301,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.save(newfile",{"_index":1315,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.productsrepository.create",{"_index":760,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["this.productsrepository.delete(id",{"_index":947,"title":{},"body":{"classes/DeleteProductHandler.html":{}}}],["this.productsrepository.findandcount",{"_index":1345,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["this.productsrepository.findone",{"_index":943,"title":{},"body":{"classes/DeleteProductHandler.html":{},"classes/FindProductHandler.html":{},"classes/UpdateProductHandler.html":{}}}],["this.productsrepository.save(newproduct",{"_index":761,"title":{},"body":{"classes/CreateProductHandler.html":{}}}],["this.productsrepository.update(id",{"_index":1983,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["this.productsservice.create(createproductdto",{"_index":1811,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findall(ownerid",{"_index":1812,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findone(id",{"_index":1814,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.remove(id",{"_index":1818,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.update(id",{"_index":1815,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.publicfilesrepository.create",{"_index":1310,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.delete(fileid",{"_index":1319,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.findone",{"_index":1316,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.save(newfile",{"_index":1313,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.querybus.execute",{"_index":1844,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.querybus.execute(new",{"_index":659,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["this.registeruser(token",{"_index":1456,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.schedulerregistry.addcronjob",{"_index":1088,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.schedulerregistry.getcronjobs().foreach((job",{"_index":1091,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.sendverificationlink(user",{"_index":1023,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.stringifyparameters",{"_index":919,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stringifyparameters(parameters",{"_index":917,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret",{"_index":1896,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":1901,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream",{"_index":1899,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":1471,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":1527,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":1519,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.update(id",{"_index":433,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["this.usersservice.addavatar(request.user.id",{"_index":2153,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addavatarinpgsql",{"_index":2163,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addavatarusingamazons3",{"_index":2160,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addprivatefile",{"_index":2172,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.createwithgoogle(email",{"_index":1449,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.deleteavatar(request.user.id",{"_index":2157,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteprivatefile(request.user.id",{"_index":2174,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallprivatefiles(request.user.id",{"_index":2166,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":2126,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getavatar(userid",{"_index":2130,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":355,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getbyid(userid",{"_index":1019,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.getprivatefile",{"_index":2168,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":1024,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":262,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":1926,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.usersservice.turnofftwofactorauthentication(request.user.id",{"_index":1905,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":1904,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thresholdpercent",{"_index":1492,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":2343,"title":{},"body":{"index.html":{}}}],["throw",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/DatabaseFilesService.html":{},"classes/DeleteProductHandler.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalFilesService.html":{},"injectables/PostsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateProductHandler.html":{}}}],["thrown",{"_index":1204,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["time",{"_index":909,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["title",{"_index":722,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{}}}],["tofilestream",{"_index":1920,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":1929,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["token",{"_index":254,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TokenVerificationDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"index.html":{}}}],["token.strategy",{"_index":283,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":1502,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":1504,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":1506,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token=${token",{"_index":1007,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokendata",{"_index":1401,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenexpirederror",{"_index":1030,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokeninfo",{"_index":1451,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokeninfo.email",{"_index":1453,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokenpayload",{"_index":335,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenverificationdto",{"_index":1399,"title":{"classes/TokenVerificationDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["totalcount",{"_index":1348,"title":{},"body":{"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/PaginatedResultDto.html":{}}}],["transformer",{"_index":687,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/PaginationDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"injectables/CategoriesService.html":{},"classes/CreatePostDto.html":{},"controllers/DatabaseFilesController.html":{},"classes/EnvironmentVariables.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"entities/Product.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdatePermissionsDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["true})@exclude",{"_index":2009,"title":{},"body":{"entities/User.html":{}}}],["true})@isnotempty",{"_index":1964,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["true})@isoptional",{"_index":725,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@joincolumn",{"_index":2003,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["turnofftwofactorauthentication",{"_index":1876,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnofftwofactorauthentication(request",{"_index":1883,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication",{"_index":1877,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(request",{"_index":1887,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["two",{"_index":286,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"index.html":{}}}],["twofactorauthenticationcode",{"_index":1873,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":1870,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":276,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":2000,"title":{},"body":{"entities/User.html":{}}}],["twofactorauthenticationservice",{"_index":274,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":16,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCommand.html":{},"classes/CreateProductDto.html":{},"classes/CreateProductHandler.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"entities/DatabaseFile.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductCommand.html":{},"classes/DeleteProductHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/EnvironmentVariables.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FileNotFoundException.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindAllProductsQuery.html":{},"classes/FindOneParams.html":{},"classes/FindProductHandler.html":{},"classes/FindProductQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/LocalFile.html":{},"interfaces/LocalFileDto.html":{},"controllers/LocalFilesController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/LocalFilesService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"classes/ProductNotFoundException.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/TypeOrmConfig.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"classes/UpdateRoleDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isoptional",{"_index":1371,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{}}}],["typealiases",{"_index":2393,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1026,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["typeorm",{"_index":33,"title":{},"body":{"entities/Address.html":{},"injectables/AuthorizationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductHandler.html":{},"entities/DatabaseFile.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"classes/FindAllProductsHandler.html":{},"classes/FindProductHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/LocalFile.html":{},"injectables/LocalFilesService.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/PublicFile.html":{},"classes/UpdateProductHandler.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["typeorm.config.ts",{"_index":2318,"title":{},"body":{"index.html":{}}}],["typeorm_logging",{"_index":1145,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["typeorm_logging=true",{"_index":2345,"title":{},"body":{"index.html":{}}}],["typeorm_synchronize",{"_index":1146,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["typeormconfig",{"_index":124,"title":{"classes/TypeOrmConfig.html":{}},"body":{"modules/AppModule.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{}}}],["typeormconfig.getormconfig(configservice",{"_index":1950,"title":{},"body":{"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["typeormhealthindicator",{"_index":1467,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":889,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["typeormmodule",{"_index":416,"title":{},"body":{"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":524,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":642,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([databasefile",{"_index":863,"title":{},"body":{"modules/DatabaseFilesModule.html":{}}}],["typeormmodule.forfeature([localfile",{"_index":1588,"title":{},"body":{"modules/LocalFilesModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":1634,"title":{},"body":{"modules/LoggerModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1750,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1829,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":1264,"title":{},"body":{"modules/FilesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":420,"title":{},"body":{"modules/AuthorizationModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(typeormmoduleoptions",{"_index":927,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":1936,"title":{},"body":{"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["typeormmoduleoptions",{"_index":926,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/TypeOrmConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1978,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/book",{"_index":745,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["types/car",{"_index":747,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["types/nodemailer",{"_index":2230,"title":{},"body":{"dependencies.html":{}}}],["types/permission.type",{"_index":1966,"title":{},"body":{"classes/UpdatePermissionsDto.html":{}}}],["typescript",{"_index":2296,"title":{},"body":{"index.html":{}}}],["ui",{"_index":2254,"title":{},"body":{"dependencies.html":{}}}],["uint8array",{"_index":824,"title":{},"body":{"entities/DatabaseFile.html":{}}}],["unauthorized",{"_index":2143,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized.'})@useguards(jwtauthenticationguard",{"_index":2081,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized.'})@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":2065,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":937,"title":{},"body":{"classes/DeleteProductHandler.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateProductHandler.html":{}}}],["unauthorizedexception('wrong",{"_index":1902,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["undefined",{"_index":1253,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["undefined})@apiunauthorizedresponse({description",{"_index":2102,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":2035,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":2274,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":2374,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/DatabaseFilesController.html":{},"injectables/DatabaseFilesService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/LocalFilesController.html":{},"injectables/LocalFilesService.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":2392,"title":{},"body":{"properties.html":{}}}],["update",{"_index":457,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["update(@param",{"_index":509,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["update(id",{"_index":539,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["update(undefined",{"_index":477,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategory",{"_index":2270,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updatecategorydto",{"_index":478,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedcategory",{"_index":554,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":1777,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatedproduct",{"_index":1984,"title":{},"body":{"classes/UpdateProductHandler.html":{}}}],["updatepermission",{"_index":380,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{}}}],["updatepermission(id",{"_index":426,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["updatepermission(userid",{"_index":382,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["updatepermissionsdto",{"_index":383,"title":{"classes/UpdatePermissionsDto.html":{}},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"classes/UpdatePermissionsDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1710,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(id",{"_index":1762,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(undefined",{"_index":1724,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":1725,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateproduct",{"_index":2278,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updateproductcommand",{"_index":1839,"title":{"classes/UpdateProductCommand.html":{}},"body":{"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["updateproductcommand(id",{"_index":1847,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto",{"_index":1804,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproducthandler",{"_index":1826,"title":{"classes/UpdateProductHandler.html":{}},"body":{"modules/ProductsModule.html":{},"classes/UpdateProductHandler.html":{},"coverage.html":{}}}],["updaterole",{"_index":381,"title":{},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{}}}],["updaterole(id",{"_index":428,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["updaterole(userid",{"_index":386,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["updateroledto",{"_index":387,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/AuthorizationController.html":{},"injectables/AuthorizationService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1989,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["upload",{"_index":1249,"title":{},"body":{"classes/FileUploadMultipleDto.html":{},"injectables/FilesService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["upload.dto",{"_index":2120,"title":{},"body":{"controllers/UsersController.html":{}}}],["upload.dto.ts",{"_index":1241,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:6",{"_index":1246,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploaddatabasefilewithqueryrunner",{"_index":867,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["uploaddatabasefilewithqueryrunner(databuffer",{"_index":877,"title":{},"body":{"injectables/DatabaseFilesService.html":{}}}],["uploaded",{"_index":1281,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":2111,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadprivatefile",{"_index":1270,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadprivatefile(databuffer",{"_index":1290,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile",{"_index":1271,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile(databuffer",{"_index":1292,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult",{"_index":1309,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.key",{"_index":1311,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.location",{"_index":1312,"title":{},"body":{"injectables/FilesService.html":{}}}],["url",{"_index":1005,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"entities/PublicFile.html":{}}}],["use",{"_index":1473,"title":{},"body":{"controllers/HealthController.html":{},"injectables/LogsMiddleware.html":{},"entities/User.html":{},"index.html":{}}}],["use(request",{"_index":1636,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["useclass",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1484,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":293,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/TypeOrmConfig.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('logout')@httpcode(200",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwttwofactorguard",{"_index":1740,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(localauthenticationguard",{"_index":249,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(permissionguard(permission.createcategory",{"_index":499,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(permissionguard(permission.createproduct",{"_index":1810,"title":{},"body":{"controllers/ProductsController.html":{}}}],["useguards(permissionguard(permission.deletecategory",{"_index":512,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(permissionguard(permission.deleteproduct",{"_index":1816,"title":{},"body":{"controllers/ProductsController.html":{}}}],["useguards(permissionguard(permission.restorecategory",{"_index":516,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(permissionguard(permission.updatecategory",{"_index":508,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(roleguard(role.admin",{"_index":500,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useguards(roleguard(role.superadmin",{"_index":406,"title":{},"body":{"controllers/AuthorizationController.html":{}}}],["useinterceptors",{"_index":393,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/LocalFilesController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":405,"title":{},"body":{"controllers/AuthorizationController.html":{},"controllers/CategoriesController.html":{},"controllers/DatabaseFilesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/LocalFilesController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2159,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":15,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/AuthorizationService.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/FileResponseDto.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateProductCommand.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.address",{"_index":29,"title":{},"body":{"entities/Address.html":{}}}],["user.dto",{"_index":1991,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":764,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":767,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:16",{"_index":768,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":770,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":773,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1924,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user.entity",{"_index":34,"title":{},"body":{"entities/Address.html":{}}}],["user.id",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.interface",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["user.interface.ts",{"_index":1864,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user.isemailconfirmed",{"_index":1020,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.isregisteredwithgoogle",{"_index":1444,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.password",{"_index":357,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.twofactorauthenticationsecret",{"_index":1928,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user?.permissions.includes(permission",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user?.role",{"_index":2424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user@email.com",{"_index":2411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":1446,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userdata.name",{"_index":1448,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userid",{"_index":320,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/AuthorizationController.html":{},"injectables/EmailConfirmationService.html":{},"interfaces/TokenPayload.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{}}}],["userinfoclient",{"_index":1437,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinfoclient.get",{"_index":1442,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse",{"_index":1441,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse.data",{"_index":1443,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["username",{"_index":1941,"title":{},"body":{"classes/TypeOrmConfig.html":{}}}],["usernamefield",{"_index":1612,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernotfoundexception",{"_index":2044,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["users",{"_index":2050,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":2180,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":2112,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.services.ts",{"_index":2335,"title":{},"body":{"index.html":{}}}],["users/entities/user.entity",{"_index":595,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateProductCommand.html":{},"classes/DeleteProductCommand.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductCommand.html":{}}}],["users/users.module",{"_index":977,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["users/users.service",{"_index":998,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["userscontroller",{"_index":2048,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1503,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["usersmodule",{"_index":94,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":425,"title":{},"body":{"injectables/AuthorizationService.html":{}}}],["usersservice",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["user})@apinotfoundresponse({description",{"_index":2098,"title":{},"body":{"controllers/UsersController.html":{}}}],["utils/dto/find",{"_index":489,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["utils/dto/object",{"_index":689,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["utils/dto/paginated",{"_index":617,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["utils/dto/pagination.dto",{"_index":652,"title":{},"body":{"injectables/CommentsService.html":{},"classes/FindAllProductsQuery.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/GetProductDto.html":{},"injectables/ProductsService.html":{}}}],["utils/get",{"_index":804,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/FindAllProductsHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["utils/logs.middleware",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":1297,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["v4",{"_index":1296,"title":{},"body":{"injectables/FilesService.html":{}}}],["valid",{"_index":2096,"title":{},"body":{"controllers/UsersController.html":{}}}],["validate",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validate(config",{"_index":1185,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["validate(email",{"_index":1610,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1523,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(request",{"_index":1505,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validatedconfig",{"_index":1187,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validatenested",{"_index":688,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/PaginatedResultDto.html":{}}}],["validatenested()@type(undefined",{"_index":685,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["validatesync",{"_index":1179,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validatesync(validatedconfig",{"_index":1191,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validation",{"_index":2322,"title":{},"body":{"index.html":{}}}],["validationpipe",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":671,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/EnvironmentVariables.html":{},"classes/FileResponseDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetProductDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginatedResultDto.html":{},"classes/PaginationDto.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRoleDto.html":{},"dependencies.html":{}}}],["value",{"_index":319,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1223,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["values.ts",{"_index":2216,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["variable",{"_index":2194,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":54,"title":{"miscellaneous/variables.html":{}},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["verbose",{"_index":784,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":797,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verification",{"_index":1000,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["verification.dto",{"_index":1404,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["verification.dto.ts",{"_index":1868,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:6",{"_index":1869,"title":{},"body":{"classes/TokenVerificationDto.html":{}}}],["verificationtokenpayload",{"_index":999,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verifypassword",{"_index":306,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":325,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/FilesService.html":{},"properties.html":{}}}],["version_neutral",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["void",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailSchedulingService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/LogsMiddleware.html":{}}}],["w/\"file",{"_index":2132,"title":{},"body":{"controllers/UsersController.html":{}}}],["warn",{"_index":785,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["warn(message",{"_index":799,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["watch",{"_index":2371,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":1009,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["went",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["where.owner",{"_index":1342,"title":{},"body":{"classes/FindAllProductsHandler.html":{}}}],["where.post",{"_index":1383,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["withdeleted",{"_index":550,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["without",{"_index":2307,"title":{},"body":{"index.html":{}}}],["worrying",{"_index":2308,"title":{},"body":{"index.html":{}}}],["wrong",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["yes",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["zoom",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseFilesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LocalFilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                city\n                            \n                            \n                                    Public\n                                country\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                street\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Address {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public street: string;\n\n  @Column()\n  public city: string;\n\n  @Column()\n  public country: string;\n\n  @OneToOne(() => User, (user: User) => user.address)\n  public user?: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, VERSION_NEUTRAL } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller({\n  version: VERSION_NEUTRAL,\n})\nexport class AppController {\n  constructor(private configService: ConfigService) {}\n\n  @Get()\n  getHello(): string {\n    // * config variables\n    const port = this.configService.get('app.port');\n    const appUrl = this.configService.get('app.url');\n    const supportEmail = this.configService.get('app.supportEmail');\n    const appEnv = this.configService.get('app.env');\n    const debugMode = this.configService.get('app.debugMode');\n\n    const debugEnabled = debugMode ? 'yes' : 'no';\n\n    return (\n      '' +\n      (appUrl +\n        ':' +\n        port +\n        ' | ' +\n        supportEmail +\n        ' >> ' +\n        appEnv +\n        ' environment in debug mode: ' +\n        debugEnabled) +\n      ''\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthorizationModule\n\nAuthorizationModule\n\nAppModule -->\n\nAuthorizationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\nAppModule -->\n\nDatabaseFilesModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nAppModule -->\n\nLocalFilesModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            AuthorizationModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            DatabaseFilesModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            GoogleAuthenticationModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LocalFilesModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  MiddlewareConsumer,\n  Module,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { DatabaseModule } from './database/database.module';\nimport { validate } from './env.validation';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { UsersModule } from './features/users/users.module';\nimport { PostsModule } from './features/posts/posts.module';\nimport { CategoriesModule } from './features/categories/categories.module';\nimport { FilesModule } from './features/files/files.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport typeormConfig from './config/typeorm.config';\nimport awsConfig from './config/aws.config';\nimport jwtConfig from './config/jwt.config';\nimport emailConfig from './config/email.config';\nimport googleConfig from './config/google.config';\nimport { APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\nimport { CommentsModule } from './features/comments/comments.module';\nimport { ProductsModule } from './features/products/products.module';\nimport { DatabaseFilesModule } from './features/database-files/database-files.module';\nimport { LocalFilesModule } from './features/local-files/local-files.module';\nimport { LoggerModule } from './logger/logger.module';\nimport { LogsMiddleware } from './utils/logs.middleware';\nimport { HealthModule } from './health/health.module';\nimport { EmailModule } from './email/email.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { EmailSchedulingModule } from './features/email-scheduling/email-scheduling.module';\nimport { EmailConfirmationModule } from './features/email-confirmation/email-confirmation.module';\nimport { GoogleAuthenticationModule } from './features/google-authentication/google-authentication.module';\nimport { AuthorizationModule } from './authorization/authorization.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      cache: true,\n      expandVariables: true,\n      validate,\n      load: [\n        appConfig,\n        databaseConfig,\n        typeormConfig,\n        awsConfig,\n        jwtConfig,\n        emailConfig,\n        googleConfig,\n      ],\n    }),\n    ScheduleModule.forRoot(),\n    DatabaseModule,\n    AuthenticationModule,\n    UsersModule,\n    PostsModule,\n    CategoriesModule,\n    FilesModule,\n    CommentsModule,\n    ProductsModule,\n    DatabaseFilesModule,\n    LocalFilesModule,\n    LoggerModule,\n    HealthModule,\n    EmailModule,\n    EmailSchedulingModule,\n    EmailConfirmationModule,\n    GoogleAuthenticationModule,\n    AuthorizationModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_PIPE,\n      useClass: ValidationPipe,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    },\n    // {\n    //   provide: APP_FILTER,\n    //   useClass: ExceptionsLoggerFilter,\n    // },\n    // {\n    //   provide: APP_INTERCEPTOR,\n    //   useClass: ExcludeNullInterceptor,\n    // },\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogsMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('login')@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('logout')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { EmailConfirmationService } from '../features/email-confirmation/email-confirmation.service';\nimport { UsersService } from '../features/users/users.service';\nimport { AuthenticationService } from './authentication.service';\nimport { LogInDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthenticationGuard } from './jwt-authentication.guard';\nimport { JwtRefreshGuard } from './jwt-refresh.guard';\nimport { LocalAuthenticationGuard } from './local-authentication.guard';\nimport { RequestWithUser } from './request-with-user.interface';\n\n@Controller('authentication')\n@ApiTags('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    return user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailConfirmationService.sendVerificationLink(registrationData);\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('login')\n  @ApiBody({ type: LogInDto })\n  async login(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return;\n    }\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('logout')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { EmailConfirmationModule } from '../features/email-confirmation/email-confirmation.module';\nimport { UsersModule } from '../features/users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { JwtRefreshTokenStrategy } from './jwt-refresh-token.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtTwoFactorStrategy } from './two-factor/jwt-two-factor.strategy';\nimport { TwoFactorAuthenticationController } from './two-factor/two-factor-authentication.controller';\nimport { TwoFactorAuthenticationService } from './two-factor/two-factor-authentication.service';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (ConfigService: ConfigService) => ({\n        secret: ConfigService.get('jwt.accessTokenSecret'),\n        signOptions: {\n          expiresIn: `${ConfigService.get('jwt.accessTokenExpirationTime')}s`,\n        },\n      }),\n    }),\n    EmailConfirmationModule,\n  ],\n  providers: [\n    AuthenticationService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshTokenStrategy,\n    TwoFactorAuthenticationService,\n    JwtTwoFactorStrategy,\n  ],\n  controllers: [AuthenticationController, TwoFactorAuthenticationController],\n  exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../features/users/users.service';\nimport * as bcrypt from 'bcrypt';\nimport { PostgresErrorCode } from '../database/postgres-error-codes.enum';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      return createdUser;\n    } catch (error: any) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtAccessToken(\n    userId: number,\n    isSecondFactorAuthenticated = false,\n  ) {\n    const payload: TokenPayload = { userId, isSecondFactorAuthenticated };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('jwt.accessTokenSecret'),\n      expiresIn: `${this.configService.get('jwt.accessTokenExpirationTime')}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'jwt.accessTokenExpirationTime',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('jwt.refreshTokenSecret'),\n      expiresIn: `${this.configService.get('jwt.refreshTokenExpirationTime')}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'jwt.refreshTokenExpirationTime',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizationController.html":{"url":"controllers/AuthorizationController.html","title":"controller - AuthorizationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization/authorization.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authorization\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                updatePermission\n                            \n                            \n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        updatePermission\n                        \n                    \n                \n            \n            \n                \nupdatePermission(userId: number, updatePermissionsDto: UpdatePermissionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':userId/permissions')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/authorization/authorization.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionsDto\n                                    \n                                                UpdatePermissionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRole\n                        \n                    \n                \n            \n            \n                \nupdateRole(userId: number, updateRoleDto: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':userId/role')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/authorization/authorization.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  HttpCode,\n  Param,\n  ParseIntPipe,\n  Patch,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthorizationService } from './authorization.service';\nimport { UpdatePermissionsDto } from './dto/update-permissions.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { Role } from './role.enum';\nimport { RoleGuard } from './role.guard';\n\n@Controller('authorization')\n@ApiTags('authorization')\n@UseInterceptors(ClassSerializerInterceptor)\n@UseGuards(RoleGuard(Role.SuperAdmin))\nexport class AuthorizationController {\n  constructor(private readonly authorizationService: AuthorizationService) {}\n\n  @Patch(':userId/role')\n  @HttpCode(204)\n  updateRole(\n    @Param('userId', ParseIntPipe) userId: number,\n    @Body() updateRoleDto: UpdateRoleDto,\n  ) {\n    return this.authorizationService.updateRole(userId, updateRoleDto);\n  }\n\n  @Patch(':userId/permissions')\n  @HttpCode(204)\n  updatePermission(\n    @Param('userId', ParseIntPipe) userId: number,\n    @Body() updatePermissionsDto: UpdatePermissionsDto,\n  ) {\n    return this.authorizationService.updatePermission(\n      userId,\n      updatePermissionsDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthorizationModule.html":{"url":"modules/AuthorizationModule.html","title":"module - AuthorizationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthorizationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthorizationModule\n\n\n\ncluster_AuthorizationModule_providers\n\n\n\n\nAuthorizationService\n\nAuthorizationService\n\n\n\nAuthorizationModule\n\nAuthorizationModule\n\nAuthorizationModule -->\n\nAuthorizationService->AuthorizationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authorization/authorization.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthorizationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'src/features/users/entities/user.entity';\nimport { AuthorizationController } from './authorization.controller';\nimport { AuthorizationService } from './authorization.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [AuthorizationController],\n  providers: [AuthorizationService],\n})\nexport class AuthorizationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizationService.html":{"url":"injectables/AuthorizationService.html","title":"injectable - AuthorizationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization/authorization.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                updatePermission\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/authorization/authorization.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePermission\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePermission(id: number, updatePermissionsDto: UpdatePermissionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization/authorization.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionsDto\n                                    \n                                                UpdatePermissionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, updateRoleDto: UpdateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authorization/authorization.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../features/users/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { UpdatePermissionsDto } from './dto/update-permissions.dto';\n\n@Injectable()\nexport class AuthorizationService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async updateRole(id: number, updateRoleDto: UpdateRoleDto) {\n    await this.usersRepository.update(id, updateRoleDto);\n  }\n\n  async updatePermission(\n    id: number,\n    updatePermissionsDto: UpdatePermissionsDto,\n  ) {\n    await this.usersRepository.update(id, updatePermissionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookProperties.html":{"url":"interfaces/BookProperties.html","title":"interface - BookProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/types/book-properties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authors\n                                        \n                                \n                                \n                                        \n                                            publicationYear\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicationYear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicationYear:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookProperties {\n  authors: string[];\n  publicationYear: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarProperties.html":{"url":"interfaces/CarProperties.html","title":"interface - CarProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/types/car-properties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brand\n                                        \n                                \n                                \n                                        \n                                            engine\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brand\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brand:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        engine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        engine:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CarProperties {\n  brand: string;\n  engine: {\n    fuel: string;\n    numberOfCylinders: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllWithDeleted\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                restoreDeleted\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(category: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllWithDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllWithDeleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/with-deleted')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restoreDeleted\n                        \n                    \n                \n            \n            \n                \nrestoreDeleted(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/restore')@UseGuards(undefined)@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(undefined: FindOneParams, category: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(undefined)@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/categories/categories.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { PermissionGuard } from '../../authorization/permission.guard';\nimport { Permission } from '../../authorization/types/permission.type';\nimport { Role } from '../../authorization/role.enum';\nimport { RoleGuard } from '../../authorization/role.guard';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport { CategoriesService } from './categories.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('categories')\n@ApiTags('categories')\n@ApiExtraModels(FindOneParams)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  @Post()\n  @UseGuards(PermissionGuard(Permission.CreateCategory))\n  @UseGuards(RoleGuard(Role.Admin))\n  create(@Body() category: CreateCategoryDto) {\n    return this.categoriesService.create(category);\n  }\n\n  @Get()\n  findAll() {\n    return this.categoriesService.findAll();\n  }\n\n  @Get('/with-deleted')\n  findAllWithDeleted() {\n    return this.categoriesService.findAllWithDeleted();\n  }\n\n  @Get(':id')\n  findOne(@Param() { id }: FindOneParams) {\n    return this.categoriesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  @UseGuards(PermissionGuard(Permission.UpdateCategory))\n  @UseGuards(RoleGuard(Role.Admin))\n  update(@Param() { id }: FindOneParams, @Body() category: UpdateCategoryDto) {\n    return this.categoriesService.update(+id, category);\n  }\n\n  @Delete(':id')\n  @UseGuards(PermissionGuard(Permission.DeleteCategory))\n  @UseGuards(RoleGuard(Role.Admin))\n  remove(@Param() { id }: FindOneParams) {\n    return this.categoriesService.remove(+id);\n  }\n\n  @Post(':id/restore')\n  @UseGuards(PermissionGuard(Permission.RestoreCategory))\n  @UseGuards(RoleGuard(Role.Admin))\n  restoreDeleted(@Param() { id }: FindOneParams) {\n    return this.categoriesService.restoreDeleted(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CategoriesController } from './categories.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from './entities/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllWithDeleted\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                restoreDeleted\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/categories/categories.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllWithDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllWithDeleted()\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        restoreDeleted\n                        \n                    \n                \n            \n            \n                \n                    \n                    restoreDeleted(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, category: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/categories/categories.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\nimport { CategoryNotFoundException } from './exceptions/category-not-found.exception';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto) {\n    const category = await this.categoryRepository.create(createCategoryDto);\n    await this.categoryRepository.save(category);\n    return category;\n  }\n\n  findAll() {\n    return this.categoryRepository.find({\n      relations: ['posts'],\n    });\n  }\n\n  findAllWithDeleted() {\n    return this.categoryRepository.find({\n      relations: ['posts'],\n      withDeleted: true,\n    });\n  }\n\n  async findOne(id: number) {\n    const category = await this.categoryRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['posts'],\n    });\n    if (category) {\n      return category;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async update(id: number, category: UpdateCategoryDto) {\n    await this.categoryRepository.update(id, category);\n    const updatedCategory = await this.categoryRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['posts'],\n    });\n    if (updatedCategory) {\n      return updatedCategory;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.categoryRepository.softDelete(id);\n    if (!deleteResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n\n  async restoreDeleted(id: number) {\n    const restoreResponse = await this.categoryRepository.restore(id);\n    if (!restoreResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deletedAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.categories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/entities/category.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from '../../posts/entities/post.entity';\nimport {\n  Column,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Category {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories)\n  public posts: Post[];\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/exceptions/category-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/categories/exceptions/category-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class CategoryNotFoundException extends NotFoundException {\n  constructor(categoryId: number) {\n    super(`Category with id ${categoryId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/entities/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from '../../posts/entities/post.entity';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class Comment {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => Post, (post: Post) => post.comments)\n  public post: Post;\n\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/comments/comments.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(undefined: GetCommentsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/comments/comments.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { CommentsService } from './comments.service';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { GetCommentsDto } from './dto/get-comments.dto';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { Comment } from './entities/comment.entity';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\n\n@Controller('comments')\n@ApiTags('comments')\n@ApiExtraModels(PaginatedResultDto)\n@UseGuards(JwtAuthenticationGuard)\nexport class CommentsController {\n  constructor(private readonly commentsService: CommentsService) {}\n\n  @Get()\n  async getComments(\n    @Query() { postId, page = 1, limit = 20 }: GetCommentsDto,\n  ): Promise> {\n    return this.commentsService.getComments(postId, { page, limit });\n  }\n\n  @Post()\n  async createComment(\n    @Body() comment: CreateCommentDto,\n    @Req() request: RequestWithUser,\n  ) {\n    const user = request.user;\n    return this.commentsService.createComment(comment, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\n\nCommentsService\n\nCommentsService\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CreateCommentHandler } from './commands/handlers/create-comment.handler';\nimport { CommentsController } from './comments.controller';\nimport { CommentsService } from './comments.service';\nimport { Comment } from './entities/comment.entity';\nimport { GetCommentsHandler } from './queries/handlers/get-comments.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment]), CqrsModule],\n  controllers: [CommentsController],\n  providers: [CommentsService, CreateCommentHandler, GetCommentsHandler],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/comments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commandBus: CommandBus, queryBus: QueryBus)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/comments.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commandBus\n                                                  \n                                                        \n                                                                    CommandBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBus\n                                                  \n                                                        \n                                                                    QueryBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, author: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/comments.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(postId: number, paginationDto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/comments.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paginationDto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { PaginationDto } from '../../utils/dto/pagination.dto';\nimport { User } from '../users/entities/user.entity';\nimport { CreateCommentCommand } from './commands/implementations/create-comment.command';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { GetCommentsQuery } from './queries/implementations/get-comments.query';\nimport { Comment } from './entities/comment.entity';\n\n@Injectable()\nexport class CommentsService {\n  constructor(private commandBus: CommandBus, private queryBus: QueryBus) {}\n\n  async getComments(\n    postId: number,\n    paginationDto: PaginationDto,\n  ): Promise> {\n    return this.queryBus.execute(new GetCommentsQuery(postId, paginationDto));\n  }\n\n  async createComment(comment: CreateCommentDto, author: User) {\n    return this.commandBus.execute(new CreateCommentCommand(comment, author));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-confirmation/dto/confirm-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-confirmation/dto/confirm-email.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/create-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentCommand.html":{"url":"classes/CreateCommentCommand.html","title":"class - CreateCommentCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/commands/implementations/create-comment.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                author\n                            \n                            \n                                    Public\n                                    Readonly\n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(comment: CreateCommentDto, author: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        comment\n                                                  \n                                                        \n                                                                        CreateCommentDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        author\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateCommentDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/commands/implementations/create-comment.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { CreateCommentDto } from '../../dto/create-comment.dto';\n\nexport class CreateCommentCommand {\n  constructor(\n    public readonly comment: CreateCommentDto,\n    public readonly author: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/create-comment.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ObjectWithIdDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/create-comment.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { ObjectWithIdDto } from '../../../utils/dto/object-with-id.dto';\nexport class CreateCommentDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithIdDto)\n  post: ObjectWithIdDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentHandler.html":{"url":"classes/CreateCommentHandler.html","title":"class - CreateCommentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/commands/handlers/create-comment.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/commands/handlers/create-comment.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateCommentCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/commands/handlers/create-comment.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateCommentCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCommentCommand } from '../implementations/create-comment.command';\nimport { Comment } from '../../entities/comment.entity';\n\n@CommandHandler(CreateCommentCommand)\nexport class CreateCommentHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Comment) private commentsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateCommentCommand): Promise {\n    const { comment, author } = command;\n    const newComment = await this.commentsRepository.create({\n      ...comment,\n      author,\n    });\n    await this.commentsRepository.save(newComment);\n    return newComment;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/dto/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                level\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class CreateLogDto {\n  @IsString()\n  context: string;\n\n  @IsString()\n  message: string;\n\n  @IsString()\n  level: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/create-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\nexport class CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString({ each: true })\n  @IsOptional()\n  paragraphs: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductCommand.html":{"url":"classes/CreateProductCommand.html","title":"class - CreateProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/create-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                product\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(product: CreateProductDto, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        product\n                                                  \n                                                        \n                                                                        CreateProductDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateProductDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/create-product.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { CreateProductDto } from '../../dto/create-product.dto';\n\nexport class CreateProductCommand {\n  constructor(\n    public readonly product: CreateProductDto,\n    public readonly owner: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/create-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/create-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { BookProperties } from '../types/book-properties.interface';\nimport { CarProperties } from '../types/car-properties.interface';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsOptional()\n  properties?: CarProperties | BookProperties;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductHandler.html":{"url":"classes/CreateProductHandler.html","title":"class - CreateProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/create-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/create-product.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/create-product.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { CreateProductCommand } from '../implementations/create-product.command';\n\n@CommandHandler(CreateProductCommand)\nexport class CreateProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateProductCommand): Promise {\n    const { product, owner } = command;\n    const newProduct = await this.productsRepository.create({\n      ...product,\n      owner,\n    });\n    await this.productsRepository.save(newProduct);\n    return newProduct;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n  IsOptional,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/custom-logger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, context?: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogsService\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/custom-logger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from '@nestjs/common';\nimport { ConsoleLoggerOptions } from '@nestjs/common/services/console-logger.service';\nimport { ConfigService } from '@nestjs/config';\nimport { getLogLevels } from '../utils/get-log-levels';\nimport { LogsService } from './logs.service';\n\n@Injectable()\nexport class CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogsService;\n\n  constructor(\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogsService,\n  ) {\n    const environment = configService.get('NODE_ENV');\n\n    super(context, {\n      ...options,\n      logLevels: getLogLevels(environment === 'production'),\n    });\n\n    this.logsService = logsService;\n  }\n\n  log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'log',\n    });\n  }\n\n  error(message: string, context?: string, stack?: string) {\n    super.error.apply(this, [message, context, stack]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n\n  verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DatabaseFile.html":{"url":"entities/DatabaseFile.html","title":"entity - DatabaseFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DatabaseFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/entities/database-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                filename\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Uint8Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'bytea'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/database-files/entities/database-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class DatabaseFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public filename: string;\n\n  @Column({\n    type: 'bytea',\n  })\n  public data: Uint8Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DatabaseFilesController.html":{"url":"controllers/DatabaseFilesController.html","title":"controller - DatabaseFilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DatabaseFilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/database-files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                database-files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDatabaseFileById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatabaseFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatabaseFileById(id: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/database-files/database-files.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Res,\n  StreamableFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { DatabaseFilesService } from './database-files.service';\nimport { Readable } from 'stream';\nimport { Response } from 'express';\n\n@Controller('database-files')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class DatabaseFilesController {\n  constructor(private readonly databaseFilesService: DatabaseFilesService) {}\n\n  @Get(':id')\n  async getDatabaseFileById(\n    @Param('id', ParseIntPipe) id: number,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const file = await this.databaseFilesService.getFileById(id);\n\n    const stream = Readable.from(file.data);\n\n    response.set({\n      'Content-Disposition': `inline; filename=\"${file.filename}\"`,\n      'Content-Type': 'image',\n    });\n\n    return new StreamableFile(stream);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseFilesModule.html":{"url":"modules/DatabaseFilesModule.html","title":"module - DatabaseFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DatabaseFilesModule\n\n\n\ncluster_DatabaseFilesModule_providers\n\n\n\ncluster_DatabaseFilesModule_exports\n\n\n\n\nDatabaseFilesService \n\nDatabaseFilesService \n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\nDatabaseFilesService  -->\n\nDatabaseFilesModule->DatabaseFilesService \n\n\n\n\n\nDatabaseFilesService\n\nDatabaseFilesService\n\nDatabaseFilesModule -->\n\nDatabaseFilesService->DatabaseFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/database-files/database-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseFilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DatabaseFilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseFilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DatabaseFilesService } from './database-files.service';\nimport { DatabaseFile } from './entities/database-file.entity';\nimport { DatabaseFilesController } from './database-files.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DatabaseFile]), ConfigModule],\n  providers: [DatabaseFilesService],\n  exports: [DatabaseFilesService],\n  controllers: [DatabaseFilesController],\n})\nexport class DatabaseFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseFilesService.html":{"url":"injectables/DatabaseFilesService.html","title":"injectable - DatabaseFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/database-files/database-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFileWithQueryRunner\n                            \n                            \n                                    Async\n                                getFileById\n                            \n                            \n                                    Async\n                                uploadDatabaseFileWithQueryRunner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseFilesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/database-files/database-files.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileById(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadDatabaseFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadDatabaseFileWithQueryRunner(dataBuffer: Buffer, filename: string, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/database-files/database-files.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { DatabaseFile } from './entities/database-file.entity';\n\n@Injectable()\nexport class DatabaseFilesService {\n  constructor(\n    @InjectRepository(DatabaseFile)\n    private databaseFilesRepository: Repository,\n  ) {}\n\n  async uploadDatabaseFileWithQueryRunner(\n    dataBuffer: Buffer,\n    filename: string,\n    queryRunner: QueryRunner,\n  ) {\n    const newFile = await queryRunner.manager.create(DatabaseFile, {\n      filename,\n      data: dataBuffer,\n    });\n    await queryRunner.manager.save(DatabaseFile, newFile);\n    return newFile;\n  }\n\n  async deleteFileWithQueryRunner(fileId: number, queryRunner: QueryRunner) {\n    const deleteResponse = await queryRunner.manager.delete(\n      DatabaseFile,\n      fileId,\n    );\n    if (!deleteResponse.affected) {\n      throw new NotFoundException();\n    }\n  }\n\n  async getFileById(fileId: number) {\n    const file = await this.databaseFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n    });\n    if (!file) {\n      throw new NotFoundException();\n    }\n    return file;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLogger.html":{"url":"classes/DatabaseLogger.html","title":"class - DatabaseLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database-logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger('SQL')\n                    \n                \n                    \n                        \n                                Defined in src/database/database-logger.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from 'typeorm';\nimport { Logger as NestLogger } from '@nestjs/common';\n\nexport class DatabaseLogger implements TypeOrmLogger {\n  private readonly logger = new NestLogger('SQL');\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)}`,\n    );\n  }\n\n  logQueryError(\n    error: string,\n    query: string,\n    parameters?: unknown[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${error}`,\n    );\n  }\n\n  logQuerySlow(\n    time: number,\n    query: string,\n    parameters?: unknown[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.warn(\n      `Time: ${time} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${query}`,\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.log(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.log(message);\n  }\n\n  log(\n    level: 'log' | 'info' | 'warn',\n    message: string,\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    if (level === 'log') {\n      return this.logger.log(message);\n    }\n    if (level === 'info') {\n      return this.logger.debug(message);\n    }\n    if (level === 'warn') {\n      return this.logger.warn(message);\n    }\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return '';\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeormModuleOptions } from '../config/typeorm.config';\n\n@Module({\n  imports: [TypeOrmModule.forRootAsync(typeormModuleOptions)],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteProductCommand.html":{"url":"classes/DeleteProductCommand.html","title":"class - DeleteProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/delete-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/delete-product.command.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\n\nexport class DeleteProductCommand {\n  constructor(public readonly id: string, public readonly owner: User) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteProductHandler.html":{"url":"classes/DeleteProductHandler.html","title":"class - DeleteProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/delete-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/delete-product.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: DeleteProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/delete-product.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                DeleteProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { ProductNotFoundException } from '../../exceptions/file-not-found.exception';\nimport { DeleteProductCommand } from '../implementations/delete-product.command';\n\n@CommandHandler(DeleteProductCommand)\nexport class DeleteProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: DeleteProductCommand): Promise {\n    const { id, owner } = command;\n    const oldProduct = await this.productsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['owner'],\n    });\n    if (oldProduct) {\n      if (oldProduct.owner && oldProduct.owner.id === owner.id) {\n        const deleteResponse = await this.productsRepository.delete(id);\n        if (!deleteResponse.affected) {\n          throw new ProductNotFoundException(id);\n        }\n        return;\n      } else {\n        throw new UnauthorizedException();\n      }\n    }\n    throw new ProductNotFoundException(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-confirmation/email-confirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { ConfirmEmailDto } from './dto/confirm-email.dto';\nimport { EmailConfirmationService } from './email-confirmation.service';\n\n@Controller('email-confirmation')\n@ApiTags('authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailConfirmationController {\n  constructor(\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: ConfirmEmailDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      confirmationData.token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationModule.html":{"url":"modules/EmailConfirmationModule.html","title":"module - EmailConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/email-confirmation/email-confirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { EmailModule } from '../../email/email.module';\nimport { UsersModule } from '../users/users.module';\nimport { EmailConfirmationController } from './email-confirmation.controller';\nimport { EmailConfirmationService } from './email-confirmation.service';\n\n@Module({\n  imports: [ConfigModule, EmailModule, JwtModule.register({}), UsersModule],\n  controllers: [EmailConfirmationController],\n  providers: [EmailConfirmationService],\n  exports: [EmailConfirmationService],\n})\nexport class EmailConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-confirmation/email-confirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/features/email-confirmation/email-confirmation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(undefined: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-confirmation/email-confirmation.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { RegisterDto } from '../../authentication/dto/register.dto';\nimport { EmailService } from '../../email/email.service';\nimport { UsersService } from '../users/users.service';\nimport { VerificationTokenPayload } from './verification-token-payload.interface';\n\n@Injectable()\nexport class EmailConfirmationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  public sendVerificationLink({ email, name }: RegisterDto) {\n    const payload: VerificationTokenPayload = { email };\n\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('jwt.verificationTokenSecret'),\n      expiresIn: `${this.configService.get(\n        'jwt.verificationTokenExpirationTime',\n      )}s`,\n    });\n\n    const url = `${this.configService.get(\n      'email.confirmationLink',\n    )}?token=${token}`;\n\n    const text = `Welcome to the application. To confirm the email address, click here:${url}`;\n\n    return this.emailService.sendMail({\n      from: this.configService.get('email.from'),\n      to: email,\n      subject: 'Email confirmation',\n      html: `Hello ${name}!${text}`,\n    });\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.usersService.getById(userId);\n\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n\n    await this.sendVerificationLink(user);\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('jwt.verificationTokenSecret'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n\n      throw new BadRequestException();\n    } catch (error: any) {\n      if (error.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailService } from './email.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-scheduling/dto/email-schedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-scheduling/dto/email-schedule.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-scheduling/dto/email-schedule.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-scheduling/dto/email-schedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/email-scheduling/dto/email-schedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail()\n  recipient: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-scheduling/email-scheduling.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cancelScheduleEmail\n                            \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        cancelScheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelScheduleEmail()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule/cancel')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/email-scheduling/email-scheduling.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/email-scheduling/email-scheduling.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { EmailScheduleDto } from './dto/email-schedule.dto';\nimport { EmailSchedulingService } from './email-scheduling.service';\n\n@Controller('email-scheduling')\n@ApiTags('email-scheduling')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailSchedulingController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('schedule')\n  @UseGuards(JwtAuthenticationGuard)\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n\n  @Post('schedule/cancel')\n  @UseGuards(JwtAuthenticationGuard)\n  async cancelScheduleEmail() {\n    this.emailSchedulingService.cancelAllScheduledEmails();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/email-scheduling/email-scheduling.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailSchedulingService } from './email-scheduling.service';\nimport { EmailSchedulingController } from './email-scheduling.controller';\nimport { EmailModule } from '../../email/email.module';\n\n@Module({\n  imports: [EmailModule],\n  providers: [EmailSchedulingService],\n  controllers: [EmailSchedulingController],\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-scheduling/email-scheduling.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelAllScheduledEmails\n                            \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/features/email-scheduling/email-scheduling.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelAllScheduledEmails\n                        \n                    \n                \n            \n            \n                \ncancelAllScheduledEmails()\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-scheduling/email-scheduling.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/email-scheduling/email-scheduling.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { CronJob } from 'cron';\nimport { EmailService } from '../../email/email.service';\nimport { EmailScheduleDto } from './dto/email-schedule.dto';\n\n@Injectable()\nexport class EmailSchedulingService {\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly schedulerRegistry: SchedulerRegistry,\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    const date = new Date(emailSchedule.date);\n\n    const job = new CronJob(date, () => {\n      this.emailService.sendMail({\n        to: emailSchedule.recipient,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content,\n      });\n    });\n\n    this.schedulerRegistry.addCronJob(\n      `${Date.now()}-${emailSchedule.subject}`,\n      job,\n    );\n\n    job.start();\n  }\n\n  cancelAllScheduledEmails() {\n    this.schedulerRegistry.getCronJobs().forEach((job) => {\n      job.stop();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      host: configService.get('email.host'),\n      port: configService.get('email.port'),\n      secure: configService.get('email.secure'),\n      auth: {\n        user: configService.get('email.user'),\n        pass: configService.get('email.password'),\n      },\n      from: configService.get('email.from'),\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options, (err) => {\n      if (err) {\n        throw new InternalServerErrorException(\n          `Internal Mailer Failed Error - ${err.message}`,\n        );\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariables.html":{"url":"classes/EnvironmentVariables.html","title":"class - EnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/env.validation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                APP_DEBUG\n                            \n                            \n                                APP_ENV\n                            \n                            \n                                APP_URL\n                            \n                            \n                                DATABASE_HOST\n                            \n                            \n                                DATABASE_NAME\n                            \n                            \n                                DATABASE_PASSWORD\n                            \n                            \n                                DATABASE_PORT\n                            \n                            \n                                DATABASE_USER\n                            \n                            \n                                EMAIL_CONFIRMATION_URL\n                            \n                            \n                                EMAIL_HOST\n                            \n                            \n                                EMAIL_IS_SECURE\n                            \n                            \n                                EMAIL_PASSWORD\n                            \n                            \n                                EMAIL_PORT\n                            \n                            \n                                EMAIL_USER\n                            \n                            \n                                JWT_ACCESS_TOKEN_EXPIRATION_TIME\n                            \n                            \n                                JWT_ACCESS_TOKEN_SECRET\n                            \n                            \n                                JWT_REFRESH_TOKEN_EXPIRATION_TIME\n                            \n                            \n                                JWT_REFRESH_TOKEN_SECRET\n                            \n                            \n                                JWT_VERIFICATION_TOKEN_EXPIRATION_TIME\n                            \n                            \n                                JWT_VERIFICATION_TOKEN_SECRET\n                            \n                            \n                                PORT\n                            \n                            \n                                TYPEORM_LOGGING\n                            \n                            \n                                TYPEORM_SYNCHRONIZE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        APP_DEBUG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_CONFIRMATION_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_IS_SECURE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_ACCESS_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_ACCESS_TOKEN_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_REFRESH_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_REFRESH_TOKEN_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_VERIFICATION_TOKEN_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPEORM_LOGGING\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPEORM_SYNCHRONIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/env.validation.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { plainToClass } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  validateSync,\n} from 'class-validator';\n\nenum Environment {\n  Local = 'local',\n  Production = 'production',\n  Staging = 'staging',\n  Test = 'test',\n}\n\nclass EnvironmentVariables {\n  @IsEnum(Environment)\n  @IsNotEmpty()\n  APP_ENV: Environment;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  APP_DEBUG: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  APP_URL: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  PORT: number;\n\n  @IsString()\n  @IsNotEmpty()\n  JWT_ACCESS_TOKEN_SECRET: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  JWT_ACCESS_TOKEN_EXPIRATION_TIME: number;\n\n  @IsString()\n  @IsNotEmpty()\n  JWT_REFRESH_TOKEN_SECRET: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  JWT_REFRESH_TOKEN_EXPIRATION_TIME: number;\n\n  @IsString()\n  @IsNotEmpty()\n  JWT_VERIFICATION_TOKEN_SECRET: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: number;\n\n  @IsString()\n  @IsNotEmpty()\n  EMAIL_CONFIRMATION_URL: string;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_HOST: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  DATABASE_PORT: number;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_USER: string;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_PASSWORD: string;\n\n  @IsString()\n  @IsNotEmpty()\n  DATABASE_NAME: string;\n\n  @IsBoolean()\n  @IsOptional()\n  TYPEORM_SYNCHRONIZE: boolean;\n\n  @IsBoolean()\n  @IsOptional()\n  TYPEORM_LOGGING: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  EMAIL_HOST: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  EMAIL_PORT: number;\n\n  @IsBoolean()\n  @IsOptional()\n  EMAIL_IS_SECURE: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  EMAIL_USER: string;\n\n  @IsString()\n  @IsNotEmpty()\n  EMAIL_PASSWORD: string;\n}\n\nexport function validate(config: Record) {\n  const validatedConfig = plainToClass(EnvironmentVariables, config, {\n    enableImplicitConversion: true,\n  });\n  const errors = validateSync(validatedConfig, {\n    skipMissingProperties: false,\n  });\n\n  if (errors.length > 0) {\n    throw new Error(errors.toString());\n  }\n  return validatedConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsLoggerFilter.html":{"url":"classes/ExceptionsLoggerFilter.html","title":"class - ExceptionsLoggerFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsLoggerFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptions-logger.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exceptions-logger.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\n@Catch()\nexport class ExceptionsLoggerFilter extends BaseExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    console.log('Exception thrown', exception);\n    super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exclude-null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exclude-null.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { recursivelyStripNullValues } from './recursively-strip-null-values';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map((value) => recursivelyStripNullValues(value)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileNotFoundException.html":{"url":"classes/FileNotFoundException.html","title":"class - FileNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/exceptions/file-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/files/exceptions/file-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class FileNotFoundException extends NotFoundException {\n  constructor(fileId: number) {\n    super(`File with id ${fileId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto.html":{"url":"classes/FileResponseDto.html","title":"class - FileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-response.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber } from 'class-validator';\nimport { User } from '../entities/user.entity';\n\nexport class FileResponseDto {\n  @IsString()\n  public url: string;\n\n  @IsNumber()\n  public id: number;\n\n  @IsString()\n  public key: string;\n\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-upload.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Express } from 'express';\n\nexport class FileUploadDto {\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadMultipleDto.html":{"url":"classes/FileUploadMultipleDto.html","title":"class - FileUploadMultipleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadMultipleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/file-upload-multiple.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                files\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/dto/file-upload-multiple.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class FileUploadMultipleDto {\n  @ApiProperty({ type: 'array', items: { type: 'string', format: 'binary' } })\n  files: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PrivateFile } from './entities/private-file.entity';\nimport { PublicFile } from './entities/public-file.entity';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PublicFile, PrivateFile])],\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePrivateFile\n                            \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Public\n                                    Async\n                                generatePresignedUrl\n                            \n                            \n                                    Public\n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                uploadPrivateFile\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFilesRepository: Repository, privateFilesRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/features/files/files.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        privateFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePrivateFile(fileId: number, ownerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of the user who uploaded the file. A user with this id should exist on the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePresignedUrl(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        AWS object key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise with a url\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a file. A file with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise with the file and its information\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPrivateFile(dataBuffer: Buffer, ownerId: number, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file buffer of the uploaded content\n\n                                    \n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of the user who uploaded the file. A user with this id should exist on the database\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A file name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the public version of the uploaded file\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/files/files.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file buffer of the uploaded content\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A file name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the public version of the uploaded file\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { PublicFile } from './entities/public-file.entity';\nimport { PrivateFile } from './entities/private-file.entity';\nimport { S3 } from 'aws-sdk';\nimport { v4 as uuid } from 'uuid';\nimport { FileNotFoundException } from './exceptions/file-not-found.exception';\nimport internal from 'stream';\n\n@Injectable()\nexport class FilesService {\n  constructor(\n    @InjectRepository(PublicFile)\n    private publicFilesRepository: Repository,\n    @InjectRepository(PrivateFile)\n    private privateFilesRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   * @returns A promise with the file and its information\n   */\n  public async getPrivateFile(fileId: number): Promise {\n    const s3 = new S3();\n    const fileInfo = await this.privateFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n      relations: ['owner'],\n    });\n    if (fileInfo) {\n      const stream = await s3\n        .getObject({\n          Bucket: this.configService.get('aws.publicBucketName'),\n          Key: fileInfo.key,\n        })\n        .createReadStream();\n      return {\n        stream,\n        info: fileInfo,\n      };\n    }\n    throw new FileNotFoundException(fileId);\n  }\n\n  /**\n   * @param key AWS object key\n   * @returns A promise with a url\n   */\n  public async generatePresignedUrl(key: string): Promise {\n    const s3 = new S3();\n    return s3.getSignedUrlPromise('getObject', {\n      Bucket: this.configService.get('aws.publicBucketName'),\n      Key: key,\n    });\n  }\n\n  /**\n   * @param dataBuffer The file buffer of the uploaded content\n   * @param filename A file name\n   * @returns A promise with the public version of the uploaded file\n   */\n  async uploadPublicFile(\n    dataBuffer: Buffer,\n    filename: string,\n  ): Promise {\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${filename}`,\n      })\n      .promise();\n    const newFile = this.publicFilesRepository.create({\n      key: uploadResult.Key,\n      url: uploadResult.Location,\n    });\n    await this.publicFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  /**\n   * @param dataBuffer The file buffer of the uploaded content\n   * @param ownerId An id of the user who uploaded the file. A user with this id should exist on the database\n   * @param filename A file name\n   * @returns A promise with the public version of the uploaded file\n   */\n  async uploadPrivateFile(\n    dataBuffer: Buffer,\n    ownerId: number,\n    filename: string,\n  ): Promise {\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${filename}`,\n      })\n      .promise();\n    const newFile = this.privateFilesRepository.create({\n      key: uploadResult.Key,\n      owner: {\n        id: ownerId,\n      },\n    });\n    await this.privateFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   */\n  async deletePublicFile(fileId: number): Promise {\n    const s3 = new S3();\n    const file = await this.publicFilesRepository.findOne({\n      where: { id: fileId },\n    });\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('aws.publicBucketName'),\n        Key: file.key,\n      })\n      .promise();\n    await this.publicFilesRepository.delete(fileId);\n  }\n\n  /**\n   * @param fileId An id of a file. A file with this id should exist in the database\n   * @param ownerId An id of the user who uploaded the file. A user with this id should exist on the database\n   */\n  async deletePrivateFile(fileId: number, ownerId: number): Promise {\n    const s3 = new S3();\n    const file = await this.privateFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n      relations: ['owner'],\n    });\n    if (file) {\n      if (file.owner && file.owner.id === ownerId) {\n        await s3\n          .deleteObject({\n            Bucket: this.configService.get('aws.publicBucketName'),\n            Key: file.key,\n          })\n          .promise();\n        await this.privateFilesRepository.delete(fileId);\n      } else {\n        throw new UnauthorizedException();\n      }\n    } else {\n      throw new FileNotFoundException(fileId);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllProductsHandler.html":{"url":"classes/FindAllProductsHandler.html","title":"class - FindAllProductsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllProductsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/handlers/find-all-products.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/handlers/find-all-products.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(undefined: FindAllProductsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/queries/handlers/find-all-products.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindAllProductsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../../../utils/dto/paginated-result.dto';\nimport { Product } from '../../entities/product.entity';\nimport { FindAllProductsQuery } from '../implementations/find-all-products.query';\nimport { getPaginationProps } from '../../../../utils/get-pagination-props';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, Repository } from 'typeorm';\n\n@QueryHandler(FindAllProductsQuery)\nexport class FindAllProductsHandler\n  implements IQueryHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute({\n    ownerId,\n    paginationDto,\n  }: FindAllProductsQuery): Promise> {\n    const { page, limit, skippedItems } = getPaginationProps(paginationDto);\n\n    const where: FindManyOptions['where'] = {};\n    if (ownerId) {\n      where.owner = {\n        id: ownerId,\n      };\n    }\n\n    const [products, productsCount] =\n      await this.productsRepository.findAndCount({\n        where,\n        relations: ['owner'],\n        skip: skippedItems,\n        take: limit,\n      });\n\n    return {\n      totalCount: productsCount,\n      page: page,\n      limit: limit,\n      data: products,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllProductsQuery.html":{"url":"classes/FindAllProductsQuery.html","title":"class - FindAllProductsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllProductsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/implementations/find-all-products.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ownerId\n                            \n                            \n                                    Public\n                                    Readonly\n                                paginationDto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ownerId: number, paginationDto: PaginationDto)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ownerId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationDto\n                                                  \n                                                        \n                                                                        PaginationDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        paginationDto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-all-products.query.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationDto } from '../../../../utils/dto/pagination.dto';\n\nexport class FindAllProductsQuery {\n  constructor(\n    public readonly ownerId: number,\n    public readonly paginationDto: PaginationDto,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/find-one-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/find-one-params.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nexport class FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductHandler.html":{"url":"classes/FindProductHandler.html","title":"class - FindProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/handlers/find-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/handlers/find-product.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute(undefined: FindProductQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/queries/handlers/find-product.handler.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { Product } from '../../entities/product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindProductQuery } from '../implementations/find-product.query';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(FindProductQuery)\nexport class FindProductHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n  execute({ productId }: FindProductQuery): Promise {\n    return this.productsRepository.findOne({\n      where: {\n        id: productId,\n      },\n      relations: ['owner'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductQuery.html":{"url":"classes/FindProductQuery.html","title":"class - FindProductQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/queries/implementations/find-product.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                productId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productId: string)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/queries/implementations/find-product.query.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/queries/implementations/find-product.query.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class FindProductQuery {\n  constructor(public readonly productId: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsDto.html":{"url":"classes/GetCommentsDto.html","title":"class - GetCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/dto/get-comments.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                postId\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/comments/dto/get-comments.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional } from 'class-validator';\nimport { PaginationDto } from '../../../utils/dto/pagination.dto';\n\nexport class GetCommentsDto extends PaginationDto {\n  @Type(() => Number)\n  @IsOptional()\n  postId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsHandler.html":{"url":"classes/GetCommentsHandler.html","title":"class - GetCommentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/queries/handlers/get-comments.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/queries/handlers/get-comments.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(undefined: GetCommentsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/features/comments/queries/handlers/get-comments.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetCommentsQuery } from '../implementations/get-comments.query';\nimport { Comment } from '../../entities/comment.entity';\nimport { FindManyOptions, Repository } from 'typeorm';\nimport { PaginatedResultDto } from '../../../../utils/dto/paginated-result.dto';\nimport { getPaginationProps } from '../../../../utils/get-pagination-props';\n\n@QueryHandler(GetCommentsQuery)\nexport class GetCommentsHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Comment) private commentsRepository: Repository,\n  ) {}\n\n  async execute({\n    postId,\n    paginationDto,\n  }: GetCommentsQuery): Promise> {\n    const { page, limit, skippedItems } = getPaginationProps(paginationDto);\n\n    const where: FindManyOptions['where'] = {};\n    if (postId) {\n      where.post = {\n        id: postId,\n      };\n    }\n\n    const [comments, commentsCount] =\n      await this.commentsRepository.findAndCount({\n        where,\n        relations: ['author'],\n        skip: skippedItems,\n        take: limit,\n      });\n\n    return {\n      totalCount: commentsCount,\n      page: page,\n      limit: limit,\n      data: comments,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsQuery.html":{"url":"classes/GetCommentsQuery.html","title":"class - GetCommentsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/comments/queries/implementations/get-comments.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                paginationDto\n                            \n                            \n                                    Public\n                                    Readonly\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number, paginationDto: PaginationDto)\n                    \n                \n                        \n                            \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationDto\n                                                  \n                                                        \n                                                                        PaginationDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        paginationDto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/features/comments/queries/implementations/get-comments.query.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationDto } from '../../../../utils/dto/pagination.dto';\n\nexport class GetCommentsQuery {\n  constructor(\n    public readonly postId: number,\n    public readonly paginationDto: PaginationDto,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductDto.html":{"url":"classes/GetProductDto.html","title":"class - GetProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/get-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                ownerId\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/dto/get-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional } from 'class-validator';\nimport { PaginationDto } from '../../../utils/dto/pagination.dto';\n\nexport class GetProductDto extends PaginationDto {\n  @Type(() => Number)\n  @IsOptional()\n  ownerId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/google-authentication/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(tokenData: TokenVerificationDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                TokenVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  Req,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { GoogleAuthenticationService } from './google-authentication.service';\nimport { Request } from 'express';\nimport { TokenVerificationDto } from './dto/token-verification.dto';\n\n@Controller('google-authentication')\n@ApiTags('authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class GoogleAuthenticationController {\n  constructor(\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  async authenticate(\n    @Body() tokenData: TokenVerificationDto,\n    @Req() request: Request,\n  ) {\n    const { accessTokenCookie, refreshTokenCookie, user } =\n      await this.googleAuthenticationService.authenticate(tokenData.token);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthenticationModule.html":{"url":"modules/GoogleAuthenticationModule.html","title":"module - GoogleAuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_imports\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/google-authentication/google-authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthenticationModule } from '../../authentication/authentication.module';\nimport { UsersModule } from '../users/users.module';\nimport { GoogleAuthenticationController } from './google-authentication.controller';\nimport { GoogleAuthenticationService } from './google-authentication.service';\n\n@Module({\n  imports: [ConfigModule, UsersModule, AuthenticationModule],\n  controllers: [GoogleAuthenticationController],\n  providers: [GoogleAuthenticationService],\n})\nexport class GoogleAuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/google-authentication/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                getCookiesForUser\n                            \n                            \n                                    Async\n                                getUserData\n                            \n                            \n                                    Async\n                                handleRegisteredUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/features/google-authentication/google-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCookiesForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserData(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRegisteredUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(token: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/google-authentication/google-authentication.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth.OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/features/google-authentication/google-authentication.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Auth, google } from 'googleapis';\nimport { AuthenticationService } from '../../authentication/authentication.service';\nimport { User } from '../users/entities/user.entity';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class GoogleAuthenticationService {\n  oauthClient: Auth.OAuth2Client;\n\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n    private readonly authenticationService: AuthenticationService,\n  ) {\n    const clientID = this.configService.get('google.auth.clientId');\n    const clientSecret = this.configService.get('google.auth.clientSecret');\n\n    this.oauthClient = new google.auth.OAuth2(clientID, clientSecret);\n  }\n\n  async getUserData(token: string) {\n    const userInfoClient = google.oauth2('v2').userinfo;\n\n    this.oauthClient.setCredentials({\n      access_token: token,\n    });\n\n    const userInfoResponse = await userInfoClient.get({\n      auth: this.oauthClient,\n    });\n\n    return userInfoResponse.data;\n  }\n\n  async getCookiesForUser(user: User) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    return {\n      accessTokenCookie,\n      refreshTokenCookie,\n    };\n  }\n\n  async handleRegisteredUser(user: User) {\n    if (!user.isRegisteredWithGoogle) {\n      throw new UnauthorizedException();\n    }\n\n    const { accessTokenCookie, refreshTokenCookie } =\n      await this.getCookiesForUser(user);\n\n    return {\n      accessTokenCookie,\n      refreshTokenCookie,\n      user,\n    };\n  }\n\n  async registerUser(token: string, email: string) {\n    const userData = await this.getUserData(token);\n    const name = userData.name;\n\n    const user = await this.usersService.createWithGoogle(email, name);\n\n    return this.handleRegisteredUser(user);\n  }\n\n  async authenticate(token: string) {\n    const tokenInfo = await this.oauthClient.getTokenInfo(token);\n\n    const email = tokenInfo.email;\n\n    try {\n      const user = await this.usersService.getByEmail(email);\n\n      return this.handleRegisteredUser(user);\n    } catch (error: any) {\n      if (error.status !== 404) {\n        throw new error();\n      }\n\n      return this.registerUser(token, email);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  DiskHealthIndicator,\n  HealthCheck,\n  HealthCheckService,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n    private memoryHealthIndicator: MemoryHealthIndicator,\n    private diskHealthIndicator: DiskHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.healthCheckService.check([\n      () => this.typeOrmHealthIndicator.pingCheck('database'),\n      // the process should not use more than 300MB memory\n      () =>\n        this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n      // The process should not have more than 300MB RSS memory allocated\n      () =>\n        this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n      // the used disk storage should not exceed the 50% of the available space\n      () =>\n        this.diskHealthIndicator.checkStorage('disk health', {\n          thresholdPercent: 0.5,\n          path: '/',\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from '../features/users/users.service';\nimport { Request } from 'express';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.refreshTokenSecret'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from '../features/users/users.service';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.accessTokenSecret'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/two-factor/jwt-two-factor.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/jwt-two-factor.strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../features/users/users.service';\nimport { TokenPayload } from '../token-payload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('jwt.accessTokenSecret'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.userId);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isSecondFactorAuthenticated) {\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LocalFile.html":{"url":"entities/LocalFile.html","title":"entity - LocalFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LocalFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/entities/local-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filename\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                mimetype\n                            \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/local-files/entities/local-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class LocalFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  path: string;\n\n  @Column()\n  mimetype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalFileDto.html":{"url":"interfaces/LocalFileDto.html","title":"interface - LocalFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/dto/local-file.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LocalFileDto {\n  filename: string;\n  path: string;\n  mimetype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LocalFilesController.html":{"url":"controllers/LocalFilesController.html","title":"controller - LocalFilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LocalFilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                local-files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDatabaseFileById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatabaseFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatabaseFileById(id: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/local-files/local-files.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Res,\n  StreamableFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { createReadStream } from 'fs';\nimport { join } from 'path';\nimport { Response } from 'express';\nimport { LocalFilesService } from './local-files.service';\n\n@Controller('local-files')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class LocalFilesController {\n  constructor(private readonly localFilesService: LocalFilesService) {}\n\n  @Get(':id')\n  async getDatabaseFileById(\n    @Param('id', ParseIntPipe) id: number,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const file = await this.localFilesService.getFileById(id);\n\n    const stream = createReadStream(join(process.cwd(), file.path));\n\n    response.set({\n      'Content-Disposition': `inline; filename=\"${file.filename}\"`,\n      'Content-Type': file.mimetype,\n    });\n\n    return new StreamableFile(stream);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalFilesInterceptorOptions.html":{"url":"interfaces/LocalFilesInterceptorOptions.html","title":"interface - LocalFilesInterceptorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalFilesInterceptorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fieldName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fileFilter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limits\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileFilter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileFilter:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limits:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, mixin, NestInterceptor, Type } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { diskStorage } from 'multer';\n\ninterface LocalFilesInterceptorOptions {\n  fieldName: string;\n  path?: string;\n  fileFilter?: MulterOptions['fileFilter'];\n  limits?: MulterOptions['limits'];\n}\n\nexport function LocalFilesInterceptor(\n  options: LocalFilesInterceptorOptions,\n): Type {\n  @Injectable()\n  class Interceptor implements NestInterceptor {\n    fileInterceptor: NestInterceptor;\n\n    constructor(configService: ConfigService) {\n      const filesDestination = configService.get('app.fileDestination');\n\n      const destination = `${filesDestination}${options.path}`;\n\n      const multerOptions: MulterOptions = {\n        storage: diskStorage({\n          destination,\n        }),\n        fileFilter: options.fileFilter,\n        limits: options.limits,\n      };\n\n      this.fileInterceptor = new (FileInterceptor(\n        options.fieldName,\n        multerOptions,\n      ))();\n    }\n\n    intercept(...args: Parameters) {\n      return this.fileInterceptor.intercept(...args);\n    }\n  }\n\n  return mixin(Interceptor);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LocalFilesModule.html":{"url":"modules/LocalFilesModule.html","title":"module - LocalFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    LocalFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LocalFilesModule\n\n\n\ncluster_LocalFilesModule_exports\n\n\n\ncluster_LocalFilesModule_providers\n\n\n\n\nLocalFilesService \n\nLocalFilesService \n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nLocalFilesService  -->\n\nLocalFilesModule->LocalFilesService \n\n\n\n\n\nLocalFilesService\n\nLocalFilesService\n\nLocalFilesModule -->\n\nLocalFilesService->LocalFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/local-files/local-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalFilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LocalFilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LocalFilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LocalFile } from './entities/local-file.entity';\nimport { LocalFilesController } from './local-files.controller';\nimport { LocalFilesService } from './local-files.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LocalFile]), ConfigModule],\n  controllers: [LocalFilesController],\n  providers: [LocalFilesService],\n  exports: [LocalFilesService],\n})\nexport class LocalFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalFilesService.html":{"url":"injectables/LocalFilesService.html","title":"injectable - LocalFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/local-files/local-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteLocalFileWithQueryRunner\n                            \n                            \n                                    Async\n                                getFileById\n                            \n                            \n                                    Async\n                                saveLocalFileData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(localFilesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/local-files/local-files.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        localFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteLocalFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLocalFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileById(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveLocalFileData\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLocalFileData(fileData: LocalFileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/local-files/local-files.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileData\n                                    \n                                                LocalFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { LocalFileDto } from './dto/local-file.dto';\nimport { LocalFile } from './entities/local-file.entity';\n\n@Injectable()\nexport class LocalFilesService {\n  constructor(\n    @InjectRepository(LocalFile)\n    private localFilesRepository: Repository,\n  ) {}\n\n  async saveLocalFileData(fileData: LocalFileDto) {\n    const newFile = await this.localFilesRepository.create(fileData);\n    await this.localFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  async getFileById(fileId: number) {\n    const file = await this.localFilesRepository.findOne({\n      where: {\n        id: fileId,\n      },\n    });\n    if (!file) {\n      throw new NotFoundException();\n    }\n    return file;\n  }\n\n  async deleteLocalFileWithQueryRunner(\n    fileId: number,\n    queryRunner: QueryRunner,\n  ) {\n    await queryRunner.manager.delete(LocalFile, fileId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { User } from '../features/users/entities/user.entity';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Log.html":{"url":"entities/Log.html","title":"entity - Log","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/entities/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                creationDate\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Log {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  creationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({default: 'test@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)@ApiProperty({default: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  @ApiProperty({\n    default: 'test@example.com',\n  })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  @ApiProperty({\n    default: 'password',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CustomLogger } from './custom-logger';\nimport { Log } from './entities/log.entity';\nimport { LogsService } from './logs.service';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([Log])],\n  providers: [CustomLogger, LogsService],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsMiddleware.html":{"url":"injectables/LogsMiddleware.html","title":"injectable - LogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logs.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/logs.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/utils/logs.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LogsMiddleware implements NestMiddleware {\n  private readonly logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction) {\n    response.on('finish', () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(message);\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(message);\n      }\n\n      return this.logger.log(message);\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logs.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateLogDto } from './dto/create-log.dto';\nimport { Log } from './entities/log.entity';\n\n@Injectable()\nexport class LogsService {\n  constructor(\n    @InjectRepository(Log)\n    private logsRepository: Repository,\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = await this.logsRepository.create(log);\n    await this.logsRepository.save(newLog, {\n      data: {\n        isCreatingLogs: true,\n      },\n    });\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObjectWithIdDto.html":{"url":"classes/ObjectWithIdDto.html","title":"class - ObjectWithIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObjectWithIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/object-with-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/object-with-id.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nexport class ObjectWithIdDto {\n  @IsNumber()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedResultDto.html":{"url":"classes/PaginatedResultDto.html","title":"class - PaginatedResultDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedResultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/paginated-result.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                            \n                                totalCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/paginated-result.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, ValidateNested } from 'class-validator';\n\nexport class PaginatedResultDto {\n  @ValidateNested()\n  data: T[];\n\n  @IsNumber()\n  page: number;\n\n  @IsNumber()\n  limit: number;\n\n  @IsNumber()\n  totalCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsNumber, IsOptional, Min } from 'class-validator';\n\nexport class PaginationDto {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                paragraphs\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('post_authorId_index')@ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, category => category.posts)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/entities/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Category } from '../../categories/entities/category.entity';\nimport { User } from '../../users/entities/user.entity';\nimport { Comment } from '../../comments/entities/comment.entity';\nimport {\n  Column,\n  Entity,\n  Index,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public title: string;\n\n  @Column()\n  public content: string;\n\n  @Column('text', { array: true, nullable: true })\n  public paragraphs?: string[];\n\n  @Column({ nullable: true })\n  public category?: string;\n\n  @Index('post_authorId_index')\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n\n  @ManyToMany(() => Category, (category: Category) => category.posts)\n  @JoinTable()\n  public categories: Category[];\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.post)\n  public comments: Comment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/exceptions/post-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/posts/exceptions/post-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class PostNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Post with id ${postId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                getAllPosts\n                            \n                            \n                                getPostById\n                            \n                            \n                                getPostsWithParagraph\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \ngetAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostsWithParagraph\n                        \n                    \n                \n            \n            \n                \ngetPostsWithParagraph(paragraph: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('paragraphs/:paragraph')\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraph\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(undefined: FindOneParams, post: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/posts/posts.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtTwoFactorGuard } from '../../authentication/two-factor/jwt-two-factor.guard';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { PostsService } from './posts.service';\n\n@Controller('posts')\n@ApiTags('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get()\n  getAllPosts() {\n    return this.postsService.getAllPosts();\n  }\n\n  @Get(':id')\n  getPostById(@Param() { id }: FindOneParams) {\n    return this.postsService.getPostById(Number(id));\n  }\n\n  @Get('paragraphs/:paragraph')\n  getPostsWithParagraph(@Param() paragraph: string) {\n    return this.postsService.getPostsWithParagraph(paragraph);\n  }\n\n  @Post()\n  @UseGuards(JwtTwoFactorGuard)\n  async createPost(\n    @Body() post: CreatePostDto,\n    @Req() request: RequestWithUser,\n  ) {\n    return this.postsService.createPost(post, request.user);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtTwoFactorGuard)\n  async updatePost(\n    @Param() { id }: FindOneParams,\n    @Body() post: UpdatePostDto,\n  ) {\n    return this.postsService.updatePost(Number(id), post);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtTwoFactorGuard)\n  async deletePost(@Param() { id }: FindOneParams) {\n    return this.postsService.deletePost(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './entities/post.entity';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './posts.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post])],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostsWithParagraph\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/posts/posts.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts()\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithParagraph\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithParagraph(paragraph: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraph\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, post: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/posts/posts.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { Post } from './entities/post.entity';\nimport { PostNotFoundException } from './exceptions/post-not-found.exception';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post) private postsRepository: Repository,\n  ) {}\n\n  async getAllPosts() {\n    return this.postsRepository.find({\n      relations: ['author'],\n    });\n  }\n\n  async getPostById(id: number) {\n    const post = await this.postsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['author'],\n    });\n    if (post) {\n      return post;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async getPostsWithParagraph(paragraph: string) {\n    const posts = await this.postsRepository.query(\n      'SELECT * FROM post WHERE $1 = ANY(paragraphs)',\n      [paragraph],\n    );\n    if (posts) {\n      return posts;\n    }\n    throw new NotFoundException('Post with the paragraph is not found!');\n  }\n\n  async createPost(post: CreatePostDto, user: User) {\n    const newPost = await this.postsRepository.create({\n      ...post,\n      author: user,\n    });\n    await this.postsRepository.save(newPost);\n    return newPost;\n  }\n\n  async updatePost(id: number, post: UpdatePostDto) {\n    await this.postsRepository.update(id, post);\n    const updatedPost = await this.postsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['author'],\n    });\n    if (updatedPost) {\n      return updatedPost;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async deletePost(id: number) {\n    const deleteResponse = await this.postsRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new PostNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PrivateFile.html":{"url":"entities/PrivateFile.html","title":"entity - PrivateFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PrivateFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/entities/private-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.files)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/private-file.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class PrivateFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public key: string;\n\n  @ManyToOne(() => User, (owner: User) => owner.files)\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                owner\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.products)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/products/entities/product.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../users/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BookProperties } from '../types/book-properties.interface';\nimport { CarProperties } from '../types/car-properties.interface';\n\n@Entity()\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @Column()\n  public name: string;\n\n  @Column({\n    type: 'jsonb',\n    nullable: true,\n  })\n  public properties?: CarProperties | BookProperties;\n\n  @ManyToOne(() => User, (owner: User) => owner.products)\n  public owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/exceptions/file-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileId: string)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/exceptions/file-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class ProductNotFoundException extends NotFoundException {\n  constructor(fileId: string) {\n    super(`Product with id ${fileId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: GetProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/features/products/products.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n  Query,\n  HttpCode,\n} from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { GetProductDto } from './dto/get-product.dto';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { Product } from './entities/product.entity';\nimport { ApiExtraModels, ApiTags } from '@nestjs/swagger';\nimport { PermissionGuard } from '../../authorization/permission.guard';\nimport { Permission } from '../../authorization/types/permission.type';\n\n@Controller('products')\n@ApiTags('products')\n@ApiExtraModels(PaginatedResultDto)\n@UseGuards(JwtAuthenticationGuard)\nexport class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @Post()\n  @UseGuards(PermissionGuard(Permission.CreateProduct))\n  async create(\n    @Body() createProductDto: CreateProductDto,\n    @Req() request: RequestWithUser,\n  ): Promise {\n    const user = request.user;\n    return this.productsService.create(createProductDto, user);\n  }\n\n  @Get()\n  async findAll(\n    @Query() { ownerId, page = 1, limit = 20 }: GetProductDto,\n  ): Promise> {\n    return this.productsService.findAll(ownerId, { page, limit });\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise {\n    return this.productsService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n    @Req() request: RequestWithUser,\n  ) {\n    const user = request.user;\n    return this.productsService.update(id, updateProductDto, user);\n  }\n\n  @Delete(':id')\n  @UseGuards(PermissionGuard(Permission.DeleteProduct))\n  @HttpCode(204)\n  remove(@Param('id') id: string, @Req() request: RequestWithUser) {\n    const user = request.user;\n    return this.productsService.remove(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService\n\nProductsService\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { ProductsController } from './products.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './entities/product.entity';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { CreateProductHandler } from './commands/handlers/create-product.handler';\nimport { FindAllProductsHandler } from './queries/handlers/find-all-products.handler';\nimport { FindProductHandler } from './queries/handlers/find-product.handler';\nimport { UpdateProductHandler } from './commands/handlers/update-product.handler';\nimport { DeleteProductHandler } from './commands/handlers/delete-product.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), CqrsModule],\n  controllers: [ProductsController],\n  providers: [\n    ProductsService,\n    CreateProductHandler,\n    FindAllProductsHandler,\n    FindProductHandler,\n    UpdateProductHandler,\n    DeleteProductHandler,\n  ],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commandBus: CommandBus, queryBus: QueryBus)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/products.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commandBus\n                                                  \n                                                        \n                                                                    CommandBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBus\n                                                  \n                                                        \n                                                                    QueryBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(ownerId: number, paginationDto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paginationDto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto, owner: User)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/products.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { PaginatedResultDto } from '../../utils/dto/paginated-result.dto';\nimport { PaginationDto } from '../../utils/dto/pagination.dto';\nimport { User } from '../users/entities/user.entity';\nimport { CreateProductCommand } from './commands/implementations/create-product.command';\nimport { DeleteProductCommand } from './commands/implementations/delete-product.command';\nimport { UpdateProductCommand } from './commands/implementations/update-product.command';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { FindAllProductsQuery } from './queries/implementations/find-all-products.query';\nimport { FindProductQuery } from './queries/implementations/find-product.query';\n\n@Injectable()\nexport class ProductsService {\n  constructor(private commandBus: CommandBus, private queryBus: QueryBus) {}\n\n  async create(\n    createProductDto: CreateProductDto,\n    owner: User,\n  ): Promise {\n    return this.commandBus.execute(\n      new CreateProductCommand(createProductDto, owner),\n    );\n  }\n\n  async findAll(\n    ownerId: number,\n    paginationDto: PaginationDto,\n  ): Promise> {\n    return this.queryBus.execute(\n      new FindAllProductsQuery(ownerId, paginationDto),\n    );\n  }\n\n  async findOne(id: string): Promise {\n    return this.queryBus.execute(new FindProductQuery(id));\n  }\n\n  async update(id: string, updateProductDto: UpdateProductDto, owner: User) {\n    return this.commandBus.execute(\n      new UpdateProductCommand(id, updateProductDto, owner),\n    );\n  }\n\n  remove(id: string, owner: User) {\n    return this.commandBus.execute(new DeleteProductCommand(id, owner));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PublicFile.html":{"url":"entities/PublicFile.html","title":"entity - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/files/entities/public-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/files/entities/public-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class PublicFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public url: string;\n\n  @Column()\n  public key: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Has to match a regular expression: /^\\+[1-9]\\d{1,14}$/', example: '+123123123123'})@IsOptional()@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n  IsOptional,\n} from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @ApiProperty({\n    description: 'Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/',\n    example: '+123123123123',\n  })\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/request-with-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '../features/users/entities/user.entity';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n  isSecondFactorAuthenticated?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenVerificationDto.html":{"url":"classes/TokenVerificationDto.html","title":"class - TokenVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/google-authentication/dto/token-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/google-authentication/dto/token-verification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class TokenVerificationDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TwoFactorAuthenticationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthenticationCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/two-factor-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOffTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOffTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOffTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-off')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Res,\n  UseGuards,\n  Req,\n  Body,\n  UnauthorizedException,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { UsersService } from '../../features/users/users.service';\nimport { AuthenticationService } from '../authentication.service';\nimport { JwtAuthenticationGuard } from '../jwt-authentication.guard';\nimport { RequestWithUser } from '../request-with-user.interface';\nimport { TwoFactorAuthenticationCodeDto } from './dto/two-factor-authentication-code.dto';\nimport { TwoFactorAuthenticationService } from './two-factor-authentication.service';\n\n@Controller('2fa')\n@ApiTags('authentication-2fa')\nexport class TwoFactorAuthenticationController {\n  constructor(\n    private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly authenticationService: AuthenticationService,\n  ) {}\n\n  @Post('generate')\n  @UseGuards(JwtAuthenticationGuard)\n  async register(@Res() response: Response, @Req() request: RequestWithUser) {\n    const { otpauthUrl } =\n      await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(\n        request.user,\n      );\n\n    response.setHeader('content-type', 'image/png');\n\n    return this.twoFactorAuthenticationService.pipeQrCodeStream(\n      response,\n      otpauthUrl,\n    );\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOnTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('turn-off')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOffTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOffTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('authenticate')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async authenticate(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(\n        request.user.id,\n        true,\n      );\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/two-factor-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/two-factor/two-factor-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { authenticator } from 'otplib';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\nimport { User } from '../../features/users/entities/user.entity';\nimport { UsersService } from '../../features/users/users.service';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async generateTwoFactorAuthenticationSecret(user: User) {\n    const secret = authenticator.generateSecret();\n\n    const otpauthUrl = authenticator.keyuri(\n      user.email,\n      this.configService.get('app.fileDestination'),\n      secret,\n    );\n\n    await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n    return {\n      secret,\n      otpauthUrl,\n    };\n  }\n\n  public isTwoFactorAuthenticationCodeValid(\n    twoFactorAuthenticationCode: string,\n    user: User,\n  ) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret,\n    });\n  }\n\n  public async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    return toFileStream(stream, otpauthUrl);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmConfig.html":{"url":"classes/TypeOrmConfig.html","title":"class - TypeOrmConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/typeorm.config.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getOrmConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getOrmConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrmConfig(configService: ConfigService)\n                \n            \n\n\n            \n                \n                    Defined in src/config/typeorm.config.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configService\n                                    \n                                            ConfigService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService, registerAs } from '@nestjs/config';\nimport {\n  TypeOrmModuleAsyncOptions,\n  TypeOrmModuleOptions,\n} from '@nestjs/typeorm';\nimport { DatabaseLogger } from '../database/database-logger';\n\nclass TypeOrmConfig {\n  static getOrmConfig(configService: ConfigService): TypeOrmModuleOptions {\n    const options: TypeOrmModuleOptions = {\n      type: 'postgres',\n      host: configService.get('database.host'),\n      port: configService.get('database.port'),\n      username: configService.get('database.username'),\n      password: configService.get('database.password'),\n      database: configService.get('database.name'),\n      entities: ['dist/**/*.entity{.ts,.js}'],\n      synchronize: configService.get('typeorm.synchronize'),\n    };\n\n    const isLogging = configService.get('typeorm.logging') || false;\n    if (!isLogging) {\n      return options;\n    }\n\n    return {\n      ...options,\n      logger: new DatabaseLogger(),\n    };\n  }\n}\n\nexport const typeormModuleOptions: TypeOrmModuleAsyncOptions = {\n  imports: [ConfigModule],\n  useFactory: async (\n    configService: ConfigService,\n  ): Promise => TypeOrmConfig.getOrmConfig(configService),\n  inject: [ConfigService],\n};\n\nexport default registerAs('typeorm', () => ({\n  synchronize: process.env.TYPEORM_SYNCHRONIZE === 'false' ? false : true,\n  logging: process.env.TYPEORM_LOGGING === 'true' ? true : false,\n}));\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/update-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/categories/dto/update-category.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsOptional, IsString, IsNotEmpty } from 'class-validator';\n\nexport class UpdateCategoryDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePermissionsDto.html":{"url":"classes/UpdatePermissionsDto.html","title":"class - UpdatePermissionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePermissionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization/dto/update-permissions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Permission[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({isArray: true, enum: Permission})@IsEnum(Permission, {each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authorization/dto/update-permissions.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Permission } from '../types/permission.type';\n\nexport class UpdatePermissionsDto {\n  @ApiProperty({\n    isArray: true,\n    enum: Permission,\n  })\n  @IsEnum(Permission, { each: true })\n  @IsNotEmpty()\n  permissions: Permission[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/posts/dto/update-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsOptional, IsString, IsNotEmpty } from 'class-validator';\n\nexport class UpdatePostDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductCommand.html":{"url":"classes/UpdateProductCommand.html","title":"class - UpdateProductCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/implementations/update-product.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                product\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, product: UpdateProductDto, owner: User)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        product\n                                                  \n                                                        \n                                                                        UpdateProductDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UpdateProductDto\n\n                    \n                \n                    \n                        \n                                Defined in src/features/products/commands/implementations/update-product.command.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../../users/entities/user.entity';\nimport { UpdateProductDto } from '../../dto/update-product.dto';\n\nexport class UpdateProductCommand {\n  constructor(\n    public readonly id: string,\n    public readonly product: UpdateProductDto,\n    public readonly owner: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/dto/update-product.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateProductDto } from './create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductHandler.html":{"url":"classes/UpdateProductHandler.html","title":"class - UpdateProductHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/products/commands/handlers/update-product.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/features/products/commands/handlers/update-product.handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: UpdateProductCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/features/products/commands/handlers/update-product.handler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                UpdateProductCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entities/product.entity';\nimport { ProductNotFoundException } from '../../exceptions/file-not-found.exception';\nimport { UpdateProductCommand } from '../implementations/update-product.command';\n\n@CommandHandler(UpdateProductCommand)\nexport class UpdateProductHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Product) private productsRepository: Repository,\n  ) {}\n\n  async execute(command: UpdateProductCommand): Promise {\n    const { id, product, owner } = command;\n    const oldProduct = await this.productsRepository.findOne({\n      where: {\n        id,\n      },\n      relations: ['owner'],\n    });\n    if (oldProduct) {\n      if (oldProduct.owner && oldProduct.owner.id === owner.id) {\n        await this.productsRepository.update(id, product);\n        const updatedProduct = await this.productsRepository.findOne({\n          where: {\n            id,\n          },\n          relations: ['owner'],\n        });\n        if (updatedProduct) {\n          return updatedProduct;\n        }\n      } else {\n        throw new UnauthorizedException();\n      }\n    }\n    throw new ProductNotFoundException(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authorization/dto/update-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authorization/dto/update-role.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Role } from '../role.enum';\n\nexport class UpdateRoleDto {\n  @IsEnum(Role)\n  @IsNotEmpty()\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                address\n                            \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                avatarId\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                files\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                    Optional\n                                isRegisteredWithGoogle\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                permissions\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                    Public\n                                    Optional\n                                products\n                            \n                            \n                                    Public\n                                    Optional\n                                role\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LocalFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'avatarId'})@OneToOne(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatarId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivateFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isRegisteredWithGoogle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Permission[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Permission, array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/users/entities/user.entity.ts:101\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { Address } from './address.entity';\nimport { Post } from '../../posts/entities/post.entity';\nimport { PrivateFile } from '../../files/entities/private-file.entity';\nimport { Product } from '../../products/entities/product.entity';\nimport { LocalFile } from '../../../features/local-files/entities/local-file.entity';\nimport { Role } from '../../../authorization/role.enum';\nimport { Permission } from '../../../authorization/types/permission.type';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  public id?: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ default: false })\n  public isEmailConfirmed?: boolean;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    default: Role.User,\n  })\n  public role?: Role;\n\n  @Column({\n    type: 'enum',\n    enum: Permission,\n    array: true,\n    default: [],\n  })\n  public permissions?: Permission[];\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @OneToOne(() => Address, {\n    eager: true,\n    cascade: true,\n  })\n  @JoinColumn()\n  public address?: Address;\n\n  @Column()\n  @Exclude()\n  public password: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts?: Post[];\n\n  // use Amazon S3 to store avatar publicly\n  // @OneToOne(() => PublicFile, {\n  //   eager: true,\n  //   nullable: true,\n  // })\n  // @JoinColumn()\n  // public avatar?: PublicFile;\n\n  // store file directly to postgres database\n  // @JoinColumn({ name: 'avatarId' })\n  // @OneToOne(() => DatabaseFile, {\n  //   nullable: true,\n  // })\n  // public avatar?: DatabaseFile;\n\n  @JoinColumn({ name: 'avatarId' })\n  @OneToOne(() => LocalFile, {\n    nullable: true,\n  })\n  public avatar?: LocalFile;\n\n  // this field is necessary only for storing files to postgres database\n  @Column({ nullable: true })\n  public avatarId?: number;\n\n  @OneToMany(() => PrivateFile, (file: PrivateFile) => file.owner)\n  public files?: PrivateFile[];\n\n  @OneToMany(() => Product, (product: Product) => product.owner)\n  public products?: Product[];\n\n  @Column({ nullable: true })\n  @Exclude()\n  public twoFactorAuthenticationSecret?: string;\n\n  @Column({ default: false })\n  public isTwoFactorAuthenticationEnabled: boolean;\n\n  @Column({ default: false })\n  public isRegisteredWithGoogle?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/exceptions/user-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: number)\n                    \n                \n                        \n                            \n                                Defined in src/features/users/exceptions/user-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class UserNotFoundException extends NotFoundException {\n  constructor(userId: number) {\n    super(`User with id ${userId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAvatar\n                            \n                            \n                                addAvatarOnAmazonS3\n                            \n                            \n                                addAvatarOnPostgres\n                            \n                            \n                                addPrivateFile\n                            \n                            \n                                deleteAvatar\n                            \n                            \n                                deletePrivateFile\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getAvatar\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatar\n                        \n                    \n                \n            \n            \n                \naddAvatar(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatarOnAmazonS3\n                        \n                    \n                \n            \n            \n                \naddAvatarOnAmazonS3(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar/amazonS3')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAvatarOnPostgres\n                        \n                    \n                \n            \n            \n                \naddAvatarOnPostgres(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar/postgres')@ApiConsumes('multipart/form-data')@ApiBody({description: 'A new avatar for the user', type: FileUploadDto})@ApiCreatedResponse({description: 'An avatar of the user has been added successfully!', type: PublicFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \naddPrivateFile(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('files')@ApiConsumes('multipart/form-data')@ApiBody({description: 'Upload a new private file for the logged in user', type: FileUploadDto})@ApiCreatedResponse({description: 'A private file for this user has been uploaded successfully!', type: PrivateFile})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:247\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \ndeleteAvatar(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('avatar')@ApiOkResponse({description: 'Avatar for this user has been deleted successfully!'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePrivateFile\n                        \n                    \n                \n            \n            \n                \ndeletePrivateFile(request: RequestWithUser, undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('files/:id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a product that exists in the database', type: String})@ApiOkResponse({description: 'A private file of the user has been deleted successfully!'})@ApiNotFoundResponse({description: 'A file with given id does not exist.'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:273\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'All the users have been fetched successfully!', type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':email')@ApiParam({name: 'email', required: true, description: 'Should be a valid email for the user to fetch', type: String})@ApiOkResponse({description: 'A user with the email has been fetched successfully!', type: User})@ApiNotFoundResponse({description: 'A user with given email does not exist.'})\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files')@ApiOkResponse({description: 'All the private files of the user have been fetched successfully!', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvatar(userId: number, response: Response, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/avatar')\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(request: RequestWithUser, undefined: FindOneParams, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a file that exists in the database', type: String})@ApiOkResponse({description: 'A private file of the user has been fetched successfully!', type: FileResponseDto})@ApiNotFoundResponse({description: 'A file with given id does not exist.'})@ApiUnauthorizedResponse({description: 'Unauthorized.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/features/users/users.controller.ts:222\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Req,\n  Res,\n  StreamableFile,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../../authentication/request-with-user.interface';\nimport { UsersService } from './users.service';\nimport { Express, Response, Request } from 'express';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtAuthenticationGuard } from '../../authentication/jwt-authentication.guard';\nimport { FindOneParams } from '../../utils/dto/find-one-params.dto';\nimport {\n  ApiBody,\n  ApiConsumes,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { FileUploadDto } from './dto/file-upload.dto';\nimport { User } from './entities/user.entity';\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { PublicFile } from '../files/entities/public-file.entity';\nimport { PrivateFile } from '../files/entities/private-file.entity';\nimport { LocalFilesInterceptor } from '../local-files/local-files.interceptor';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @ApiOkResponse({\n    description: 'All the users have been fetched successfully!',\n    type: [User],\n  })\n  findAll() {\n    return this.usersService.getAllUsers();\n  }\n\n  @Get(':email')\n  @ApiParam({\n    name: 'email',\n    required: true,\n    description: 'Should be a valid email for the user to fetch',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A user with the email has been fetched successfully!',\n    type: User,\n  })\n  @ApiNotFoundResponse({\n    description: 'A user with given email does not exist.',\n  })\n  findOne(@Param('email') email: string) {\n    return this.usersService.getByEmail(email);\n  }\n\n  @Get(':userId/avatar')\n  async getAvatar(\n    @Param('userId', ParseIntPipe) userId: number,\n    @Res({ passthrough: true }) response: Response,\n    @Req() request: Request,\n  ) {\n    const { file, fileMetadata } = await this.usersService.getAvatar(userId);\n\n    const tag = `W/\"file-id-${fileMetadata.id}\"`;\n\n    response.set({\n      'Content-Disposition': `inline; filename=\"${fileMetadata.filename}\"`,\n      'Content-Type': fileMetadata.mimetype,\n      ETag: tag,\n    });\n\n    if (request.headers['if-none-match'] === tag) {\n      response.status(304);\n      return;\n    }\n\n    return new StreamableFile(file);\n  }\n\n  @Post('avatar')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(\n    LocalFilesInterceptor({\n      fieldName: 'file',\n      path: '/avatars',\n      fileFilter: (request, file, callback) => {\n        if (!file.mimetype.includes('image')) {\n          return callback(\n            new BadRequestException('Provide a valid image'),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n      limits: {\n        fileSize: Math.pow(1024, 2), // 1 MB\n      },\n    }),\n  )\n  addAvatar(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatar(request.user.id, {\n      path: file.path,\n      filename: file.originalname,\n      mimetype: file.mimetype,\n    });\n  }\n\n  @Delete('avatar')\n  @ApiOkResponse({\n    description: 'Avatar for this user has been deleted successfully!',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  deleteAvatar(@Req() request: RequestWithUser) {\n    return this.usersService.deleteAvatar(request.user.id);\n  }\n\n  @Post('avatar/amazonS3')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addAvatarOnAmazonS3(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatarUsingAmazonS3(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Post('avatar/postgres')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'A new avatar for the user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'An avatar of the user has been added successfully!',\n    type: PublicFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addAvatarOnPostgres(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatarInPGsql(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Get('files')\n  @ApiOkResponse({\n    description:\n      'All the private files of the user have been fetched successfully!',\n    type: [FileResponseDto],\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllPrivateFiles(@Req() request: RequestWithUser) {\n    return this.usersService.getAllPrivateFiles(request.user.id);\n  }\n\n  @Get('files/:id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a file that exists in the database',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A private file of the user has been fetched successfully!',\n    type: FileResponseDto,\n  })\n  @ApiNotFoundResponse({\n    description: 'A file with given id does not exist.',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  async getPrivateFile(\n    @Req() request: RequestWithUser,\n    @Param() { id }: FindOneParams,\n    @Res() response: Response,\n  ) {\n    const file = await this.usersService.getPrivateFile(\n      request.user.id,\n      Number(id),\n    );\n    file.stream.pipe(response);\n  }\n\n  @Post('files')\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Upload a new private file for the logged in user',\n    type: FileUploadDto,\n  })\n  @ApiCreatedResponse({\n    description: 'A private file for this user has been uploaded successfully!',\n    type: PrivateFile,\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  addPrivateFile(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.usersService.addPrivateFile(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Delete('files/:id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a product that exists in the database',\n    type: String,\n  })\n  @ApiOkResponse({\n    description: 'A private file of the user has been deleted successfully!',\n  })\n  @ApiNotFoundResponse({\n    description: 'A file with given id does not exist.',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized.' })\n  @UseGuards(JwtAuthenticationGuard)\n  deletePrivateFile(\n    @Req() request: RequestWithUser,\n    @Param() { id }: FindOneParams,\n  ) {\n    return this.usersService.deletePrivateFile(request.user.id, Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseFilesModule->UsersModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nUsersModule -->\n\nLocalFilesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseFilesModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            LocalFilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { FilesModule } from '../files/files.module';\nimport { DatabaseFilesModule } from '../database-files/database-files.module';\nimport { LocalFilesModule } from '../local-files/local-files.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    FilesModule,\n    DatabaseFilesModule,\n    LocalFilesModule,\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/email-confirmation/verification-token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayload {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/local-authentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/request-with-user.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/tests/user.mock.ts\n            \n            variable\n            mockedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/token-payload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/two-factor-authentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/two-factor-authentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authorization/authorization.controller.ts\n            \n            controller\n            AuthorizationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authorization/authorization.service.ts\n            \n            injectable\n            AuthorizationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authorization/dto/update-permissions.dto.ts\n            \n            class\n            UpdatePermissionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authorization/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authorization/permission.guard.ts\n            \n            variable\n            PermissionGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authorization/role.guard.ts\n            \n            variable\n            RoleGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authorization/types/permission.type.ts\n            \n            variable\n            Permission\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            class\n            TypeOrmConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeormModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database-logger.ts\n            \n            class\n            DatabaseLogger\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/env.validation.ts\n            \n            class\n            EnvironmentVariables\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/env.validation.ts\n            \n            function\n            validate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/features/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/categories/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/categories/exceptions/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/comments/commands/handlers/create-comment.handler.ts\n            \n            class\n            CreateCommentHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/commands/implementations/create-comment.command.ts\n            \n            class\n            CreateCommentCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/dto/get-comments.dto.ts\n            \n            class\n            GetCommentsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/comments/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/comments/queries/handlers/get-comments.handler.ts\n            \n            class\n            GetCommentsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/comments/queries/implementations/get-comments.query.ts\n            \n            class\n            GetCommentsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/database-files/database-files.controller.ts\n            \n            controller\n            DatabaseFilesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/database-files/database-files.service.ts\n            \n            injectable\n            DatabaseFilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/database-files/entities/database-file.entity.ts\n            \n            entity\n            DatabaseFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/email-confirmation/dto/confirm-email.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/email-confirmation/email-confirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/email-confirmation/email-confirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/features/email-confirmation/verification-token-payload.interface.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/email-scheduling/dto/email-schedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/email-scheduling/email-scheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/email-scheduling/email-scheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/files/entities/private-file.entity.ts\n            \n            entity\n            PrivateFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/files/entities/public-file.entity.ts\n            \n            entity\n            PublicFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/files/exceptions/file-not-found.exception.ts\n            \n            class\n            FileNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/google-authentication/dto/token-verification.dto.ts\n            \n            class\n            TokenVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/google-authentication/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/google-authentication/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/local-files/dto/local-file.dto.ts\n            \n            interface\n            LocalFileDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/local-files/entities/local-file.entity.ts\n            \n            entity\n            LocalFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.controller.ts\n            \n            controller\n            LocalFilesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.interceptor.ts\n            \n            interface\n            LocalFilesInterceptorOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.interceptor.ts\n            \n            function\n            LocalFilesInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/local-files/local-files.service.ts\n            \n            injectable\n            LocalFilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/posts/exceptions/post-not-found.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/create-product.handler.ts\n            \n            class\n            CreateProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/delete-product.handler.ts\n            \n            class\n            DeleteProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/handlers/update-product.handler.ts\n            \n            class\n            UpdateProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/create-product.command.ts\n            \n            class\n            CreateProductCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/delete-product.command.ts\n            \n            class\n            DeleteProductCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/commands/implementations/update-product.command.ts\n            \n            class\n            UpdateProductCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/products/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/dto/get-product.dto.ts\n            \n            class\n            GetProductDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/products/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/products/exceptions/file-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/features/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/products/queries/handlers/find-all-products.handler.ts\n            \n            class\n            FindAllProductsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/queries/handlers/find-product.handler.ts\n            \n            class\n            FindProductHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/queries/implementations/find-all-products.query.ts\n            \n            class\n            FindAllProductsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/products/queries/implementations/find-product.query.ts\n            \n            class\n            FindProductQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/types/book-properties.interface.ts\n            \n            interface\n            BookProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/products/types/car-properties.interface.ts\n            \n            interface\n            CarProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/features/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-upload-multiple.dto.ts\n            \n            class\n            FileUploadMultipleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/features/users/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/features/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/dto/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/entities/log.entity.ts\n            \n            entity\n            Log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/dto/find-one-params.dto.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/dto/object-with-id.dto.ts\n            \n            class\n            ObjectWithIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/dto/paginated-result.dto.ts\n            \n            class\n            PaginatedResultDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/exceptions-logger.filter.ts\n            \n            class\n            ExceptionsLoggerFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/exclude-null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/get-log-levels.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-pagination-props.ts\n            \n            variable\n            getPaginationProps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logs.middleware.ts\n            \n            injectable\n            LogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/mocks/config.service.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mocks/jwt.service.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/recursively-strip-null-values.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.4\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.4.4\n        \n            @nestjs/cqrs : ^8.0.4\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : ^1.0.1\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.4\n        \n            @nestjs/schedule : ^2.0.1\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/terminus : ^8.0.6\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @types/nodemailer : ^6.4.4\n        \n            aws-sdk : ^2.1128.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            googleapis : ^100.0.0\n        \n            nodemailer : ^6.7.5\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            qrcode : ^1.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.5.5\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.3.6\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategoriesPermission   (src/.../categoriesPermission.enum.ts)\n                        \n                        \n                            Environment   (src/.../env.validation.ts)\n                        \n                        \n                            PostgresErrorCode   (src/.../postgres-error-codes.enum.ts)\n                        \n                        \n                            ProductsPermission   (src/.../productsPermission.enum.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/features/categories/enums/categoriesPermission.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CategoriesPermission\n                    \n                \n                        \n                            \n                                 CreateCategory\n                            \n                        \n                        \n                            \n                                Value : CreateCategory\n                            \n                        \n                        \n                            \n                                 UpdateCategory\n                            \n                        \n                        \n                            \n                                Value : UpdateCategory\n                            \n                        \n                        \n                            \n                                 DeleteCategory\n                            \n                        \n                        \n                            \n                                Value : DeleteCategory\n                            \n                        \n                        \n                            \n                                 RestoreCategory\n                            \n                        \n                        \n                            \n                                Value : RestoreCategory\n                            \n                        \n            \n        \n\n    src/env.validation.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Local\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n    src/database/postgres-error-codes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n    src/features/products/enums/productsPermission.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductsPermission\n                    \n                \n                        \n                            \n                                 CreateProduct\n                            \n                        \n                        \n                            \n                                Value : CreateProduct\n                            \n                        \n                        \n                            \n                                 UpdateProduct\n                            \n                        \n                        \n                            \n                                Value : UpdateProduct\n                            \n                        \n                        \n                            \n                                 DeleteProduct\n                            \n                        \n                        \n                            \n                                Value : DeleteProduct\n                            \n                        \n            \n        \n\n    src/authorization/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 SuperAdmin\n                            \n                        \n                        \n                            \n                                Value : SuperAdmin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : Admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../get-log-levels.ts)\n                        \n                        \n                            LocalFilesInterceptor   (src/.../local-files.interceptor.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../recursively-strip-null-values.ts)\n                        \n                        \n                            validate   (src/.../env.validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/get-log-levels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/features/local-files/local-files.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LocalFilesInterceptor\n                        \n                    \n                \n            \n            \n                \nLocalFilesInterceptor(options: LocalFilesInterceptorOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                LocalFilesInterceptorOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/recursively-strip-null-values.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recursivelyStripNullValues\n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/env.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(config: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nNest framework TypeScript starter repository with custom setup maintaining industry standard best practices. Just clone and start building without worrying about anything. Focus on the product not the setup.\nOverview\n\nconfig/ setup - separated segment for each config\napp.config.ts\naws.config.ts\ndatabase.config.ts\njwt.config.ts\ntypeorm.config.ts\n\n\nauthentication module - JWT token based cookie authentication out of the box\ndatabase module - Typeorm\nAPI validation and serialization\ncustom pagination (page, limit) - check the src/features/comments module\nCQRS - check the src/features/comments module\nOut of the box file upload feature module to Amazon S3 (both private and public)\nCQRS + pagination - a complete module => src/features/products\nSwagger Open API specification setup out of the box - check the src/features/users/users.controller.ts for examples\nPostgreSQL database file storing support - check the avatar upload of users.services.ts and src/features/database-files\nSoft Delete example - check the src/features/categories module\nTwo factor authentication setup out of the box - use JwtTwoFactorGuard when some specific endpoints need 2FA\nLogging with built-in logger and TypeORM is configurable through .env - TYPEORM_LOGGING=true - specify false to disable database logging\nHealth module\nDocumentation with Compodoc and JSDoc - take a look on the src/features/files/files.service.ts for a detailed example. And for the generation command, run pnpm run documentation:serve. Or to customize it, check the package.json.\nSending scheduled emails with cron and Nodemailer - src/features/email-scheduling and check the email service in src/email\nOut of the box Google authentication module - check out the src/features/google-authentication module\nRoles and Permissions based authorization setup - check out the src/authorization module. For implementation, check the src/features/categories and src/features/products modules\n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthorizationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LocalFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthorizationModule\n\n\n\ncluster_AuthorizationModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_DatabaseFilesModule\n\n\n\ncluster_DatabaseFilesModule_exports\n\n\n\ncluster_DatabaseFilesModule_providers\n\n\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_LocalFilesModule\n\n\n\ncluster_LocalFilesModule_exports\n\n\n\ncluster_LocalFilesModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthorizationModule\n\nAuthorizationModule\n\nAppModule -->\n\nAuthorizationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseFilesModule\n\nDatabaseFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseFilesModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseFilesModule->AppModule\n\n\n\n\n\nDatabaseFilesService \n\nDatabaseFilesService \n\nDatabaseFilesService  -->\n\nDatabaseFilesModule->DatabaseFilesService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLocalFilesModule\n\nLocalFilesModule\n\nUsersModule -->\n\nLocalFilesModule->UsersModule\n\n\n\nAppModule -->\n\nLocalFilesModule->AppModule\n\n\n\n\n\nLocalFilesService \n\nLocalFilesService \n\nLocalFilesService  -->\n\nLocalFilesModule->LocalFilesService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\nAuthorizationService\n\nAuthorizationService\n\nAuthorizationModule -->\n\nAuthorizationService->AuthorizationModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nDatabaseFilesService\n\nDatabaseFilesService\n\nDatabaseFilesModule -->\n\nDatabaseFilesService->DatabaseFilesModule\n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\nLocalFilesService\n\nLocalFilesService\n\nLocalFilesModule -->\n\nLocalFilesService->LocalFilesModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        18 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    15 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    27 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    50 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Permission   (src/.../permission.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authorization/types/permission.type.ts\n    \n    \n        \n            \n                \n                    \n                    Permission\n                \n            \n            \n                \n                            ProductsPermission | CategoriesPermission\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getPaginationProps   (src/.../get-pagination-props.ts)\n                        \n                        \n                            mockedConfigService   (src/.../config.service.ts)\n                        \n                        \n                            mockedJwtService   (src/.../jwt.service.ts)\n                        \n                        \n                            mockedUser   (src/.../user.mock.ts)\n                        \n                        \n                            Permission   (src/.../permission.type.ts)\n                        \n                        \n                            PermissionGuard   (src/.../permission.guard.ts)\n                        \n                        \n                            RoleGuard   (src/.../role.guard.ts)\n                        \n                        \n                            typeormModuleOptions   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/get-pagination-props.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getPaginationProps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (paginationDto: PaginationDto) => {\n  if (Object.keys(paginationDto).length === 0) {\n    return {\n      page: 1,\n      limit: 20,\n      skippedItems: 0,\n    };\n  }\n\n  const page = Number(paginationDto.page);\n  const limit = Number(paginationDto.limit);\n  const skippedItems = (page - 1) * limit;\n\n  return {\n    page,\n    limit: limit > 20 ? 20 : limit,\n    skippedItems,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get(key: string) {\n    switch (key) {\n      case 'JWT_EXPIRATION_TIME':\n        return '3600';\n    }\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedJwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  sign: () => '',\n}\n                    \n                \n\n\n        \n    \n\n    src/authentication/tests/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: 1,\n  email: 'user@email.com',\n  name: 'John',\n  password: 'hash',\n  address: {\n    id: 1,\n    street: 'streetName',\n    city: 'cityName',\n    country: 'countryName',\n  },\n  isTwoFactorAuthenticationEnabled: false,\n}\n                    \n                \n\n\n        \n    \n\n    src/authorization/types/permission.type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  ...ProductsPermission,\n  ...CategoriesPermission,\n}\n                    \n                \n\n\n        \n    \n\n    src/authorization/permission.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PermissionGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (permission: Permission): Type => {\n  class PermissionGuardMixin extends JwtAuthenticationGuard {\n    async canActivate(context: ExecutionContext) {\n      await super.canActivate(context);\n\n      const request = context.switchToHttp().getRequest();\n      const user = request.user;\n\n      return user?.permissions.includes(permission);\n    }\n  }\n\n  return mixin(PermissionGuardMixin);\n}\n                    \n                \n\n\n        \n    \n\n    src/authorization/role.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: Role): Type => {\n  class RoleGuardMixin extends JwtAuthenticationGuard {\n    async canActivate(context: ExecutionContext) {\n      await super.canActivate(context);\n\n      const request = context.switchToHttp().getRequest();\n      const user = request.user;\n\n      return user?.role === role;\n    }\n  }\n\n  return mixin(RoleGuardMixin);\n}\n                    \n                \n\n\n        \n    \n\n    src/config/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeormModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleAsyncOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  imports: [ConfigModule],\n  useFactory: async (\n    configService: ConfigService,\n  ): Promise => TypeOrmConfig.getOrmConfig(configService),\n  inject: [ConfigService],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
